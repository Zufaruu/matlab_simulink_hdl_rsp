// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\RSP\RSP\RSP\TWDLMULT_SDNF1_3_block5.v
// Created: 2023-09-29 06:09:50
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: TWDLMULT_SDNF1_3_block5
// Source Path: RSP/RSP/Velocity Processor/Doppler Processing/Doppler Processor/FFT/TWDLMULT_SDNF1_3
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module TWDLMULT_SDNF1_3_block5
          (clk,
           reset,
           enb,
           dout_10_re,
           dout_10_im,
           dout_12_re,
           dout_12_im,
           dout_2_vld,
           twdl_3_13_re,
           twdl_3_13_im,
           twdl_3_14_re,
           twdl_3_14_im,
           twdlXdin_13_re,
           twdlXdin_13_im,
           twdlXdin_14_re,
           twdlXdin_14_im);


  input   clk;
  input   reset;
  input   enb;
  input   signed [13:0] dout_10_re;  // sfix14_En10
  input   signed [13:0] dout_10_im;  // sfix14_En10
  input   signed [13:0] dout_12_re;  // sfix14_En10
  input   signed [13:0] dout_12_im;  // sfix14_En10
  input   dout_2_vld;
  input   signed [11:0] twdl_3_13_re;  // sfix12_En10
  input   signed [11:0] twdl_3_13_im;  // sfix12_En10
  input   signed [11:0] twdl_3_14_re;  // sfix12_En10
  input   signed [11:0] twdl_3_14_im;  // sfix12_En10
  output  signed [14:0] twdlXdin_13_re;  // sfix15_En10
  output  signed [14:0] twdlXdin_13_im;  // sfix15_En10
  output  signed [14:0] twdlXdin_14_re;  // sfix15_En10
  output  signed [14:0] twdlXdin_14_im;  // sfix15_En10


  wire signed [14:0] din_re;  // sfix15_En10
  reg signed [14:0] din1_re_dly1;  // sfix15_En10
  reg signed [14:0] din1_re_dly2;  // sfix15_En10
  reg signed [14:0] din1_re_dly3;  // sfix15_En10
  wire signed [14:0] din_im;  // sfix15_En10
  reg signed [14:0] din1_im_dly1;  // sfix15_En10
  reg signed [14:0] din1_im_dly2;  // sfix15_En10
  reg signed [14:0] din1_im_dly3;  // sfix15_En10
  reg  din1_vld_dly1;
  reg  din1_vld_dly2;
  reg  din1_vld_dly3;
  wire signed [14:0] din_re_1;  // sfix15_En10
  reg signed [14:0] din2_re_dly1;  // sfix15_En10
  reg signed [14:0] din2_re_dly2;  // sfix15_En10
  reg signed [14:0] din2_re_dly3;  // sfix15_En10
  wire signed [14:0] din_im_1;  // sfix15_En10
  reg signed [14:0] din2_im_dly1;  // sfix15_En10
  reg signed [14:0] din2_im_dly2;  // sfix15_En10
  reg signed [14:0] din2_im_dly3;  // sfix15_En10
  reg  di2_vld_dly1;
  reg  di2_vld_dly2;
  reg  di2_vld_dly3;


  assign din_re = {dout_10_re[13], dout_10_re};



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        din1_re_dly1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din1_re_dly1 <= din_re;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        din1_re_dly2 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din1_re_dly2 <= din1_re_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        din1_re_dly3 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din1_re_dly3 <= din1_re_dly2;
        end
      end
    end



  assign din_im = {dout_10_im[13], dout_10_im};



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        din1_im_dly1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din1_im_dly1 <= din_im;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        din1_im_dly2 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din1_im_dly2 <= din1_im_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        din1_im_dly3 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din1_im_dly3 <= din1_im_dly2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        din1_vld_dly1 <= 1'b0;
      end
      else begin
        if (enb) begin
          din1_vld_dly1 <= dout_2_vld;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        din1_vld_dly2 <= 1'b0;
      end
      else begin
        if (enb) begin
          din1_vld_dly2 <= din1_vld_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        din1_vld_dly3 <= 1'b0;
      end
      else begin
        if (enb) begin
          din1_vld_dly3 <= din1_vld_dly2;
        end
      end
    end



  Complex4Multiply_block9 u_MUL4_1 (.clk(clk),
                                    .reset(reset),
                                    .enb(enb),
                                    .din1_re_dly3(din1_re_dly3),  // sfix15_En10
                                    .din1_im_dly3(din1_im_dly3),  // sfix15_En10
                                    .din1_vld_dly3(din1_vld_dly3),
                                    .twdl_3_13_re(twdl_3_13_re),  // sfix12_En10
                                    .twdl_3_13_im(twdl_3_13_im),  // sfix12_En10
                                    .twdlXdin_13_re(twdlXdin_13_re),  // sfix15_En10
                                    .twdlXdin_13_im(twdlXdin_13_im)  // sfix15_En10
                                    );

  assign din_re_1 = {dout_12_re[13], dout_12_re};



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        din2_re_dly1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din2_re_dly1 <= din_re_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        din2_re_dly2 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din2_re_dly2 <= din2_re_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        din2_re_dly3 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din2_re_dly3 <= din2_re_dly2;
        end
      end
    end



  assign din_im_1 = {dout_12_im[13], dout_12_im};



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        din2_im_dly1 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din2_im_dly1 <= din_im_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        din2_im_dly2 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din2_im_dly2 <= din2_im_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        din2_im_dly3 <= 15'sb000000000000000;
      end
      else begin
        if (enb) begin
          din2_im_dly3 <= din2_im_dly2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        di2_vld_dly1 <= 1'b0;
      end
      else begin
        if (enb) begin
          di2_vld_dly1 <= dout_2_vld;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        di2_vld_dly2 <= 1'b0;
      end
      else begin
        if (enb) begin
          di2_vld_dly2 <= di2_vld_dly1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        di2_vld_dly3 <= 1'b0;
      end
      else begin
        if (enb) begin
          di2_vld_dly3 <= di2_vld_dly2;
        end
      end
    end



  Complex4Multiply_block10 u_MUL4_2 (.clk(clk),
                                     .reset(reset),
                                     .enb(enb),
                                     .din2_re_dly3(din2_re_dly3),  // sfix15_En10
                                     .din2_im_dly3(din2_im_dly3),  // sfix15_En10
                                     .di2_vld_dly3(di2_vld_dly3),
                                     .twdl_3_14_re(twdl_3_14_re),  // sfix12_En10
                                     .twdl_3_14_im(twdl_3_14_im),  // sfix12_En10
                                     .twdlXdin_14_re(twdlXdin_14_re),  // sfix15_En10
                                     .twdlXdin_14_im(twdlXdin_14_im)  // sfix15_En10
                                     );

endmodule  // TWDLMULT_SDNF1_3_block5

