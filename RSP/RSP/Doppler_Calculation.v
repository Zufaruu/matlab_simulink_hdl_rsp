// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\RSP\RSP\RSP\Doppler_Calculation.v
// Created: 2023-09-27 04:10:35
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Doppler_Calculation
// Source Path: RSP/RSP/Velocity Processor/Doppler Processing/Doppler Processor/Doppler Calculation
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Doppler_Calculation
          (u_0,
           u_1,
           u_2,
           u_3,
           u_4,
           u_5,
           u_6,
           u_7,
           u_8,
           u_9,
           u_10,
           u_11,
           u_12,
           u_13,
           u_14,
           u_15,
           u_16,
           u_17,
           u_18,
           u_19,
           u_20,
           u_21,
           u_22,
           u_23,
           u_24,
           u_25,
           u_26,
           u_27,
           u_28,
           u_29,
           u_30,
           u_31,
           f);


  input   signed [31:0] u_0;  // sfix32_En32
  input   signed [31:0] u_1;  // sfix32_En32
  input   signed [31:0] u_2;  // sfix32_En32
  input   signed [31:0] u_3;  // sfix32_En32
  input   signed [31:0] u_4;  // sfix32_En32
  input   signed [31:0] u_5;  // sfix32_En32
  input   signed [31:0] u_6;  // sfix32_En32
  input   signed [31:0] u_7;  // sfix32_En32
  input   signed [31:0] u_8;  // sfix32_En32
  input   signed [31:0] u_9;  // sfix32_En32
  input   signed [31:0] u_10;  // sfix32_En32
  input   signed [31:0] u_11;  // sfix32_En32
  input   signed [31:0] u_12;  // sfix32_En32
  input   signed [31:0] u_13;  // sfix32_En32
  input   signed [31:0] u_14;  // sfix32_En32
  input   signed [31:0] u_15;  // sfix32_En32
  input   signed [31:0] u_16;  // sfix32_En32
  input   signed [31:0] u_17;  // sfix32_En32
  input   signed [31:0] u_18;  // sfix32_En32
  input   signed [31:0] u_19;  // sfix32_En32
  input   signed [31:0] u_20;  // sfix32_En32
  input   signed [31:0] u_21;  // sfix32_En32
  input   signed [31:0] u_22;  // sfix32_En32
  input   signed [31:0] u_23;  // sfix32_En32
  input   signed [31:0] u_24;  // sfix32_En32
  input   signed [31:0] u_25;  // sfix32_En32
  input   signed [31:0] u_26;  // sfix32_En32
  input   signed [31:0] u_27;  // sfix32_En32
  input   signed [31:0] u_28;  // sfix32_En32
  input   signed [31:0] u_29;  // sfix32_En32
  input   signed [31:0] u_30;  // sfix32_En32
  input   signed [31:0] u_31;  // sfix32_En32
  output  [31:0] f;  // ufix32_En5


  wire signed [31:0] u [0:31];  // sfix32_En32 [32]
  reg [31:0] f_1;  // ufix32_En5
  reg signed [31:0] max;  // sfix32_En32
  reg [15:0] idx_max;  // uint16
  reg signed [31:0] i;  // uint16
  reg [15:0] y;  // uint16
  reg [15:0] z;  // uint16
  reg [31:0] mul_temp;  // ufix32
  reg signed [16:0] sub_cast;  // sfix17_E5
  reg signed [48:0] sub_cast_0;  // sfix49
  reg [15:0] sub_cast_1;  // uint16
  reg signed [31:0] t_0;  // int32


  assign u[0] = u_0;
  assign u[1] = u_1;
  assign u[2] = u_2;
  assign u[3] = u_3;
  assign u[4] = u_4;
  assign u[5] = u_5;
  assign u[6] = u_6;
  assign u[7] = u_7;
  assign u[8] = u_8;
  assign u[9] = u_9;
  assign u[10] = u_10;
  assign u[11] = u_11;
  assign u[12] = u_12;
  assign u[13] = u_13;
  assign u[14] = u_14;
  assign u[15] = u_15;
  assign u[16] = u_16;
  assign u[17] = u_17;
  assign u[18] = u_18;
  assign u[19] = u_19;
  assign u[20] = u_20;
  assign u[21] = u_21;
  assign u[22] = u_22;
  assign u[23] = u_23;
  assign u[24] = u_24;
  assign u[25] = u_25;
  assign u[26] = u_26;
  assign u[27] = u_27;
  assign u[28] = u_28;
  assign u[29] = u_29;
  assign u[30] = u_30;
  assign u[31] = u_31;

  always @* begin
    max = 32'sb00000000000000000000000000000000;
    idx_max = 16'd0;

    for(i = 16'd1; i <= 16'd16; i = i + 16'd1) begin
      if (u[i - 32'sd1] > max) begin
        max = u[i - 32'sd1];
        idx_max = i;
      end
    end

    mul_temp = idx_max * 16'd5000;
    if (mul_temp[31:16] != 16'b0000000000000000) begin
      y = 16'b1111111111111111;
    end
    else begin
      y = mul_temp[15:0];
    end
    z = y >> 32'd5;
    sub_cast = {1'b0, z};
    sub_cast_0 = {{27{sub_cast[16]}}, {sub_cast, 5'b00000}};
    t_0 = sub_cast_0[31:0];
    sub_cast_1 = t_0[15:0];
    if ((y - sub_cast_1) >= 16'd16) begin
      z = z + 16'd1;
    end
    f_1 = {11'b0, {z, 5'b00000}};
  end



  assign f = f_1;

endmodule  // Doppler_Calculation

