// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\RSP\RSP\RSP\Doppler_Processing.v
// Created: 2023-09-27 04:10:36
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Doppler_Processing
// Source Path: RSP/RSP/Velocity Processor/Doppler Processing
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Doppler_Processing
          (clk,
           reset,
           enb,
           obs_sample,
           vel);


  input   clk;
  input   reset;
  input   enb;
  input   signed [11:0] obs_sample;  // sfix12_En10
  output  [11:0] vel;  // ufix12_En5


  wire signed [11:0] buffer_0;  // sfix12_En10
  wire signed [11:0] buffer_1;  // sfix12_En10
  wire signed [11:0] buffer_2;  // sfix12_En10
  wire signed [11:0] buffer_3;  // sfix12_En10
  wire signed [11:0] buffer_4;  // sfix12_En10
  wire signed [11:0] buffer_5;  // sfix12_En10
  wire signed [11:0] buffer_6;  // sfix12_En10
  wire signed [11:0] buffer_7;  // sfix12_En10
  wire signed [11:0] buffer_8;  // sfix12_En10
  wire signed [11:0] buffer_9;  // sfix12_En10
  wire signed [11:0] buffer_10;  // sfix12_En10
  wire signed [11:0] buffer_11;  // sfix12_En10
  wire signed [11:0] buffer_12;  // sfix12_En10
  wire signed [11:0] buffer_13;  // sfix12_En10
  wire signed [11:0] buffer_14;  // sfix12_En10
  wire signed [11:0] buffer_15;  // sfix12_En10
  wire signed [11:0] buffer_16;  // sfix12_En10
  wire signed [11:0] buffer_17;  // sfix12_En10
  wire signed [11:0] buffer_18;  // sfix12_En10
  wire signed [11:0] buffer_19;  // sfix12_En10
  wire signed [11:0] buffer_20;  // sfix12_En10
  wire signed [11:0] buffer_21;  // sfix12_En10
  wire signed [11:0] buffer_22;  // sfix12_En10
  wire signed [11:0] buffer_23;  // sfix12_En10
  wire signed [11:0] buffer_24;  // sfix12_En10
  wire signed [11:0] buffer_25;  // sfix12_En10
  wire signed [11:0] buffer_26;  // sfix12_En10
  wire signed [11:0] buffer_27;  // sfix12_En10
  wire signed [11:0] buffer_28;  // sfix12_En10
  wire signed [11:0] buffer_29;  // sfix12_En10
  wire signed [11:0] buffer_30;  // sfix12_En10
  wire signed [11:0] buffer_31;  // sfix12_En10
  wire [31:0] Buffer_lag_observation_out2;  // uint32
  wire [15:0] y_0;  // uint16
  wire [15:0] y_1;  // uint16
  wire [15:0] y_2;  // uint16
  wire [15:0] y_3;  // uint16
  wire [15:0] y_4;  // uint16
  wire [15:0] y_5;  // uint16
  wire [15:0] y_6;  // uint16
  wire [15:0] y_7;  // uint16
  wire [15:0] y_8;  // uint16
  wire [15:0] y_9;  // uint16
  wire [15:0] y_10;  // uint16
  wire [15:0] y_11;  // uint16
  wire [15:0] y_12;  // uint16
  wire [15:0] y_13;  // uint16
  wire [15:0] y_14;  // uint16
  wire [15:0] y_15;  // uint16
  wire [15:0] y_16;  // uint16
  wire [15:0] y_17;  // uint16
  wire [15:0] y_18;  // uint16
  wire [15:0] y_19;  // uint16
  wire [15:0] y_20;  // uint16
  wire [15:0] y_21;  // uint16
  wire [15:0] y_22;  // uint16
  wire [15:0] y_23;  // uint16
  wire [15:0] y_24;  // uint16
  wire [15:0] y_25;  // uint16
  wire [15:0] y_26;  // uint16
  wire [15:0] y_27;  // uint16
  wire [15:0] y_28;  // uint16
  wire [15:0] y_29;  // uint16
  wire [15:0] y_30;  // uint16
  wire [15:0] y_31;  // uint16
  wire switch_compare_1;
  wire [15:0] y [0:31];  // uint16 [32]
  wire signed [11:0] Data_Type_Conversion4_out1 [0:31];  // sfix12_En10 [32]
  wire signed [11:0] buffer [0:31];  // sfix12_En10 [32]
  wire signed [11:0] Observation_Switch_out1 [0:31];  // sfix12_En10 [32]
  wire [31:0] f;  // ufix32_En5
  wire [43:0] Vel_Calculation_out1;  // ufix44_En11
  wire [11:0] Data_Type_Conversion3_out1;  // ufix12_En5

  // N_sample * symbol_delay
  // N_observation


  Buffer_lag_observation u_Buffer_lag_observation (.clk(clk),
                                                   .reset(reset),
                                                   .enb(enb),
                                                   .scalar(obs_sample),  // sfix12_En10
                                                   .vector_0(buffer_0),  // sfix12_En10
                                                   .vector_1(buffer_1),  // sfix12_En10
                                                   .vector_2(buffer_2),  // sfix12_En10
                                                   .vector_3(buffer_3),  // sfix12_En10
                                                   .vector_4(buffer_4),  // sfix12_En10
                                                   .vector_5(buffer_5),  // sfix12_En10
                                                   .vector_6(buffer_6),  // sfix12_En10
                                                   .vector_7(buffer_7),  // sfix12_En10
                                                   .vector_8(buffer_8),  // sfix12_En10
                                                   .vector_9(buffer_9),  // sfix12_En10
                                                   .vector_10(buffer_10),  // sfix12_En10
                                                   .vector_11(buffer_11),  // sfix12_En10
                                                   .vector_12(buffer_12),  // sfix12_En10
                                                   .vector_13(buffer_13),  // sfix12_En10
                                                   .vector_14(buffer_14),  // sfix12_En10
                                                   .vector_15(buffer_15),  // sfix12_En10
                                                   .vector_16(buffer_16),  // sfix12_En10
                                                   .vector_17(buffer_17),  // sfix12_En10
                                                   .vector_18(buffer_18),  // sfix12_En10
                                                   .vector_19(buffer_19),  // sfix12_En10
                                                   .vector_20(buffer_20),  // sfix12_En10
                                                   .vector_21(buffer_21),  // sfix12_En10
                                                   .vector_22(buffer_22),  // sfix12_En10
                                                   .vector_23(buffer_23),  // sfix12_En10
                                                   .vector_24(buffer_24),  // sfix12_En10
                                                   .vector_25(buffer_25),  // sfix12_En10
                                                   .vector_26(buffer_26),  // sfix12_En10
                                                   .vector_27(buffer_27),  // sfix12_En10
                                                   .vector_28(buffer_28),  // sfix12_En10
                                                   .vector_29(buffer_29),  // sfix12_En10
                                                   .vector_30(buffer_30),  // sfix12_En10
                                                   .vector_31(buffer_31),  // sfix12_En10
                                                   .counter(Buffer_lag_observation_out2)  // uint32
                                                   );

  Zero_Obs_Samples u_Zero_Obs_Samples (.y_0(y_0),  // uint16
                                       .y_1(y_1),  // uint16
                                       .y_2(y_2),  // uint16
                                       .y_3(y_3),  // uint16
                                       .y_4(y_4),  // uint16
                                       .y_5(y_5),  // uint16
                                       .y_6(y_6),  // uint16
                                       .y_7(y_7),  // uint16
                                       .y_8(y_8),  // uint16
                                       .y_9(y_9),  // uint16
                                       .y_10(y_10),  // uint16
                                       .y_11(y_11),  // uint16
                                       .y_12(y_12),  // uint16
                                       .y_13(y_13),  // uint16
                                       .y_14(y_14),  // uint16
                                       .y_15(y_15),  // uint16
                                       .y_16(y_16),  // uint16
                                       .y_17(y_17),  // uint16
                                       .y_18(y_18),  // uint16
                                       .y_19(y_19),  // uint16
                                       .y_20(y_20),  // uint16
                                       .y_21(y_21),  // uint16
                                       .y_22(y_22),  // uint16
                                       .y_23(y_23),  // uint16
                                       .y_24(y_24),  // uint16
                                       .y_25(y_25),  // uint16
                                       .y_26(y_26),  // uint16
                                       .y_27(y_27),  // uint16
                                       .y_28(y_28),  // uint16
                                       .y_29(y_29),  // uint16
                                       .y_30(y_30),  // uint16
                                       .y_31(y_31)  // uint16
                                       );

  assign switch_compare_1 = Buffer_lag_observation_out2 >= 32'b00000000000000100111111111111111;



  assign y[0] = y_0;
  assign y[1] = y_1;
  assign y[2] = y_2;
  assign y[3] = y_3;
  assign y[4] = y_4;
  assign y[5] = y_5;
  assign y[6] = y_6;
  assign y[7] = y_7;
  assign y[8] = y_8;
  assign y[9] = y_9;
  assign y[10] = y_10;
  assign y[11] = y_11;
  assign y[12] = y_12;
  assign y[13] = y_13;
  assign y[14] = y_14;
  assign y[15] = y_15;
  assign y[16] = y_16;
  assign y[17] = y_17;
  assign y[18] = y_18;
  assign y[19] = y_19;
  assign y[20] = y_20;
  assign y[21] = y_21;
  assign y[22] = y_22;
  assign y[23] = y_23;
  assign y[24] = y_24;
  assign y[25] = y_25;
  assign y[26] = y_26;
  assign y[27] = y_27;
  assign y[28] = y_28;
  assign y[29] = y_29;
  assign y[30] = y_30;
  assign y[31] = y_31;

  assign Data_Type_Conversion4_out1[0] = $signed({y[0][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[1] = $signed({y[1][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[2] = $signed({y[2][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[3] = $signed({y[3][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[4] = $signed({y[4][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[5] = $signed({y[5][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[6] = $signed({y[6][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[7] = $signed({y[7][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[8] = $signed({y[8][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[9] = $signed({y[9][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[10] = $signed({y[10][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[11] = $signed({y[11][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[12] = $signed({y[12][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[13] = $signed({y[13][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[14] = $signed({y[14][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[15] = $signed({y[15][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[16] = $signed({y[16][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[17] = $signed({y[17][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[18] = $signed({y[18][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[19] = $signed({y[19][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[20] = $signed({y[20][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[21] = $signed({y[21][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[22] = $signed({y[22][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[23] = $signed({y[23][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[24] = $signed({y[24][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[25] = $signed({y[25][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[26] = $signed({y[26][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[27] = $signed({y[27][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[28] = $signed({y[28][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[29] = $signed({y[29][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[30] = $signed({y[30][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[31] = $signed({y[31][1:0], 10'b0000000000});



  assign buffer[0] = buffer_0;
  assign buffer[1] = buffer_1;
  assign buffer[2] = buffer_2;
  assign buffer[3] = buffer_3;
  assign buffer[4] = buffer_4;
  assign buffer[5] = buffer_5;
  assign buffer[6] = buffer_6;
  assign buffer[7] = buffer_7;
  assign buffer[8] = buffer_8;
  assign buffer[9] = buffer_9;
  assign buffer[10] = buffer_10;
  assign buffer[11] = buffer_11;
  assign buffer[12] = buffer_12;
  assign buffer[13] = buffer_13;
  assign buffer[14] = buffer_14;
  assign buffer[15] = buffer_15;
  assign buffer[16] = buffer_16;
  assign buffer[17] = buffer_17;
  assign buffer[18] = buffer_18;
  assign buffer[19] = buffer_19;
  assign buffer[20] = buffer_20;
  assign buffer[21] = buffer_21;
  assign buffer[22] = buffer_22;
  assign buffer[23] = buffer_23;
  assign buffer[24] = buffer_24;
  assign buffer[25] = buffer_25;
  assign buffer[26] = buffer_26;
  assign buffer[27] = buffer_27;
  assign buffer[28] = buffer_28;
  assign buffer[29] = buffer_29;
  assign buffer[30] = buffer_30;
  assign buffer[31] = buffer_31;

  assign Observation_Switch_out1[0] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[0] :
              buffer[0]);
  assign Observation_Switch_out1[1] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[1] :
              buffer[1]);
  assign Observation_Switch_out1[2] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[2] :
              buffer[2]);
  assign Observation_Switch_out1[3] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[3] :
              buffer[3]);
  assign Observation_Switch_out1[4] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[4] :
              buffer[4]);
  assign Observation_Switch_out1[5] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[5] :
              buffer[5]);
  assign Observation_Switch_out1[6] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[6] :
              buffer[6]);
  assign Observation_Switch_out1[7] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[7] :
              buffer[7]);
  assign Observation_Switch_out1[8] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[8] :
              buffer[8]);
  assign Observation_Switch_out1[9] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[9] :
              buffer[9]);
  assign Observation_Switch_out1[10] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[10] :
              buffer[10]);
  assign Observation_Switch_out1[11] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[11] :
              buffer[11]);
  assign Observation_Switch_out1[12] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[12] :
              buffer[12]);
  assign Observation_Switch_out1[13] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[13] :
              buffer[13]);
  assign Observation_Switch_out1[14] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[14] :
              buffer[14]);
  assign Observation_Switch_out1[15] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[15] :
              buffer[15]);
  assign Observation_Switch_out1[16] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[16] :
              buffer[16]);
  assign Observation_Switch_out1[17] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[17] :
              buffer[17]);
  assign Observation_Switch_out1[18] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[18] :
              buffer[18]);
  assign Observation_Switch_out1[19] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[19] :
              buffer[19]);
  assign Observation_Switch_out1[20] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[20] :
              buffer[20]);
  assign Observation_Switch_out1[21] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[21] :
              buffer[21]);
  assign Observation_Switch_out1[22] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[22] :
              buffer[22]);
  assign Observation_Switch_out1[23] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[23] :
              buffer[23]);
  assign Observation_Switch_out1[24] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[24] :
              buffer[24]);
  assign Observation_Switch_out1[25] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[25] :
              buffer[25]);
  assign Observation_Switch_out1[26] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[26] :
              buffer[26]);
  assign Observation_Switch_out1[27] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[27] :
              buffer[27]);
  assign Observation_Switch_out1[28] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[28] :
              buffer[28]);
  assign Observation_Switch_out1[29] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[29] :
              buffer[29]);
  assign Observation_Switch_out1[30] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[30] :
              buffer[30]);
  assign Observation_Switch_out1[31] = (switch_compare_1 == 1'b0 ? Data_Type_Conversion4_out1[31] :
              buffer[31]);



  Doppler_Processor u_Doppler_Processor (.clk(clk),
                                         .reset(reset),
                                         .enb(enb),
                                         .obs_samples_0(Observation_Switch_out1[0]),  // sfix12_En10
                                         .obs_samples_1(Observation_Switch_out1[1]),  // sfix12_En10
                                         .obs_samples_2(Observation_Switch_out1[2]),  // sfix12_En10
                                         .obs_samples_3(Observation_Switch_out1[3]),  // sfix12_En10
                                         .obs_samples_4(Observation_Switch_out1[4]),  // sfix12_En10
                                         .obs_samples_5(Observation_Switch_out1[5]),  // sfix12_En10
                                         .obs_samples_6(Observation_Switch_out1[6]),  // sfix12_En10
                                         .obs_samples_7(Observation_Switch_out1[7]),  // sfix12_En10
                                         .obs_samples_8(Observation_Switch_out1[8]),  // sfix12_En10
                                         .obs_samples_9(Observation_Switch_out1[9]),  // sfix12_En10
                                         .obs_samples_10(Observation_Switch_out1[10]),  // sfix12_En10
                                         .obs_samples_11(Observation_Switch_out1[11]),  // sfix12_En10
                                         .obs_samples_12(Observation_Switch_out1[12]),  // sfix12_En10
                                         .obs_samples_13(Observation_Switch_out1[13]),  // sfix12_En10
                                         .obs_samples_14(Observation_Switch_out1[14]),  // sfix12_En10
                                         .obs_samples_15(Observation_Switch_out1[15]),  // sfix12_En10
                                         .obs_samples_16(Observation_Switch_out1[16]),  // sfix12_En10
                                         .obs_samples_17(Observation_Switch_out1[17]),  // sfix12_En10
                                         .obs_samples_18(Observation_Switch_out1[18]),  // sfix12_En10
                                         .obs_samples_19(Observation_Switch_out1[19]),  // sfix12_En10
                                         .obs_samples_20(Observation_Switch_out1[20]),  // sfix12_En10
                                         .obs_samples_21(Observation_Switch_out1[21]),  // sfix12_En10
                                         .obs_samples_22(Observation_Switch_out1[22]),  // sfix12_En10
                                         .obs_samples_23(Observation_Switch_out1[23]),  // sfix12_En10
                                         .obs_samples_24(Observation_Switch_out1[24]),  // sfix12_En10
                                         .obs_samples_25(Observation_Switch_out1[25]),  // sfix12_En10
                                         .obs_samples_26(Observation_Switch_out1[26]),  // sfix12_En10
                                         .obs_samples_27(Observation_Switch_out1[27]),  // sfix12_En10
                                         .obs_samples_28(Observation_Switch_out1[28]),  // sfix12_En10
                                         .obs_samples_29(Observation_Switch_out1[29]),  // sfix12_En10
                                         .obs_samples_30(Observation_Switch_out1[30]),  // sfix12_En10
                                         .obs_samples_31(Observation_Switch_out1[31]),  // sfix12_En10
                                         .dopp_freq(f)  // ufix32_En5
                                         );

  Vel_Calculation u_Vel_Calculation (.doppler_freq(f),  // ufix32_En5
                                     .vel(Vel_Calculation_out1)  // ufix44_En11
                                     );

  assign Data_Type_Conversion3_out1 = Vel_Calculation_out1[17:6];



  assign vel = Data_Type_Conversion3_out1;

endmodule  // Doppler_Processing

