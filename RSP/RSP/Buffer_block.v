// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\RSP\RSP\RSP\buffer_block.v
// Created: 2023-09-27 04:10:35
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: buffer_block
// Source Path: RSP/RSP/Velocity Processor/Doppler Processing/Buffer_lag_observation/buffer
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module buffer_block
          (value,
           vector_zero_0,
           vector_zero_1,
           vector_zero_2,
           vector_zero_3,
           vector_zero_4,
           vector_zero_5,
           vector_zero_6,
           vector_zero_7,
           vector_zero_8,
           vector_zero_9,
           vector_zero_10,
           vector_zero_11,
           vector_zero_12,
           vector_zero_13,
           vector_zero_14,
           vector_zero_15,
           vector_zero_16,
           vector_zero_17,
           vector_zero_18,
           vector_zero_19,
           vector_zero_20,
           vector_zero_21,
           vector_zero_22,
           vector_zero_23,
           vector_zero_24,
           vector_zero_25,
           vector_zero_26,
           vector_zero_27,
           vector_zero_28,
           vector_zero_29,
           vector_zero_30,
           vector_zero_31,
           vector_before_0,
           vector_before_1,
           vector_before_2,
           vector_before_3,
           vector_before_4,
           vector_before_5,
           vector_before_6,
           vector_before_7,
           vector_before_8,
           vector_before_9,
           vector_before_10,
           vector_before_11,
           vector_before_12,
           vector_before_13,
           vector_before_14,
           vector_before_15,
           vector_before_16,
           vector_before_17,
           vector_before_18,
           vector_before_19,
           vector_before_20,
           vector_before_21,
           vector_before_22,
           vector_before_23,
           vector_before_24,
           vector_before_25,
           vector_before_26,
           vector_before_27,
           vector_before_28,
           vector_before_29,
           vector_before_30,
           vector_before_31,
           counter,
           counter_obs_before,
           buffer_0,
           buffer_1,
           buffer_2,
           buffer_3,
           buffer_4,
           buffer_5,
           buffer_6,
           buffer_7,
           buffer_8,
           buffer_9,
           buffer_10,
           buffer_11,
           buffer_12,
           buffer_13,
           buffer_14,
           buffer_15,
           buffer_16,
           buffer_17,
           buffer_18,
           buffer_19,
           buffer_20,
           buffer_21,
           buffer_22,
           buffer_23,
           buffer_24,
           buffer_25,
           buffer_26,
           buffer_27,
           buffer_28,
           buffer_29,
           buffer_30,
           buffer_31,
           counter_obs);


  input   signed [11:0] value;  // sfix12_En10
  input   signed [11:0] vector_zero_0;  // sfix12_En10
  input   signed [11:0] vector_zero_1;  // sfix12_En10
  input   signed [11:0] vector_zero_2;  // sfix12_En10
  input   signed [11:0] vector_zero_3;  // sfix12_En10
  input   signed [11:0] vector_zero_4;  // sfix12_En10
  input   signed [11:0] vector_zero_5;  // sfix12_En10
  input   signed [11:0] vector_zero_6;  // sfix12_En10
  input   signed [11:0] vector_zero_7;  // sfix12_En10
  input   signed [11:0] vector_zero_8;  // sfix12_En10
  input   signed [11:0] vector_zero_9;  // sfix12_En10
  input   signed [11:0] vector_zero_10;  // sfix12_En10
  input   signed [11:0] vector_zero_11;  // sfix12_En10
  input   signed [11:0] vector_zero_12;  // sfix12_En10
  input   signed [11:0] vector_zero_13;  // sfix12_En10
  input   signed [11:0] vector_zero_14;  // sfix12_En10
  input   signed [11:0] vector_zero_15;  // sfix12_En10
  input   signed [11:0] vector_zero_16;  // sfix12_En10
  input   signed [11:0] vector_zero_17;  // sfix12_En10
  input   signed [11:0] vector_zero_18;  // sfix12_En10
  input   signed [11:0] vector_zero_19;  // sfix12_En10
  input   signed [11:0] vector_zero_20;  // sfix12_En10
  input   signed [11:0] vector_zero_21;  // sfix12_En10
  input   signed [11:0] vector_zero_22;  // sfix12_En10
  input   signed [11:0] vector_zero_23;  // sfix12_En10
  input   signed [11:0] vector_zero_24;  // sfix12_En10
  input   signed [11:0] vector_zero_25;  // sfix12_En10
  input   signed [11:0] vector_zero_26;  // sfix12_En10
  input   signed [11:0] vector_zero_27;  // sfix12_En10
  input   signed [11:0] vector_zero_28;  // sfix12_En10
  input   signed [11:0] vector_zero_29;  // sfix12_En10
  input   signed [11:0] vector_zero_30;  // sfix12_En10
  input   signed [11:0] vector_zero_31;  // sfix12_En10
  input   signed [11:0] vector_before_0;  // sfix12_En10
  input   signed [11:0] vector_before_1;  // sfix12_En10
  input   signed [11:0] vector_before_2;  // sfix12_En10
  input   signed [11:0] vector_before_3;  // sfix12_En10
  input   signed [11:0] vector_before_4;  // sfix12_En10
  input   signed [11:0] vector_before_5;  // sfix12_En10
  input   signed [11:0] vector_before_6;  // sfix12_En10
  input   signed [11:0] vector_before_7;  // sfix12_En10
  input   signed [11:0] vector_before_8;  // sfix12_En10
  input   signed [11:0] vector_before_9;  // sfix12_En10
  input   signed [11:0] vector_before_10;  // sfix12_En10
  input   signed [11:0] vector_before_11;  // sfix12_En10
  input   signed [11:0] vector_before_12;  // sfix12_En10
  input   signed [11:0] vector_before_13;  // sfix12_En10
  input   signed [11:0] vector_before_14;  // sfix12_En10
  input   signed [11:0] vector_before_15;  // sfix12_En10
  input   signed [11:0] vector_before_16;  // sfix12_En10
  input   signed [11:0] vector_before_17;  // sfix12_En10
  input   signed [11:0] vector_before_18;  // sfix12_En10
  input   signed [11:0] vector_before_19;  // sfix12_En10
  input   signed [11:0] vector_before_20;  // sfix12_En10
  input   signed [11:0] vector_before_21;  // sfix12_En10
  input   signed [11:0] vector_before_22;  // sfix12_En10
  input   signed [11:0] vector_before_23;  // sfix12_En10
  input   signed [11:0] vector_before_24;  // sfix12_En10
  input   signed [11:0] vector_before_25;  // sfix12_En10
  input   signed [11:0] vector_before_26;  // sfix12_En10
  input   signed [11:0] vector_before_27;  // sfix12_En10
  input   signed [11:0] vector_before_28;  // sfix12_En10
  input   signed [11:0] vector_before_29;  // sfix12_En10
  input   signed [11:0] vector_before_30;  // sfix12_En10
  input   signed [11:0] vector_before_31;  // sfix12_En10
  input   [31:0] counter;  // uint32
  input   [31:0] counter_obs_before;  // uint32
  output  signed [11:0] buffer_0;  // sfix12_En10
  output  signed [11:0] buffer_1;  // sfix12_En10
  output  signed [11:0] buffer_2;  // sfix12_En10
  output  signed [11:0] buffer_3;  // sfix12_En10
  output  signed [11:0] buffer_4;  // sfix12_En10
  output  signed [11:0] buffer_5;  // sfix12_En10
  output  signed [11:0] buffer_6;  // sfix12_En10
  output  signed [11:0] buffer_7;  // sfix12_En10
  output  signed [11:0] buffer_8;  // sfix12_En10
  output  signed [11:0] buffer_9;  // sfix12_En10
  output  signed [11:0] buffer_10;  // sfix12_En10
  output  signed [11:0] buffer_11;  // sfix12_En10
  output  signed [11:0] buffer_12;  // sfix12_En10
  output  signed [11:0] buffer_13;  // sfix12_En10
  output  signed [11:0] buffer_14;  // sfix12_En10
  output  signed [11:0] buffer_15;  // sfix12_En10
  output  signed [11:0] buffer_16;  // sfix12_En10
  output  signed [11:0] buffer_17;  // sfix12_En10
  output  signed [11:0] buffer_18;  // sfix12_En10
  output  signed [11:0] buffer_19;  // sfix12_En10
  output  signed [11:0] buffer_20;  // sfix12_En10
  output  signed [11:0] buffer_21;  // sfix12_En10
  output  signed [11:0] buffer_22;  // sfix12_En10
  output  signed [11:0] buffer_23;  // sfix12_En10
  output  signed [11:0] buffer_24;  // sfix12_En10
  output  signed [11:0] buffer_25;  // sfix12_En10
  output  signed [11:0] buffer_26;  // sfix12_En10
  output  signed [11:0] buffer_27;  // sfix12_En10
  output  signed [11:0] buffer_28;  // sfix12_En10
  output  signed [11:0] buffer_29;  // sfix12_En10
  output  signed [11:0] buffer_30;  // sfix12_En10
  output  signed [11:0] buffer_31;  // sfix12_En10
  output  [31:0] counter_obs;  // uint32


  wire signed [11:0] vector_zero [0:31];  // sfix12_En10 [32]
  wire signed [11:0] vector_before [0:31];  // sfix12_En10 [32]
  reg signed [11:0] buffer_32 [0:31];  // sfix12_En10 [32]
  reg [31:0] counter_obs_1;  // uint32
  reg [31:0] x;  // uint32
  reg [31:0] t;  // uint32
  reg [31:0] t_0;  // uint32
  reg signed [31:0] t_1;  // int32
  reg signed [31:0] t_2;  // int32
  reg signed [31:0] t_3;  // int32
  reg [32:0] add_temp;  // ufix33
  reg [63:0] cast;  // ufix64
  reg [32:0] add_temp_0;  // ufix33
  reg [31:0] sub_cast;  // uint32
  reg [32:0] add_temp_1;  // ufix33
  reg [32:0] t_4;  // ufix33
  reg [32:0] t_5;  // ufix33
  reg [32:0] t_6;  // ufix33


  assign vector_zero[0] = vector_zero_0;
  assign vector_zero[1] = vector_zero_1;
  assign vector_zero[2] = vector_zero_2;
  assign vector_zero[3] = vector_zero_3;
  assign vector_zero[4] = vector_zero_4;
  assign vector_zero[5] = vector_zero_5;
  assign vector_zero[6] = vector_zero_6;
  assign vector_zero[7] = vector_zero_7;
  assign vector_zero[8] = vector_zero_8;
  assign vector_zero[9] = vector_zero_9;
  assign vector_zero[10] = vector_zero_10;
  assign vector_zero[11] = vector_zero_11;
  assign vector_zero[12] = vector_zero_12;
  assign vector_zero[13] = vector_zero_13;
  assign vector_zero[14] = vector_zero_14;
  assign vector_zero[15] = vector_zero_15;
  assign vector_zero[16] = vector_zero_16;
  assign vector_zero[17] = vector_zero_17;
  assign vector_zero[18] = vector_zero_18;
  assign vector_zero[19] = vector_zero_19;
  assign vector_zero[20] = vector_zero_20;
  assign vector_zero[21] = vector_zero_21;
  assign vector_zero[22] = vector_zero_22;
  assign vector_zero[23] = vector_zero_23;
  assign vector_zero[24] = vector_zero_24;
  assign vector_zero[25] = vector_zero_25;
  assign vector_zero[26] = vector_zero_26;
  assign vector_zero[27] = vector_zero_27;
  assign vector_zero[28] = vector_zero_28;
  assign vector_zero[29] = vector_zero_29;
  assign vector_zero[30] = vector_zero_30;
  assign vector_zero[31] = vector_zero_31;

  assign vector_before[0] = vector_before_0;
  assign vector_before[1] = vector_before_1;
  assign vector_before[2] = vector_before_2;
  assign vector_before[3] = vector_before_3;
  assign vector_before[4] = vector_before_4;
  assign vector_before[5] = vector_before_5;
  assign vector_before[6] = vector_before_6;
  assign vector_before[7] = vector_before_7;
  assign vector_before[8] = vector_before_8;
  assign vector_before[9] = vector_before_9;
  assign vector_before[10] = vector_before_10;
  assign vector_before[11] = vector_before_11;
  assign vector_before[12] = vector_before_12;
  assign vector_before[13] = vector_before_13;
  assign vector_before[14] = vector_before_14;
  assign vector_before[15] = vector_before_15;
  assign vector_before[16] = vector_before_16;
  assign vector_before[17] = vector_before_17;
  assign vector_before[18] = vector_before_18;
  assign vector_before[19] = vector_before_19;
  assign vector_before[20] = vector_before_20;
  assign vector_before[21] = vector_before_21;
  assign vector_before[22] = vector_before_22;
  assign vector_before[23] = vector_before_23;
  assign vector_before[24] = vector_before_24;
  assign vector_before[25] = vector_before_25;
  assign vector_before[26] = vector_before_26;
  assign vector_before[27] = vector_before_27;
  assign vector_before[28] = vector_before_28;
  assign vector_before[29] = vector_before_29;
  assign vector_before[30] = vector_before_30;
  assign vector_before[31] = vector_before_31;

  always @* begin
    t = 32'd0;
    add_temp = 33'h000000000;
    add_temp_0 = 33'h000000000;
    add_temp_1 = 33'h000000000;
    t_4 = 33'h000000000;
    x = 32'd0;
    cast = 64'h0000000000000000;
    t_0 = 32'd0;
    t_5 = 33'h000000000;
    sub_cast = 32'd0;
    t_6 = 33'h000000000;
    if (counter == 32'd0) begin

      for(t_1 = 32'sd0; t_1 <= 32'sd31; t_1 = t_1 + 32'sd1) begin
        buffer_32[t_1] = vector_zero[t_1];
      end

      counter_obs_1 = 32'd0;
    end
    else begin
      t_4 = {1'b0, counter};
      add_temp = t_4 + 33'h000000001;
      if (add_temp[32] != 1'b0) begin
        x = 32'b11111111111111111111111111111111;
      end
      else begin
        x = add_temp[31:0];
      end
      t = x >> 32'd14;
      cast = {18'b0, {t, 14'b00000000000000}};
      t_0 = cast[31:0];
      if ((x - t_0) == 32'd0) begin

        for(t_3 = 32'sd0; t_3 <= 32'sd31; t_3 = t_3 + 32'sd1) begin
          buffer_32[t_3] = vector_before[t_3];
        end

        t_5 = {1'b0, counter_obs_before};
        add_temp_0 = t_5 + 33'h000000001;
        if (add_temp_0[32] != 1'b0) begin
          sub_cast = 32'b11111111111111111111111111111111;
        end
        else begin
          sub_cast = add_temp_0[31:0];
        end
        buffer_32[$signed({1'b0, sub_cast}) - 32'sd1] = value;
        t_6 = {1'b0, counter_obs_before};
        add_temp_1 = t_6 + 33'h000000001;
        if (add_temp_1[32] != 1'b0) begin
          counter_obs_1 = 32'b11111111111111111111111111111111;
        end
        else begin
          counter_obs_1 = add_temp_1[31:0];
        end
      end
      else begin

        for(t_2 = 32'sd0; t_2 <= 32'sd31; t_2 = t_2 + 32'sd1) begin
          buffer_32[t_2] = vector_before[t_2];
        end

        counter_obs_1 = counter_obs_before;
      end
    end
  end



  assign buffer_0 = buffer_32[0];

  assign buffer_1 = buffer_32[1];

  assign buffer_2 = buffer_32[2];

  assign buffer_3 = buffer_32[3];

  assign buffer_4 = buffer_32[4];

  assign buffer_5 = buffer_32[5];

  assign buffer_6 = buffer_32[6];

  assign buffer_7 = buffer_32[7];

  assign buffer_8 = buffer_32[8];

  assign buffer_9 = buffer_32[9];

  assign buffer_10 = buffer_32[10];

  assign buffer_11 = buffer_32[11];

  assign buffer_12 = buffer_32[12];

  assign buffer_13 = buffer_32[13];

  assign buffer_14 = buffer_32[14];

  assign buffer_15 = buffer_32[15];

  assign buffer_16 = buffer_32[16];

  assign buffer_17 = buffer_32[17];

  assign buffer_18 = buffer_32[18];

  assign buffer_19 = buffer_32[19];

  assign buffer_20 = buffer_32[20];

  assign buffer_21 = buffer_32[21];

  assign buffer_22 = buffer_32[22];

  assign buffer_23 = buffer_32[23];

  assign buffer_24 = buffer_32[24];

  assign buffer_25 = buffer_32[25];

  assign buffer_26 = buffer_32[26];

  assign buffer_27 = buffer_32[27];

  assign buffer_28 = buffer_32[28];

  assign buffer_29 = buffer_32[29];

  assign buffer_30 = buffer_32[30];

  assign buffer_31 = buffer_32[31];

  assign counter_obs = counter_obs_1;

endmodule  // buffer_block

