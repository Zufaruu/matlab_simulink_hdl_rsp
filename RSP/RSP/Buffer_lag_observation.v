// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\RSP\RSP\RSP\Buffer_lag_observation.v
// Created: 2023-09-27 04:10:35
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Buffer_lag_observation
// Source Path: RSP/RSP/Velocity Processor/Doppler Processing/Buffer_lag_observation
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Buffer_lag_observation
          (clk,
           reset,
           enb,
           scalar,
           vector_0,
           vector_1,
           vector_2,
           vector_3,
           vector_4,
           vector_5,
           vector_6,
           vector_7,
           vector_8,
           vector_9,
           vector_10,
           vector_11,
           vector_12,
           vector_13,
           vector_14,
           vector_15,
           vector_16,
           vector_17,
           vector_18,
           vector_19,
           vector_20,
           vector_21,
           vector_22,
           vector_23,
           vector_24,
           vector_25,
           vector_26,
           vector_27,
           vector_28,
           vector_29,
           vector_30,
           vector_31,
           counter);


  input   clk;
  input   reset;
  input   enb;
  input   signed [11:0] scalar;  // sfix12_En10
  output  signed [11:0] vector_0;  // sfix12_En10
  output  signed [11:0] vector_1;  // sfix12_En10
  output  signed [11:0] vector_2;  // sfix12_En10
  output  signed [11:0] vector_3;  // sfix12_En10
  output  signed [11:0] vector_4;  // sfix12_En10
  output  signed [11:0] vector_5;  // sfix12_En10
  output  signed [11:0] vector_6;  // sfix12_En10
  output  signed [11:0] vector_7;  // sfix12_En10
  output  signed [11:0] vector_8;  // sfix12_En10
  output  signed [11:0] vector_9;  // sfix12_En10
  output  signed [11:0] vector_10;  // sfix12_En10
  output  signed [11:0] vector_11;  // sfix12_En10
  output  signed [11:0] vector_12;  // sfix12_En10
  output  signed [11:0] vector_13;  // sfix12_En10
  output  signed [11:0] vector_14;  // sfix12_En10
  output  signed [11:0] vector_15;  // sfix12_En10
  output  signed [11:0] vector_16;  // sfix12_En10
  output  signed [11:0] vector_17;  // sfix12_En10
  output  signed [11:0] vector_18;  // sfix12_En10
  output  signed [11:0] vector_19;  // sfix12_En10
  output  signed [11:0] vector_20;  // sfix12_En10
  output  signed [11:0] vector_21;  // sfix12_En10
  output  signed [11:0] vector_22;  // sfix12_En10
  output  signed [11:0] vector_23;  // sfix12_En10
  output  signed [11:0] vector_24;  // sfix12_En10
  output  signed [11:0] vector_25;  // sfix12_En10
  output  signed [11:0] vector_26;  // sfix12_En10
  output  signed [11:0] vector_27;  // sfix12_En10
  output  signed [11:0] vector_28;  // sfix12_En10
  output  signed [11:0] vector_29;  // sfix12_En10
  output  signed [11:0] vector_30;  // sfix12_En10
  output  signed [11:0] vector_31;  // sfix12_En10
  output  [31:0] counter;  // uint32


  wire [15:0] y_0;  // uint16
  wire [15:0] y_1;  // uint16
  wire [15:0] y_2;  // uint16
  wire [15:0] y_3;  // uint16
  wire [15:0] y_4;  // uint16
  wire [15:0] y_5;  // uint16
  wire [15:0] y_6;  // uint16
  wire [15:0] y_7;  // uint16
  wire [15:0] y_8;  // uint16
  wire [15:0] y_9;  // uint16
  wire [15:0] y_10;  // uint16
  wire [15:0] y_11;  // uint16
  wire [15:0] y_12;  // uint16
  wire [15:0] y_13;  // uint16
  wire [15:0] y_14;  // uint16
  wire [15:0] y_15;  // uint16
  wire [15:0] y_16;  // uint16
  wire [15:0] y_17;  // uint16
  wire [15:0] y_18;  // uint16
  wire [15:0] y_19;  // uint16
  wire [15:0] y_20;  // uint16
  wire [15:0] y_21;  // uint16
  wire [15:0] y_22;  // uint16
  wire [15:0] y_23;  // uint16
  wire [15:0] y_24;  // uint16
  wire [15:0] y_25;  // uint16
  wire [15:0] y_26;  // uint16
  wire [15:0] y_27;  // uint16
  wire [15:0] y_28;  // uint16
  wire [15:0] y_29;  // uint16
  wire [15:0] y_30;  // uint16
  wire [15:0] y_31;  // uint16
  wire [15:0] y [0:31];  // uint16 [32]
  wire signed [11:0] Data_Type_Conversion4_out1 [0:31];  // sfix12_En10 [32]
  wire [31:0] count_step;  // uint32
  wire [31:0] count_from;  // uint32
  reg [31:0] Observation_Counter_out1;  // uint32
  wire [31:0] count;  // uint32
  wire need_to_wrap;
  wire [31:0] count_value;  // uint32
  wire [31:0] counter_obs;  // uint32
  reg [31:0] Delay1_out1;  // uint32
  reg signed [11:0] Delay_out1 [0:31];  // sfix12_En10 [32]
  wire signed [11:0] buffer_0;  // sfix12_En10
  wire signed [11:0] buffer_1;  // sfix12_En10
  wire signed [11:0] buffer_2;  // sfix12_En10
  wire signed [11:0] buffer_3;  // sfix12_En10
  wire signed [11:0] buffer_4;  // sfix12_En10
  wire signed [11:0] buffer_5;  // sfix12_En10
  wire signed [11:0] buffer_6;  // sfix12_En10
  wire signed [11:0] buffer_7;  // sfix12_En10
  wire signed [11:0] buffer_8;  // sfix12_En10
  wire signed [11:0] buffer_9;  // sfix12_En10
  wire signed [11:0] buffer_10;  // sfix12_En10
  wire signed [11:0] buffer_11;  // sfix12_En10
  wire signed [11:0] buffer_12;  // sfix12_En10
  wire signed [11:0] buffer_13;  // sfix12_En10
  wire signed [11:0] buffer_14;  // sfix12_En10
  wire signed [11:0] buffer_15;  // sfix12_En10
  wire signed [11:0] buffer_16;  // sfix12_En10
  wire signed [11:0] buffer_17;  // sfix12_En10
  wire signed [11:0] buffer_18;  // sfix12_En10
  wire signed [11:0] buffer_19;  // sfix12_En10
  wire signed [11:0] buffer_20;  // sfix12_En10
  wire signed [11:0] buffer_21;  // sfix12_En10
  wire signed [11:0] buffer_22;  // sfix12_En10
  wire signed [11:0] buffer_23;  // sfix12_En10
  wire signed [11:0] buffer_24;  // sfix12_En10
  wire signed [11:0] buffer_25;  // sfix12_En10
  wire signed [11:0] buffer_26;  // sfix12_En10
  wire signed [11:0] buffer_27;  // sfix12_En10
  wire signed [11:0] buffer_28;  // sfix12_En10
  wire signed [11:0] buffer_29;  // sfix12_En10
  wire signed [11:0] buffer_30;  // sfix12_En10
  wire signed [11:0] buffer_31;  // sfix12_En10
  wire signed [11:0] buffer [0:31];  // sfix12_En10 [32]

  // N_observation


  vector_initialization_block u_vector_initialization (.y_0(y_0),  // uint16
                                                       .y_1(y_1),  // uint16
                                                       .y_2(y_2),  // uint16
                                                       .y_3(y_3),  // uint16
                                                       .y_4(y_4),  // uint16
                                                       .y_5(y_5),  // uint16
                                                       .y_6(y_6),  // uint16
                                                       .y_7(y_7),  // uint16
                                                       .y_8(y_8),  // uint16
                                                       .y_9(y_9),  // uint16
                                                       .y_10(y_10),  // uint16
                                                       .y_11(y_11),  // uint16
                                                       .y_12(y_12),  // uint16
                                                       .y_13(y_13),  // uint16
                                                       .y_14(y_14),  // uint16
                                                       .y_15(y_15),  // uint16
                                                       .y_16(y_16),  // uint16
                                                       .y_17(y_17),  // uint16
                                                       .y_18(y_18),  // uint16
                                                       .y_19(y_19),  // uint16
                                                       .y_20(y_20),  // uint16
                                                       .y_21(y_21),  // uint16
                                                       .y_22(y_22),  // uint16
                                                       .y_23(y_23),  // uint16
                                                       .y_24(y_24),  // uint16
                                                       .y_25(y_25),  // uint16
                                                       .y_26(y_26),  // uint16
                                                       .y_27(y_27),  // uint16
                                                       .y_28(y_28),  // uint16
                                                       .y_29(y_29),  // uint16
                                                       .y_30(y_30),  // uint16
                                                       .y_31(y_31)  // uint16
                                                       );

  assign y[0] = y_0;
  assign y[1] = y_1;
  assign y[2] = y_2;
  assign y[3] = y_3;
  assign y[4] = y_4;
  assign y[5] = y_5;
  assign y[6] = y_6;
  assign y[7] = y_7;
  assign y[8] = y_8;
  assign y[9] = y_9;
  assign y[10] = y_10;
  assign y[11] = y_11;
  assign y[12] = y_12;
  assign y[13] = y_13;
  assign y[14] = y_14;
  assign y[15] = y_15;
  assign y[16] = y_16;
  assign y[17] = y_17;
  assign y[18] = y_18;
  assign y[19] = y_19;
  assign y[20] = y_20;
  assign y[21] = y_21;
  assign y[22] = y_22;
  assign y[23] = y_23;
  assign y[24] = y_24;
  assign y[25] = y_25;
  assign y[26] = y_26;
  assign y[27] = y_27;
  assign y[28] = y_28;
  assign y[29] = y_29;
  assign y[30] = y_30;
  assign y[31] = y_31;

  assign Data_Type_Conversion4_out1[0] = $signed({y[0][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[1] = $signed({y[1][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[2] = $signed({y[2][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[3] = $signed({y[3][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[4] = $signed({y[4][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[5] = $signed({y[5][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[6] = $signed({y[6][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[7] = $signed({y[7][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[8] = $signed({y[8][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[9] = $signed({y[9][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[10] = $signed({y[10][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[11] = $signed({y[11][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[12] = $signed({y[12][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[13] = $signed({y[13][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[14] = $signed({y[14][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[15] = $signed({y[15][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[16] = $signed({y[16][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[17] = $signed({y[17][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[18] = $signed({y[18][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[19] = $signed({y[19][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[20] = $signed({y[20][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[21] = $signed({y[21][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[22] = $signed({y[22][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[23] = $signed({y[23][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[24] = $signed({y[24][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[25] = $signed({y[25][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[26] = $signed({y[26][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[27] = $signed({y[27][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[28] = $signed({y[28][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[29] = $signed({y[29][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[30] = $signed({y[30][1:0], 10'b0000000000});
  assign Data_Type_Conversion4_out1[31] = $signed({y[31][1:0], 10'b0000000000});



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 163839
  assign count_step = 32'b00000000000000000000000000000001;



  assign count_from = 32'b00000000000000000000000000000000;



  assign count = Observation_Counter_out1 + count_step;



  assign need_to_wrap = Observation_Counter_out1 == 32'b00000000000000100111111111111111;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  always @(posedge clk or posedge reset)
    begin : Observation_Counter_process
      if (reset == 1'b1) begin
        Observation_Counter_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Observation_Counter_out1 <= count_value;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 32'b00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= counter_obs;
        end
      end
    end



  assign buffer[0] = buffer_0;
  assign buffer[1] = buffer_1;
  assign buffer[2] = buffer_2;
  assign buffer[3] = buffer_3;
  assign buffer[4] = buffer_4;
  assign buffer[5] = buffer_5;
  assign buffer[6] = buffer_6;
  assign buffer[7] = buffer_7;
  assign buffer[8] = buffer_8;
  assign buffer[9] = buffer_9;
  assign buffer[10] = buffer_10;
  assign buffer[11] = buffer_11;
  assign buffer[12] = buffer_12;
  assign buffer[13] = buffer_13;
  assign buffer[14] = buffer_14;
  assign buffer[15] = buffer_15;
  assign buffer[16] = buffer_16;
  assign buffer[17] = buffer_17;
  assign buffer[18] = buffer_18;
  assign buffer[19] = buffer_19;
  assign buffer[20] = buffer_20;
  assign buffer[21] = buffer_21;
  assign buffer[22] = buffer_22;
  assign buffer[23] = buffer_23;
  assign buffer[24] = buffer_24;
  assign buffer[25] = buffer_25;
  assign buffer[26] = buffer_26;
  assign buffer[27] = buffer_27;
  assign buffer[28] = buffer_28;
  assign buffer[29] = buffer_29;
  assign buffer[30] = buffer_30;
  assign buffer[31] = buffer_31;

  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1[0] <= 12'sb000000000000;
        Delay_out1[1] <= 12'sb000000000000;
        Delay_out1[2] <= 12'sb000000000000;
        Delay_out1[3] <= 12'sb000000000000;
        Delay_out1[4] <= 12'sb000000000000;
        Delay_out1[5] <= 12'sb000000000000;
        Delay_out1[6] <= 12'sb000000000000;
        Delay_out1[7] <= 12'sb000000000000;
        Delay_out1[8] <= 12'sb000000000000;
        Delay_out1[9] <= 12'sb000000000000;
        Delay_out1[10] <= 12'sb000000000000;
        Delay_out1[11] <= 12'sb000000000000;
        Delay_out1[12] <= 12'sb000000000000;
        Delay_out1[13] <= 12'sb000000000000;
        Delay_out1[14] <= 12'sb000000000000;
        Delay_out1[15] <= 12'sb000000000000;
        Delay_out1[16] <= 12'sb000000000000;
        Delay_out1[17] <= 12'sb000000000000;
        Delay_out1[18] <= 12'sb000000000000;
        Delay_out1[19] <= 12'sb000000000000;
        Delay_out1[20] <= 12'sb000000000000;
        Delay_out1[21] <= 12'sb000000000000;
        Delay_out1[22] <= 12'sb000000000000;
        Delay_out1[23] <= 12'sb000000000000;
        Delay_out1[24] <= 12'sb000000000000;
        Delay_out1[25] <= 12'sb000000000000;
        Delay_out1[26] <= 12'sb000000000000;
        Delay_out1[27] <= 12'sb000000000000;
        Delay_out1[28] <= 12'sb000000000000;
        Delay_out1[29] <= 12'sb000000000000;
        Delay_out1[30] <= 12'sb000000000000;
        Delay_out1[31] <= 12'sb000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1[0] <= buffer[0];
          Delay_out1[1] <= buffer[1];
          Delay_out1[2] <= buffer[2];
          Delay_out1[3] <= buffer[3];
          Delay_out1[4] <= buffer[4];
          Delay_out1[5] <= buffer[5];
          Delay_out1[6] <= buffer[6];
          Delay_out1[7] <= buffer[7];
          Delay_out1[8] <= buffer[8];
          Delay_out1[9] <= buffer[9];
          Delay_out1[10] <= buffer[10];
          Delay_out1[11] <= buffer[11];
          Delay_out1[12] <= buffer[12];
          Delay_out1[13] <= buffer[13];
          Delay_out1[14] <= buffer[14];
          Delay_out1[15] <= buffer[15];
          Delay_out1[16] <= buffer[16];
          Delay_out1[17] <= buffer[17];
          Delay_out1[18] <= buffer[18];
          Delay_out1[19] <= buffer[19];
          Delay_out1[20] <= buffer[20];
          Delay_out1[21] <= buffer[21];
          Delay_out1[22] <= buffer[22];
          Delay_out1[23] <= buffer[23];
          Delay_out1[24] <= buffer[24];
          Delay_out1[25] <= buffer[25];
          Delay_out1[26] <= buffer[26];
          Delay_out1[27] <= buffer[27];
          Delay_out1[28] <= buffer[28];
          Delay_out1[29] <= buffer[29];
          Delay_out1[30] <= buffer[30];
          Delay_out1[31] <= buffer[31];
        end
      end
    end



  buffer_block u_buffer (.value(scalar),  // sfix12_En10
                         .vector_zero_0(Data_Type_Conversion4_out1[0]),  // sfix12_En10
                         .vector_zero_1(Data_Type_Conversion4_out1[1]),  // sfix12_En10
                         .vector_zero_2(Data_Type_Conversion4_out1[2]),  // sfix12_En10
                         .vector_zero_3(Data_Type_Conversion4_out1[3]),  // sfix12_En10
                         .vector_zero_4(Data_Type_Conversion4_out1[4]),  // sfix12_En10
                         .vector_zero_5(Data_Type_Conversion4_out1[5]),  // sfix12_En10
                         .vector_zero_6(Data_Type_Conversion4_out1[6]),  // sfix12_En10
                         .vector_zero_7(Data_Type_Conversion4_out1[7]),  // sfix12_En10
                         .vector_zero_8(Data_Type_Conversion4_out1[8]),  // sfix12_En10
                         .vector_zero_9(Data_Type_Conversion4_out1[9]),  // sfix12_En10
                         .vector_zero_10(Data_Type_Conversion4_out1[10]),  // sfix12_En10
                         .vector_zero_11(Data_Type_Conversion4_out1[11]),  // sfix12_En10
                         .vector_zero_12(Data_Type_Conversion4_out1[12]),  // sfix12_En10
                         .vector_zero_13(Data_Type_Conversion4_out1[13]),  // sfix12_En10
                         .vector_zero_14(Data_Type_Conversion4_out1[14]),  // sfix12_En10
                         .vector_zero_15(Data_Type_Conversion4_out1[15]),  // sfix12_En10
                         .vector_zero_16(Data_Type_Conversion4_out1[16]),  // sfix12_En10
                         .vector_zero_17(Data_Type_Conversion4_out1[17]),  // sfix12_En10
                         .vector_zero_18(Data_Type_Conversion4_out1[18]),  // sfix12_En10
                         .vector_zero_19(Data_Type_Conversion4_out1[19]),  // sfix12_En10
                         .vector_zero_20(Data_Type_Conversion4_out1[20]),  // sfix12_En10
                         .vector_zero_21(Data_Type_Conversion4_out1[21]),  // sfix12_En10
                         .vector_zero_22(Data_Type_Conversion4_out1[22]),  // sfix12_En10
                         .vector_zero_23(Data_Type_Conversion4_out1[23]),  // sfix12_En10
                         .vector_zero_24(Data_Type_Conversion4_out1[24]),  // sfix12_En10
                         .vector_zero_25(Data_Type_Conversion4_out1[25]),  // sfix12_En10
                         .vector_zero_26(Data_Type_Conversion4_out1[26]),  // sfix12_En10
                         .vector_zero_27(Data_Type_Conversion4_out1[27]),  // sfix12_En10
                         .vector_zero_28(Data_Type_Conversion4_out1[28]),  // sfix12_En10
                         .vector_zero_29(Data_Type_Conversion4_out1[29]),  // sfix12_En10
                         .vector_zero_30(Data_Type_Conversion4_out1[30]),  // sfix12_En10
                         .vector_zero_31(Data_Type_Conversion4_out1[31]),  // sfix12_En10
                         .vector_before_0(Delay_out1[0]),  // sfix12_En10
                         .vector_before_1(Delay_out1[1]),  // sfix12_En10
                         .vector_before_2(Delay_out1[2]),  // sfix12_En10
                         .vector_before_3(Delay_out1[3]),  // sfix12_En10
                         .vector_before_4(Delay_out1[4]),  // sfix12_En10
                         .vector_before_5(Delay_out1[5]),  // sfix12_En10
                         .vector_before_6(Delay_out1[6]),  // sfix12_En10
                         .vector_before_7(Delay_out1[7]),  // sfix12_En10
                         .vector_before_8(Delay_out1[8]),  // sfix12_En10
                         .vector_before_9(Delay_out1[9]),  // sfix12_En10
                         .vector_before_10(Delay_out1[10]),  // sfix12_En10
                         .vector_before_11(Delay_out1[11]),  // sfix12_En10
                         .vector_before_12(Delay_out1[12]),  // sfix12_En10
                         .vector_before_13(Delay_out1[13]),  // sfix12_En10
                         .vector_before_14(Delay_out1[14]),  // sfix12_En10
                         .vector_before_15(Delay_out1[15]),  // sfix12_En10
                         .vector_before_16(Delay_out1[16]),  // sfix12_En10
                         .vector_before_17(Delay_out1[17]),  // sfix12_En10
                         .vector_before_18(Delay_out1[18]),  // sfix12_En10
                         .vector_before_19(Delay_out1[19]),  // sfix12_En10
                         .vector_before_20(Delay_out1[20]),  // sfix12_En10
                         .vector_before_21(Delay_out1[21]),  // sfix12_En10
                         .vector_before_22(Delay_out1[22]),  // sfix12_En10
                         .vector_before_23(Delay_out1[23]),  // sfix12_En10
                         .vector_before_24(Delay_out1[24]),  // sfix12_En10
                         .vector_before_25(Delay_out1[25]),  // sfix12_En10
                         .vector_before_26(Delay_out1[26]),  // sfix12_En10
                         .vector_before_27(Delay_out1[27]),  // sfix12_En10
                         .vector_before_28(Delay_out1[28]),  // sfix12_En10
                         .vector_before_29(Delay_out1[29]),  // sfix12_En10
                         .vector_before_30(Delay_out1[30]),  // sfix12_En10
                         .vector_before_31(Delay_out1[31]),  // sfix12_En10
                         .counter(Observation_Counter_out1),  // uint32
                         .counter_obs_before(Delay1_out1),  // uint32
                         .buffer_0(buffer_0),  // sfix12_En10
                         .buffer_1(buffer_1),  // sfix12_En10
                         .buffer_2(buffer_2),  // sfix12_En10
                         .buffer_3(buffer_3),  // sfix12_En10
                         .buffer_4(buffer_4),  // sfix12_En10
                         .buffer_5(buffer_5),  // sfix12_En10
                         .buffer_6(buffer_6),  // sfix12_En10
                         .buffer_7(buffer_7),  // sfix12_En10
                         .buffer_8(buffer_8),  // sfix12_En10
                         .buffer_9(buffer_9),  // sfix12_En10
                         .buffer_10(buffer_10),  // sfix12_En10
                         .buffer_11(buffer_11),  // sfix12_En10
                         .buffer_12(buffer_12),  // sfix12_En10
                         .buffer_13(buffer_13),  // sfix12_En10
                         .buffer_14(buffer_14),  // sfix12_En10
                         .buffer_15(buffer_15),  // sfix12_En10
                         .buffer_16(buffer_16),  // sfix12_En10
                         .buffer_17(buffer_17),  // sfix12_En10
                         .buffer_18(buffer_18),  // sfix12_En10
                         .buffer_19(buffer_19),  // sfix12_En10
                         .buffer_20(buffer_20),  // sfix12_En10
                         .buffer_21(buffer_21),  // sfix12_En10
                         .buffer_22(buffer_22),  // sfix12_En10
                         .buffer_23(buffer_23),  // sfix12_En10
                         .buffer_24(buffer_24),  // sfix12_En10
                         .buffer_25(buffer_25),  // sfix12_En10
                         .buffer_26(buffer_26),  // sfix12_En10
                         .buffer_27(buffer_27),  // sfix12_En10
                         .buffer_28(buffer_28),  // sfix12_En10
                         .buffer_29(buffer_29),  // sfix12_En10
                         .buffer_30(buffer_30),  // sfix12_En10
                         .buffer_31(buffer_31),  // sfix12_En10
                         .counter_obs(counter_obs)  // uint32
                         );

  assign vector_0 = buffer_0;

  assign vector_1 = buffer_1;

  assign vector_2 = buffer_2;

  assign vector_3 = buffer_3;

  assign vector_4 = buffer_4;

  assign vector_5 = buffer_5;

  assign vector_6 = buffer_6;

  assign vector_7 = buffer_7;

  assign vector_8 = buffer_8;

  assign vector_9 = buffer_9;

  assign vector_10 = buffer_10;

  assign vector_11 = buffer_11;

  assign vector_12 = buffer_12;

  assign vector_13 = buffer_13;

  assign vector_14 = buffer_14;

  assign vector_15 = buffer_15;

  assign vector_16 = buffer_16;

  assign vector_17 = buffer_17;

  assign vector_18 = buffer_18;

  assign vector_19 = buffer_19;

  assign vector_20 = buffer_20;

  assign vector_21 = buffer_21;

  assign vector_22 = buffer_22;

  assign vector_23 = buffer_23;

  assign vector_24 = buffer_24;

  assign vector_25 = buffer_25;

  assign vector_26 = buffer_26;

  assign vector_27 = buffer_27;

  assign vector_28 = buffer_28;

  assign vector_29 = buffer_29;

  assign vector_30 = buffer_30;

  assign vector_31 = buffer_31;

  assign counter = Observation_Counter_out1;

endmodule  // Buffer_lag_observation

