// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\RSP\RSP\RSP\Doppler_Processor.v
// Created: 2023-09-29 06:09:51
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Doppler_Processor
// Source Path: RSP/RSP/Velocity Processor/Doppler Processing/Doppler Processor
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Doppler_Processor
          (clk,
           reset,
           enb,
           obs_samples_0,
           obs_samples_1,
           obs_samples_2,
           obs_samples_3,
           obs_samples_4,
           obs_samples_5,
           obs_samples_6,
           obs_samples_7,
           obs_samples_8,
           obs_samples_9,
           obs_samples_10,
           obs_samples_11,
           obs_samples_12,
           obs_samples_13,
           obs_samples_14,
           obs_samples_15,
           obs_samples_16,
           obs_samples_17,
           obs_samples_18,
           obs_samples_19,
           obs_samples_20,
           obs_samples_21,
           obs_samples_22,
           obs_samples_23,
           obs_samples_24,
           obs_samples_25,
           obs_samples_26,
           obs_samples_27,
           obs_samples_28,
           obs_samples_29,
           obs_samples_30,
           obs_samples_31,
           counter,
           dopp_freq);


  input   clk;
  input   reset;
  input   enb;
  input   signed [11:0] obs_samples_0;  // sfix12_En10
  input   signed [11:0] obs_samples_1;  // sfix12_En10
  input   signed [11:0] obs_samples_2;  // sfix12_En10
  input   signed [11:0] obs_samples_3;  // sfix12_En10
  input   signed [11:0] obs_samples_4;  // sfix12_En10
  input   signed [11:0] obs_samples_5;  // sfix12_En10
  input   signed [11:0] obs_samples_6;  // sfix12_En10
  input   signed [11:0] obs_samples_7;  // sfix12_En10
  input   signed [11:0] obs_samples_8;  // sfix12_En10
  input   signed [11:0] obs_samples_9;  // sfix12_En10
  input   signed [11:0] obs_samples_10;  // sfix12_En10
  input   signed [11:0] obs_samples_11;  // sfix12_En10
  input   signed [11:0] obs_samples_12;  // sfix12_En10
  input   signed [11:0] obs_samples_13;  // sfix12_En10
  input   signed [11:0] obs_samples_14;  // sfix12_En10
  input   signed [11:0] obs_samples_15;  // sfix12_En10
  input   signed [11:0] obs_samples_16;  // sfix12_En10
  input   signed [11:0] obs_samples_17;  // sfix12_En10
  input   signed [11:0] obs_samples_18;  // sfix12_En10
  input   signed [11:0] obs_samples_19;  // sfix12_En10
  input   signed [11:0] obs_samples_20;  // sfix12_En10
  input   signed [11:0] obs_samples_21;  // sfix12_En10
  input   signed [11:0] obs_samples_22;  // sfix12_En10
  input   signed [11:0] obs_samples_23;  // sfix12_En10
  input   signed [11:0] obs_samples_24;  // sfix12_En10
  input   signed [11:0] obs_samples_25;  // sfix12_En10
  input   signed [11:0] obs_samples_26;  // sfix12_En10
  input   signed [11:0] obs_samples_27;  // sfix12_En10
  input   signed [11:0] obs_samples_28;  // sfix12_En10
  input   signed [11:0] obs_samples_29;  // sfix12_En10
  input   signed [11:0] obs_samples_30;  // sfix12_En10
  input   signed [11:0] obs_samples_31;  // sfix12_En10
  input   [31:0] counter;  // uint32
  output  [31:0] dopp_freq;  // ufix32_En5


  wire switch_compare_1;
  wire Constant5_out1;
  wire Constant1_out1;
  wire Vel_Switch_2_out1;
  wire signed [16:0] FFT_out1_re_0;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_1;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_2;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_3;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_4;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_5;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_6;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_7;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_8;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_9;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_10;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_11;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_12;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_13;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_14;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_15;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_16;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_17;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_18;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_19;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_20;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_21;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_22;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_23;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_24;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_25;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_26;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_27;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_28;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_29;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_30;  // sfix17_En10
  wire signed [16:0] FFT_out1_re_31;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_0;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_1;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_2;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_3;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_4;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_5;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_6;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_7;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_8;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_9;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_10;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_11;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_12;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_13;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_14;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_15;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_16;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_17;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_18;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_19;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_20;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_21;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_22;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_23;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_24;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_25;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_26;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_27;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_28;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_29;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_30;  // sfix17_En10
  wire signed [16:0] FFT_out1_im_31;  // sfix17_En10
  wire FFT_out2;
  wire signed [16:0] Complex_to_Real_Imag_out1 [0:31];  // sfix17_En10 [32]
  wire signed [33:0] Product_out1 [0:31];  // sfix34_En20 [32]
  wire signed [16:0] Complex_to_Real_Imag_out2 [0:31];  // sfix17_En10 [32]
  wire signed [33:0] Product1_out1 [0:31];  // sfix34_En20 [32]
  wire signed [34:0] Add_add_cast;  // sfix35_En20
  wire signed [34:0] Add_add_cast_1;  // sfix35_En20
  wire signed [34:0] Add_add_cast_2;  // sfix35_En20
  wire signed [34:0] Add_add_cast_3;  // sfix35_En20
  wire signed [34:0] Add_add_cast_4;  // sfix35_En20
  wire signed [34:0] Add_add_cast_5;  // sfix35_En20
  wire signed [34:0] Add_add_cast_6;  // sfix35_En20
  wire signed [34:0] Add_add_cast_7;  // sfix35_En20
  wire signed [34:0] Add_add_cast_8;  // sfix35_En20
  wire signed [34:0] Add_add_cast_9;  // sfix35_En20
  wire signed [34:0] Add_add_cast_10;  // sfix35_En20
  wire signed [34:0] Add_add_cast_11;  // sfix35_En20
  wire signed [34:0] Add_add_cast_12;  // sfix35_En20
  wire signed [34:0] Add_add_cast_13;  // sfix35_En20
  wire signed [34:0] Add_add_cast_14;  // sfix35_En20
  wire signed [34:0] Add_add_cast_15;  // sfix35_En20
  wire signed [34:0] Add_add_cast_16;  // sfix35_En20
  wire signed [34:0] Add_add_cast_17;  // sfix35_En20
  wire signed [34:0] Add_add_cast_18;  // sfix35_En20
  wire signed [34:0] Add_add_cast_19;  // sfix35_En20
  wire signed [34:0] Add_add_cast_20;  // sfix35_En20
  wire signed [34:0] Add_add_cast_21;  // sfix35_En20
  wire signed [34:0] Add_add_cast_22;  // sfix35_En20
  wire signed [34:0] Add_add_cast_23;  // sfix35_En20
  wire signed [34:0] Add_add_cast_24;  // sfix35_En20
  wire signed [34:0] Add_add_cast_25;  // sfix35_En20
  wire signed [34:0] Add_add_cast_26;  // sfix35_En20
  wire signed [34:0] Add_add_cast_27;  // sfix35_En20
  wire signed [34:0] Add_add_cast_28;  // sfix35_En20
  wire signed [34:0] Add_add_cast_29;  // sfix35_En20
  wire signed [34:0] Add_add_cast_30;  // sfix35_En20
  wire signed [34:0] Add_add_cast_31;  // sfix35_En20
  wire signed [34:0] Add_add_cast_32;  // sfix35_En20
  wire signed [34:0] Add_add_cast_33;  // sfix35_En20
  wire signed [34:0] Add_add_cast_34;  // sfix35_En20
  wire signed [34:0] Add_add_cast_35;  // sfix35_En20
  wire signed [34:0] Add_add_cast_36;  // sfix35_En20
  wire signed [34:0] Add_add_cast_37;  // sfix35_En20
  wire signed [34:0] Add_add_cast_38;  // sfix35_En20
  wire signed [34:0] Add_add_cast_39;  // sfix35_En20
  wire signed [34:0] Add_add_cast_40;  // sfix35_En20
  wire signed [34:0] Add_add_cast_41;  // sfix35_En20
  wire signed [34:0] Add_add_cast_42;  // sfix35_En20
  wire signed [34:0] Add_add_cast_43;  // sfix35_En20
  wire signed [34:0] Add_add_cast_44;  // sfix35_En20
  wire signed [34:0] Add_add_cast_45;  // sfix35_En20
  wire signed [34:0] Add_add_cast_46;  // sfix35_En20
  wire signed [34:0] Add_add_cast_47;  // sfix35_En20
  wire signed [34:0] Add_add_cast_48;  // sfix35_En20
  wire signed [34:0] Add_add_cast_49;  // sfix35_En20
  wire signed [34:0] Add_add_cast_50;  // sfix35_En20
  wire signed [34:0] Add_add_cast_51;  // sfix35_En20
  wire signed [34:0] Add_add_cast_52;  // sfix35_En20
  wire signed [34:0] Add_add_cast_53;  // sfix35_En20
  wire signed [34:0] Add_add_cast_54;  // sfix35_En20
  wire signed [34:0] Add_add_cast_55;  // sfix35_En20
  wire signed [34:0] Add_add_cast_56;  // sfix35_En20
  wire signed [34:0] Add_add_cast_57;  // sfix35_En20
  wire signed [34:0] Add_add_cast_58;  // sfix35_En20
  wire signed [34:0] Add_add_cast_59;  // sfix35_En20
  wire signed [34:0] Add_add_cast_60;  // sfix35_En20
  wire signed [34:0] Add_add_cast_61;  // sfix35_En20
  wire signed [34:0] Add_add_cast_62;  // sfix35_En20
  wire signed [34:0] Add_add_cast_63;  // sfix35_En20
  wire signed [34:0] Add_out1 [0:31];  // sfix35_En20 [32]
  wire [31:0] f;  // ufix32_En5


  assign switch_compare_1 = counter >= 32'b00000000000000100111111111111111;



  assign Constant5_out1 = 1'b0;



  assign Constant1_out1 = 1'b1;



  assign Vel_Switch_2_out1 = (switch_compare_1 == 1'b0 ? Constant5_out1 :
              Constant1_out1);



  FFT u_FFT (.clk(clk),
             .reset(reset),
             .enb(enb),
             .dataIn_0(obs_samples_0),  // sfix12_En10
             .dataIn_1(obs_samples_1),  // sfix12_En10
             .dataIn_2(obs_samples_2),  // sfix12_En10
             .dataIn_3(obs_samples_3),  // sfix12_En10
             .dataIn_4(obs_samples_4),  // sfix12_En10
             .dataIn_5(obs_samples_5),  // sfix12_En10
             .dataIn_6(obs_samples_6),  // sfix12_En10
             .dataIn_7(obs_samples_7),  // sfix12_En10
             .dataIn_8(obs_samples_8),  // sfix12_En10
             .dataIn_9(obs_samples_9),  // sfix12_En10
             .dataIn_10(obs_samples_10),  // sfix12_En10
             .dataIn_11(obs_samples_11),  // sfix12_En10
             .dataIn_12(obs_samples_12),  // sfix12_En10
             .dataIn_13(obs_samples_13),  // sfix12_En10
             .dataIn_14(obs_samples_14),  // sfix12_En10
             .dataIn_15(obs_samples_15),  // sfix12_En10
             .dataIn_16(obs_samples_16),  // sfix12_En10
             .dataIn_17(obs_samples_17),  // sfix12_En10
             .dataIn_18(obs_samples_18),  // sfix12_En10
             .dataIn_19(obs_samples_19),  // sfix12_En10
             .dataIn_20(obs_samples_20),  // sfix12_En10
             .dataIn_21(obs_samples_21),  // sfix12_En10
             .dataIn_22(obs_samples_22),  // sfix12_En10
             .dataIn_23(obs_samples_23),  // sfix12_En10
             .dataIn_24(obs_samples_24),  // sfix12_En10
             .dataIn_25(obs_samples_25),  // sfix12_En10
             .dataIn_26(obs_samples_26),  // sfix12_En10
             .dataIn_27(obs_samples_27),  // sfix12_En10
             .dataIn_28(obs_samples_28),  // sfix12_En10
             .dataIn_29(obs_samples_29),  // sfix12_En10
             .dataIn_30(obs_samples_30),  // sfix12_En10
             .dataIn_31(obs_samples_31),  // sfix12_En10
             .validIn(Vel_Switch_2_out1),
             .dataOut_re_0(FFT_out1_re_0),  // sfix17_En10
             .dataOut_re_1(FFT_out1_re_1),  // sfix17_En10
             .dataOut_re_2(FFT_out1_re_2),  // sfix17_En10
             .dataOut_re_3(FFT_out1_re_3),  // sfix17_En10
             .dataOut_re_4(FFT_out1_re_4),  // sfix17_En10
             .dataOut_re_5(FFT_out1_re_5),  // sfix17_En10
             .dataOut_re_6(FFT_out1_re_6),  // sfix17_En10
             .dataOut_re_7(FFT_out1_re_7),  // sfix17_En10
             .dataOut_re_8(FFT_out1_re_8),  // sfix17_En10
             .dataOut_re_9(FFT_out1_re_9),  // sfix17_En10
             .dataOut_re_10(FFT_out1_re_10),  // sfix17_En10
             .dataOut_re_11(FFT_out1_re_11),  // sfix17_En10
             .dataOut_re_12(FFT_out1_re_12),  // sfix17_En10
             .dataOut_re_13(FFT_out1_re_13),  // sfix17_En10
             .dataOut_re_14(FFT_out1_re_14),  // sfix17_En10
             .dataOut_re_15(FFT_out1_re_15),  // sfix17_En10
             .dataOut_re_16(FFT_out1_re_16),  // sfix17_En10
             .dataOut_re_17(FFT_out1_re_17),  // sfix17_En10
             .dataOut_re_18(FFT_out1_re_18),  // sfix17_En10
             .dataOut_re_19(FFT_out1_re_19),  // sfix17_En10
             .dataOut_re_20(FFT_out1_re_20),  // sfix17_En10
             .dataOut_re_21(FFT_out1_re_21),  // sfix17_En10
             .dataOut_re_22(FFT_out1_re_22),  // sfix17_En10
             .dataOut_re_23(FFT_out1_re_23),  // sfix17_En10
             .dataOut_re_24(FFT_out1_re_24),  // sfix17_En10
             .dataOut_re_25(FFT_out1_re_25),  // sfix17_En10
             .dataOut_re_26(FFT_out1_re_26),  // sfix17_En10
             .dataOut_re_27(FFT_out1_re_27),  // sfix17_En10
             .dataOut_re_28(FFT_out1_re_28),  // sfix17_En10
             .dataOut_re_29(FFT_out1_re_29),  // sfix17_En10
             .dataOut_re_30(FFT_out1_re_30),  // sfix17_En10
             .dataOut_re_31(FFT_out1_re_31),  // sfix17_En10
             .dataOut_im_0(FFT_out1_im_0),  // sfix17_En10
             .dataOut_im_1(FFT_out1_im_1),  // sfix17_En10
             .dataOut_im_2(FFT_out1_im_2),  // sfix17_En10
             .dataOut_im_3(FFT_out1_im_3),  // sfix17_En10
             .dataOut_im_4(FFT_out1_im_4),  // sfix17_En10
             .dataOut_im_5(FFT_out1_im_5),  // sfix17_En10
             .dataOut_im_6(FFT_out1_im_6),  // sfix17_En10
             .dataOut_im_7(FFT_out1_im_7),  // sfix17_En10
             .dataOut_im_8(FFT_out1_im_8),  // sfix17_En10
             .dataOut_im_9(FFT_out1_im_9),  // sfix17_En10
             .dataOut_im_10(FFT_out1_im_10),  // sfix17_En10
             .dataOut_im_11(FFT_out1_im_11),  // sfix17_En10
             .dataOut_im_12(FFT_out1_im_12),  // sfix17_En10
             .dataOut_im_13(FFT_out1_im_13),  // sfix17_En10
             .dataOut_im_14(FFT_out1_im_14),  // sfix17_En10
             .dataOut_im_15(FFT_out1_im_15),  // sfix17_En10
             .dataOut_im_16(FFT_out1_im_16),  // sfix17_En10
             .dataOut_im_17(FFT_out1_im_17),  // sfix17_En10
             .dataOut_im_18(FFT_out1_im_18),  // sfix17_En10
             .dataOut_im_19(FFT_out1_im_19),  // sfix17_En10
             .dataOut_im_20(FFT_out1_im_20),  // sfix17_En10
             .dataOut_im_21(FFT_out1_im_21),  // sfix17_En10
             .dataOut_im_22(FFT_out1_im_22),  // sfix17_En10
             .dataOut_im_23(FFT_out1_im_23),  // sfix17_En10
             .dataOut_im_24(FFT_out1_im_24),  // sfix17_En10
             .dataOut_im_25(FFT_out1_im_25),  // sfix17_En10
             .dataOut_im_26(FFT_out1_im_26),  // sfix17_En10
             .dataOut_im_27(FFT_out1_im_27),  // sfix17_En10
             .dataOut_im_28(FFT_out1_im_28),  // sfix17_En10
             .dataOut_im_29(FFT_out1_im_29),  // sfix17_En10
             .dataOut_im_30(FFT_out1_im_30),  // sfix17_En10
             .dataOut_im_31(FFT_out1_im_31),  // sfix17_En10
             .validOut(FFT_out2)
             );

  assign Complex_to_Real_Imag_out1[0] = FFT_out1_re_0;
  assign Complex_to_Real_Imag_out1[1] = FFT_out1_re_1;
  assign Complex_to_Real_Imag_out1[2] = FFT_out1_re_2;
  assign Complex_to_Real_Imag_out1[3] = FFT_out1_re_3;
  assign Complex_to_Real_Imag_out1[4] = FFT_out1_re_4;
  assign Complex_to_Real_Imag_out1[5] = FFT_out1_re_5;
  assign Complex_to_Real_Imag_out1[6] = FFT_out1_re_6;
  assign Complex_to_Real_Imag_out1[7] = FFT_out1_re_7;
  assign Complex_to_Real_Imag_out1[8] = FFT_out1_re_8;
  assign Complex_to_Real_Imag_out1[9] = FFT_out1_re_9;
  assign Complex_to_Real_Imag_out1[10] = FFT_out1_re_10;
  assign Complex_to_Real_Imag_out1[11] = FFT_out1_re_11;
  assign Complex_to_Real_Imag_out1[12] = FFT_out1_re_12;
  assign Complex_to_Real_Imag_out1[13] = FFT_out1_re_13;
  assign Complex_to_Real_Imag_out1[14] = FFT_out1_re_14;
  assign Complex_to_Real_Imag_out1[15] = FFT_out1_re_15;
  assign Complex_to_Real_Imag_out1[16] = FFT_out1_re_16;
  assign Complex_to_Real_Imag_out1[17] = FFT_out1_re_17;
  assign Complex_to_Real_Imag_out1[18] = FFT_out1_re_18;
  assign Complex_to_Real_Imag_out1[19] = FFT_out1_re_19;
  assign Complex_to_Real_Imag_out1[20] = FFT_out1_re_20;
  assign Complex_to_Real_Imag_out1[21] = FFT_out1_re_21;
  assign Complex_to_Real_Imag_out1[22] = FFT_out1_re_22;
  assign Complex_to_Real_Imag_out1[23] = FFT_out1_re_23;
  assign Complex_to_Real_Imag_out1[24] = FFT_out1_re_24;
  assign Complex_to_Real_Imag_out1[25] = FFT_out1_re_25;
  assign Complex_to_Real_Imag_out1[26] = FFT_out1_re_26;
  assign Complex_to_Real_Imag_out1[27] = FFT_out1_re_27;
  assign Complex_to_Real_Imag_out1[28] = FFT_out1_re_28;
  assign Complex_to_Real_Imag_out1[29] = FFT_out1_re_29;
  assign Complex_to_Real_Imag_out1[30] = FFT_out1_re_30;
  assign Complex_to_Real_Imag_out1[31] = FFT_out1_re_31;

  assign Product_out1[0] = Complex_to_Real_Imag_out1[0] * Complex_to_Real_Imag_out1[0];
  assign Product_out1[1] = Complex_to_Real_Imag_out1[1] * Complex_to_Real_Imag_out1[1];
  assign Product_out1[2] = Complex_to_Real_Imag_out1[2] * Complex_to_Real_Imag_out1[2];
  assign Product_out1[3] = Complex_to_Real_Imag_out1[3] * Complex_to_Real_Imag_out1[3];
  assign Product_out1[4] = Complex_to_Real_Imag_out1[4] * Complex_to_Real_Imag_out1[4];
  assign Product_out1[5] = Complex_to_Real_Imag_out1[5] * Complex_to_Real_Imag_out1[5];
  assign Product_out1[6] = Complex_to_Real_Imag_out1[6] * Complex_to_Real_Imag_out1[6];
  assign Product_out1[7] = Complex_to_Real_Imag_out1[7] * Complex_to_Real_Imag_out1[7];
  assign Product_out1[8] = Complex_to_Real_Imag_out1[8] * Complex_to_Real_Imag_out1[8];
  assign Product_out1[9] = Complex_to_Real_Imag_out1[9] * Complex_to_Real_Imag_out1[9];
  assign Product_out1[10] = Complex_to_Real_Imag_out1[10] * Complex_to_Real_Imag_out1[10];
  assign Product_out1[11] = Complex_to_Real_Imag_out1[11] * Complex_to_Real_Imag_out1[11];
  assign Product_out1[12] = Complex_to_Real_Imag_out1[12] * Complex_to_Real_Imag_out1[12];
  assign Product_out1[13] = Complex_to_Real_Imag_out1[13] * Complex_to_Real_Imag_out1[13];
  assign Product_out1[14] = Complex_to_Real_Imag_out1[14] * Complex_to_Real_Imag_out1[14];
  assign Product_out1[15] = Complex_to_Real_Imag_out1[15] * Complex_to_Real_Imag_out1[15];
  assign Product_out1[16] = Complex_to_Real_Imag_out1[16] * Complex_to_Real_Imag_out1[16];
  assign Product_out1[17] = Complex_to_Real_Imag_out1[17] * Complex_to_Real_Imag_out1[17];
  assign Product_out1[18] = Complex_to_Real_Imag_out1[18] * Complex_to_Real_Imag_out1[18];
  assign Product_out1[19] = Complex_to_Real_Imag_out1[19] * Complex_to_Real_Imag_out1[19];
  assign Product_out1[20] = Complex_to_Real_Imag_out1[20] * Complex_to_Real_Imag_out1[20];
  assign Product_out1[21] = Complex_to_Real_Imag_out1[21] * Complex_to_Real_Imag_out1[21];
  assign Product_out1[22] = Complex_to_Real_Imag_out1[22] * Complex_to_Real_Imag_out1[22];
  assign Product_out1[23] = Complex_to_Real_Imag_out1[23] * Complex_to_Real_Imag_out1[23];
  assign Product_out1[24] = Complex_to_Real_Imag_out1[24] * Complex_to_Real_Imag_out1[24];
  assign Product_out1[25] = Complex_to_Real_Imag_out1[25] * Complex_to_Real_Imag_out1[25];
  assign Product_out1[26] = Complex_to_Real_Imag_out1[26] * Complex_to_Real_Imag_out1[26];
  assign Product_out1[27] = Complex_to_Real_Imag_out1[27] * Complex_to_Real_Imag_out1[27];
  assign Product_out1[28] = Complex_to_Real_Imag_out1[28] * Complex_to_Real_Imag_out1[28];
  assign Product_out1[29] = Complex_to_Real_Imag_out1[29] * Complex_to_Real_Imag_out1[29];
  assign Product_out1[30] = Complex_to_Real_Imag_out1[30] * Complex_to_Real_Imag_out1[30];
  assign Product_out1[31] = Complex_to_Real_Imag_out1[31] * Complex_to_Real_Imag_out1[31];



  assign Complex_to_Real_Imag_out2[0] = FFT_out1_im_0;
  assign Complex_to_Real_Imag_out2[1] = FFT_out1_im_1;
  assign Complex_to_Real_Imag_out2[2] = FFT_out1_im_2;
  assign Complex_to_Real_Imag_out2[3] = FFT_out1_im_3;
  assign Complex_to_Real_Imag_out2[4] = FFT_out1_im_4;
  assign Complex_to_Real_Imag_out2[5] = FFT_out1_im_5;
  assign Complex_to_Real_Imag_out2[6] = FFT_out1_im_6;
  assign Complex_to_Real_Imag_out2[7] = FFT_out1_im_7;
  assign Complex_to_Real_Imag_out2[8] = FFT_out1_im_8;
  assign Complex_to_Real_Imag_out2[9] = FFT_out1_im_9;
  assign Complex_to_Real_Imag_out2[10] = FFT_out1_im_10;
  assign Complex_to_Real_Imag_out2[11] = FFT_out1_im_11;
  assign Complex_to_Real_Imag_out2[12] = FFT_out1_im_12;
  assign Complex_to_Real_Imag_out2[13] = FFT_out1_im_13;
  assign Complex_to_Real_Imag_out2[14] = FFT_out1_im_14;
  assign Complex_to_Real_Imag_out2[15] = FFT_out1_im_15;
  assign Complex_to_Real_Imag_out2[16] = FFT_out1_im_16;
  assign Complex_to_Real_Imag_out2[17] = FFT_out1_im_17;
  assign Complex_to_Real_Imag_out2[18] = FFT_out1_im_18;
  assign Complex_to_Real_Imag_out2[19] = FFT_out1_im_19;
  assign Complex_to_Real_Imag_out2[20] = FFT_out1_im_20;
  assign Complex_to_Real_Imag_out2[21] = FFT_out1_im_21;
  assign Complex_to_Real_Imag_out2[22] = FFT_out1_im_22;
  assign Complex_to_Real_Imag_out2[23] = FFT_out1_im_23;
  assign Complex_to_Real_Imag_out2[24] = FFT_out1_im_24;
  assign Complex_to_Real_Imag_out2[25] = FFT_out1_im_25;
  assign Complex_to_Real_Imag_out2[26] = FFT_out1_im_26;
  assign Complex_to_Real_Imag_out2[27] = FFT_out1_im_27;
  assign Complex_to_Real_Imag_out2[28] = FFT_out1_im_28;
  assign Complex_to_Real_Imag_out2[29] = FFT_out1_im_29;
  assign Complex_to_Real_Imag_out2[30] = FFT_out1_im_30;
  assign Complex_to_Real_Imag_out2[31] = FFT_out1_im_31;

  assign Product1_out1[0] = Complex_to_Real_Imag_out2[0] * Complex_to_Real_Imag_out2[0];
  assign Product1_out1[1] = Complex_to_Real_Imag_out2[1] * Complex_to_Real_Imag_out2[1];
  assign Product1_out1[2] = Complex_to_Real_Imag_out2[2] * Complex_to_Real_Imag_out2[2];
  assign Product1_out1[3] = Complex_to_Real_Imag_out2[3] * Complex_to_Real_Imag_out2[3];
  assign Product1_out1[4] = Complex_to_Real_Imag_out2[4] * Complex_to_Real_Imag_out2[4];
  assign Product1_out1[5] = Complex_to_Real_Imag_out2[5] * Complex_to_Real_Imag_out2[5];
  assign Product1_out1[6] = Complex_to_Real_Imag_out2[6] * Complex_to_Real_Imag_out2[6];
  assign Product1_out1[7] = Complex_to_Real_Imag_out2[7] * Complex_to_Real_Imag_out2[7];
  assign Product1_out1[8] = Complex_to_Real_Imag_out2[8] * Complex_to_Real_Imag_out2[8];
  assign Product1_out1[9] = Complex_to_Real_Imag_out2[9] * Complex_to_Real_Imag_out2[9];
  assign Product1_out1[10] = Complex_to_Real_Imag_out2[10] * Complex_to_Real_Imag_out2[10];
  assign Product1_out1[11] = Complex_to_Real_Imag_out2[11] * Complex_to_Real_Imag_out2[11];
  assign Product1_out1[12] = Complex_to_Real_Imag_out2[12] * Complex_to_Real_Imag_out2[12];
  assign Product1_out1[13] = Complex_to_Real_Imag_out2[13] * Complex_to_Real_Imag_out2[13];
  assign Product1_out1[14] = Complex_to_Real_Imag_out2[14] * Complex_to_Real_Imag_out2[14];
  assign Product1_out1[15] = Complex_to_Real_Imag_out2[15] * Complex_to_Real_Imag_out2[15];
  assign Product1_out1[16] = Complex_to_Real_Imag_out2[16] * Complex_to_Real_Imag_out2[16];
  assign Product1_out1[17] = Complex_to_Real_Imag_out2[17] * Complex_to_Real_Imag_out2[17];
  assign Product1_out1[18] = Complex_to_Real_Imag_out2[18] * Complex_to_Real_Imag_out2[18];
  assign Product1_out1[19] = Complex_to_Real_Imag_out2[19] * Complex_to_Real_Imag_out2[19];
  assign Product1_out1[20] = Complex_to_Real_Imag_out2[20] * Complex_to_Real_Imag_out2[20];
  assign Product1_out1[21] = Complex_to_Real_Imag_out2[21] * Complex_to_Real_Imag_out2[21];
  assign Product1_out1[22] = Complex_to_Real_Imag_out2[22] * Complex_to_Real_Imag_out2[22];
  assign Product1_out1[23] = Complex_to_Real_Imag_out2[23] * Complex_to_Real_Imag_out2[23];
  assign Product1_out1[24] = Complex_to_Real_Imag_out2[24] * Complex_to_Real_Imag_out2[24];
  assign Product1_out1[25] = Complex_to_Real_Imag_out2[25] * Complex_to_Real_Imag_out2[25];
  assign Product1_out1[26] = Complex_to_Real_Imag_out2[26] * Complex_to_Real_Imag_out2[26];
  assign Product1_out1[27] = Complex_to_Real_Imag_out2[27] * Complex_to_Real_Imag_out2[27];
  assign Product1_out1[28] = Complex_to_Real_Imag_out2[28] * Complex_to_Real_Imag_out2[28];
  assign Product1_out1[29] = Complex_to_Real_Imag_out2[29] * Complex_to_Real_Imag_out2[29];
  assign Product1_out1[30] = Complex_to_Real_Imag_out2[30] * Complex_to_Real_Imag_out2[30];
  assign Product1_out1[31] = Complex_to_Real_Imag_out2[31] * Complex_to_Real_Imag_out2[31];



  assign Add_add_cast = {Product_out1[0][33], Product_out1[0]};
  assign Add_add_cast_1 = {Product1_out1[0][33], Product1_out1[0]};
  assign Add_out1[0] = Add_add_cast + Add_add_cast_1;
  assign Add_add_cast_2 = {Product_out1[1][33], Product_out1[1]};
  assign Add_add_cast_3 = {Product1_out1[1][33], Product1_out1[1]};
  assign Add_out1[1] = Add_add_cast_2 + Add_add_cast_3;
  assign Add_add_cast_4 = {Product_out1[2][33], Product_out1[2]};
  assign Add_add_cast_5 = {Product1_out1[2][33], Product1_out1[2]};
  assign Add_out1[2] = Add_add_cast_4 + Add_add_cast_5;
  assign Add_add_cast_6 = {Product_out1[3][33], Product_out1[3]};
  assign Add_add_cast_7 = {Product1_out1[3][33], Product1_out1[3]};
  assign Add_out1[3] = Add_add_cast_6 + Add_add_cast_7;
  assign Add_add_cast_8 = {Product_out1[4][33], Product_out1[4]};
  assign Add_add_cast_9 = {Product1_out1[4][33], Product1_out1[4]};
  assign Add_out1[4] = Add_add_cast_8 + Add_add_cast_9;
  assign Add_add_cast_10 = {Product_out1[5][33], Product_out1[5]};
  assign Add_add_cast_11 = {Product1_out1[5][33], Product1_out1[5]};
  assign Add_out1[5] = Add_add_cast_10 + Add_add_cast_11;
  assign Add_add_cast_12 = {Product_out1[6][33], Product_out1[6]};
  assign Add_add_cast_13 = {Product1_out1[6][33], Product1_out1[6]};
  assign Add_out1[6] = Add_add_cast_12 + Add_add_cast_13;
  assign Add_add_cast_14 = {Product_out1[7][33], Product_out1[7]};
  assign Add_add_cast_15 = {Product1_out1[7][33], Product1_out1[7]};
  assign Add_out1[7] = Add_add_cast_14 + Add_add_cast_15;
  assign Add_add_cast_16 = {Product_out1[8][33], Product_out1[8]};
  assign Add_add_cast_17 = {Product1_out1[8][33], Product1_out1[8]};
  assign Add_out1[8] = Add_add_cast_16 + Add_add_cast_17;
  assign Add_add_cast_18 = {Product_out1[9][33], Product_out1[9]};
  assign Add_add_cast_19 = {Product1_out1[9][33], Product1_out1[9]};
  assign Add_out1[9] = Add_add_cast_18 + Add_add_cast_19;
  assign Add_add_cast_20 = {Product_out1[10][33], Product_out1[10]};
  assign Add_add_cast_21 = {Product1_out1[10][33], Product1_out1[10]};
  assign Add_out1[10] = Add_add_cast_20 + Add_add_cast_21;
  assign Add_add_cast_22 = {Product_out1[11][33], Product_out1[11]};
  assign Add_add_cast_23 = {Product1_out1[11][33], Product1_out1[11]};
  assign Add_out1[11] = Add_add_cast_22 + Add_add_cast_23;
  assign Add_add_cast_24 = {Product_out1[12][33], Product_out1[12]};
  assign Add_add_cast_25 = {Product1_out1[12][33], Product1_out1[12]};
  assign Add_out1[12] = Add_add_cast_24 + Add_add_cast_25;
  assign Add_add_cast_26 = {Product_out1[13][33], Product_out1[13]};
  assign Add_add_cast_27 = {Product1_out1[13][33], Product1_out1[13]};
  assign Add_out1[13] = Add_add_cast_26 + Add_add_cast_27;
  assign Add_add_cast_28 = {Product_out1[14][33], Product_out1[14]};
  assign Add_add_cast_29 = {Product1_out1[14][33], Product1_out1[14]};
  assign Add_out1[14] = Add_add_cast_28 + Add_add_cast_29;
  assign Add_add_cast_30 = {Product_out1[15][33], Product_out1[15]};
  assign Add_add_cast_31 = {Product1_out1[15][33], Product1_out1[15]};
  assign Add_out1[15] = Add_add_cast_30 + Add_add_cast_31;
  assign Add_add_cast_32 = {Product_out1[16][33], Product_out1[16]};
  assign Add_add_cast_33 = {Product1_out1[16][33], Product1_out1[16]};
  assign Add_out1[16] = Add_add_cast_32 + Add_add_cast_33;
  assign Add_add_cast_34 = {Product_out1[17][33], Product_out1[17]};
  assign Add_add_cast_35 = {Product1_out1[17][33], Product1_out1[17]};
  assign Add_out1[17] = Add_add_cast_34 + Add_add_cast_35;
  assign Add_add_cast_36 = {Product_out1[18][33], Product_out1[18]};
  assign Add_add_cast_37 = {Product1_out1[18][33], Product1_out1[18]};
  assign Add_out1[18] = Add_add_cast_36 + Add_add_cast_37;
  assign Add_add_cast_38 = {Product_out1[19][33], Product_out1[19]};
  assign Add_add_cast_39 = {Product1_out1[19][33], Product1_out1[19]};
  assign Add_out1[19] = Add_add_cast_38 + Add_add_cast_39;
  assign Add_add_cast_40 = {Product_out1[20][33], Product_out1[20]};
  assign Add_add_cast_41 = {Product1_out1[20][33], Product1_out1[20]};
  assign Add_out1[20] = Add_add_cast_40 + Add_add_cast_41;
  assign Add_add_cast_42 = {Product_out1[21][33], Product_out1[21]};
  assign Add_add_cast_43 = {Product1_out1[21][33], Product1_out1[21]};
  assign Add_out1[21] = Add_add_cast_42 + Add_add_cast_43;
  assign Add_add_cast_44 = {Product_out1[22][33], Product_out1[22]};
  assign Add_add_cast_45 = {Product1_out1[22][33], Product1_out1[22]};
  assign Add_out1[22] = Add_add_cast_44 + Add_add_cast_45;
  assign Add_add_cast_46 = {Product_out1[23][33], Product_out1[23]};
  assign Add_add_cast_47 = {Product1_out1[23][33], Product1_out1[23]};
  assign Add_out1[23] = Add_add_cast_46 + Add_add_cast_47;
  assign Add_add_cast_48 = {Product_out1[24][33], Product_out1[24]};
  assign Add_add_cast_49 = {Product1_out1[24][33], Product1_out1[24]};
  assign Add_out1[24] = Add_add_cast_48 + Add_add_cast_49;
  assign Add_add_cast_50 = {Product_out1[25][33], Product_out1[25]};
  assign Add_add_cast_51 = {Product1_out1[25][33], Product1_out1[25]};
  assign Add_out1[25] = Add_add_cast_50 + Add_add_cast_51;
  assign Add_add_cast_52 = {Product_out1[26][33], Product_out1[26]};
  assign Add_add_cast_53 = {Product1_out1[26][33], Product1_out1[26]};
  assign Add_out1[26] = Add_add_cast_52 + Add_add_cast_53;
  assign Add_add_cast_54 = {Product_out1[27][33], Product_out1[27]};
  assign Add_add_cast_55 = {Product1_out1[27][33], Product1_out1[27]};
  assign Add_out1[27] = Add_add_cast_54 + Add_add_cast_55;
  assign Add_add_cast_56 = {Product_out1[28][33], Product_out1[28]};
  assign Add_add_cast_57 = {Product1_out1[28][33], Product1_out1[28]};
  assign Add_out1[28] = Add_add_cast_56 + Add_add_cast_57;
  assign Add_add_cast_58 = {Product_out1[29][33], Product_out1[29]};
  assign Add_add_cast_59 = {Product1_out1[29][33], Product1_out1[29]};
  assign Add_out1[29] = Add_add_cast_58 + Add_add_cast_59;
  assign Add_add_cast_60 = {Product_out1[30][33], Product_out1[30]};
  assign Add_add_cast_61 = {Product1_out1[30][33], Product1_out1[30]};
  assign Add_out1[30] = Add_add_cast_60 + Add_add_cast_61;
  assign Add_add_cast_62 = {Product_out1[31][33], Product_out1[31]};
  assign Add_add_cast_63 = {Product1_out1[31][33], Product1_out1[31]};
  assign Add_out1[31] = Add_add_cast_62 + Add_add_cast_63;



  Doppler_Calculation u_Doppler_Calculation (.u_0(Add_out1[0]),  // sfix35_En20
                                             .u_1(Add_out1[1]),  // sfix35_En20
                                             .u_2(Add_out1[2]),  // sfix35_En20
                                             .u_3(Add_out1[3]),  // sfix35_En20
                                             .u_4(Add_out1[4]),  // sfix35_En20
                                             .u_5(Add_out1[5]),  // sfix35_En20
                                             .u_6(Add_out1[6]),  // sfix35_En20
                                             .u_7(Add_out1[7]),  // sfix35_En20
                                             .u_8(Add_out1[8]),  // sfix35_En20
                                             .u_9(Add_out1[9]),  // sfix35_En20
                                             .u_10(Add_out1[10]),  // sfix35_En20
                                             .u_11(Add_out1[11]),  // sfix35_En20
                                             .u_12(Add_out1[12]),  // sfix35_En20
                                             .u_13(Add_out1[13]),  // sfix35_En20
                                             .u_14(Add_out1[14]),  // sfix35_En20
                                             .u_15(Add_out1[15]),  // sfix35_En20
                                             .u_16(Add_out1[16]),  // sfix35_En20
                                             .u_17(Add_out1[17]),  // sfix35_En20
                                             .u_18(Add_out1[18]),  // sfix35_En20
                                             .u_19(Add_out1[19]),  // sfix35_En20
                                             .u_20(Add_out1[20]),  // sfix35_En20
                                             .u_21(Add_out1[21]),  // sfix35_En20
                                             .u_22(Add_out1[22]),  // sfix35_En20
                                             .u_23(Add_out1[23]),  // sfix35_En20
                                             .u_24(Add_out1[24]),  // sfix35_En20
                                             .u_25(Add_out1[25]),  // sfix35_En20
                                             .u_26(Add_out1[26]),  // sfix35_En20
                                             .u_27(Add_out1[27]),  // sfix35_En20
                                             .u_28(Add_out1[28]),  // sfix35_En20
                                             .u_29(Add_out1[29]),  // sfix35_En20
                                             .u_30(Add_out1[30]),  // sfix35_En20
                                             .u_31(Add_out1[31]),  // sfix35_En20
                                             .valid(FFT_out2),
                                             .f(f)  // ufix32_En5
                                             );

  assign dopp_freq = f;

endmodule  // Doppler_Processor

