// -------------------------------------------------------------
// 
// File Name: hdlsrc\pemancar_bpsk\Transmitter_tc.v
// Created: 2023-04-04 14:55:14
// 
// Generated by MATLAB 9.12 and HDL Coder 3.20
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Transmitter_tc
// Source Path: Transmitter_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb         : identical to clk_enable
// enb_1_1_1   : identical to clk_enable
// enb_1_1000_0: 1000x slower than clk with last phase
// enb_1_1000_1: 1000x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Transmitter_tc
          (clk,
           reset,
           clk_enable,
           enb,
           enb_1_1_1,
           enb_1_1000_0,
           enb_1_1000_1);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb;
  output  enb_1_1_1;
  output  enb_1_1000_0;
  output  enb_1_1000_1;


  reg [9:0] count1000;  // ufix10
  wire phase_all;
  reg  phase_0;
  wire phase_0_tmp;
  reg  phase_1;
  wire phase_1_tmp;


  always @ (posedge clk or posedge reset)
    begin: Counter1000
      if (reset == 1'b1) begin
        count1000 <= 10'b0000000001;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (count1000 >= 10'b1111100111) begin
            count1000 <= 10'b0000000000;
          end
          else begin
            count1000 <= count1000 + 10'b0000000001;
          end
        end
      end
    end // Counter1000

  assign phase_all = clk_enable ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: temp_process1
      if (reset == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end // temp_process1

  assign  phase_0_tmp = (count1000 == 10'b1111100111 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @ (posedge clk or posedge reset)
    begin: temp_process2
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end // temp_process2

  assign  phase_1_tmp = (count1000 == 10'b0000000000 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign enb =  phase_all & clk_enable;

  assign enb_1_1_1 =  phase_all & clk_enable;

  assign enb_1_1000_0 =  phase_0 & clk_enable;

  assign enb_1_1000_1 =  phase_1 & clk_enable;


endmodule  // Transmitter_tc

