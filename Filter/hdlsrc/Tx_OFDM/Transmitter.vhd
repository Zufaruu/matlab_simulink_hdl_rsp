-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\Tx_OFDM\Transmitter.vhd
-- Created: 2023-04-08 13:30:41
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 6.66667e-06
-- Target subsystem base rate: 6.66667e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        6.66667e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- OFDM_Signal                   ce_out        6.66667e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Transmitter
-- Source Path: Tx_OFDM/Transmitter
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Transmitter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Serial_Bits                       :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        ce_out                            :   OUT   std_logic;
        OFDM_Signal                       :   OUT   std_logic_vector(63 DOWNTO 0)  -- sfix64_En30
        );
END Transmitter;


ARCHITECTURE rtl OF Transmitter IS

  -- Component Declarations
  COMPONENT Cosine_HDL_Optimized
    PORT( u                               :   IN    std_logic_vector(63 DOWNTO 0);  -- sfix64_En34
          x                               :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En15
          );
  END COMPONENT;

  COMPONENT QPSK_Modulator_Baseband
    PORT( in0                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          out0_re                         :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          out0_im                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  COMPONENT qam_validity_check
    PORT( in_qam_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          in_qam_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          is_len_qam_valid                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT IFFT1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
          );
  END COMPONENT;

  COMPONENT Sine_HDL_Optimized
    PORT( u                               :   IN    std_logic_vector(63 DOWNTO 0);  -- sfix64_En34
          x                               :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Cosine_HDL_Optimized
    USE ENTITY work.Cosine_HDL_Optimized(rtl);

  FOR ALL : QPSK_Modulator_Baseband
    USE ENTITY work.QPSK_Modulator_Baseband(rtl);

  FOR ALL : qam_validity_check
    USE ENTITY work.qam_validity_check(rtl);

  FOR ALL : IFFT1
    USE ENTITY work.IFFT1(rtl);

  FOR ALL : Sine_HDL_Optimized
    USE ENTITY work.Sine_HDL_Optimized(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL count_step                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL modValue                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL HDL_Counter1_out1                : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_from                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL count                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Gain1_out1                       : signed(63 DOWNTO 0);  -- sfix64_En34
  SIGNAL Cosine                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Cosine_signed                    : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL QPSK_Modulator_Baseband_out1_re  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL QPSK_Modulator_Baseband_out1_im  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL is_len_qam_valid                 : std_logic;
  SIGNAL IFFT1_out1_re                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL IFFT1_out1_im                    : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL count_step_1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL modValue_1                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL HDL_Counter_out1                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_from_1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL IFFT1_out1_re_signed             : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL IFFT1_out1_im_signed             : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product_out1                     : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL Gain_out1                        : signed(63 DOWNTO 0);  -- sfix64_En34
  SIGNAL Sine                             : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Sine_signed                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Product1_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En30
  SIGNAL Product1_out1                    : signed(15 DOWNTO 0);  -- int16
  SIGNAL Sum_add_cast                     : signed(63 DOWNTO 0);  -- sfix64_En30
  SIGNAL Sum_add_cast_1                   : signed(63 DOWNTO 0);  -- sfix64_En30
  SIGNAL Sum_out1                         : signed(63 DOWNTO 0);  -- sfix64_En30

BEGIN
  u_Cosine_HDL_Optimized : Cosine_HDL_Optimized
    PORT MAP( u => std_logic_vector(Gain1_out1),  -- sfix64_En34
              x => Cosine  -- sfix17_En15
              );

  u_QPSK_Modulator_Baseband : QPSK_Modulator_Baseband
    PORT MAP( in0 => Serial_Bits,  -- int8
              out0_re => QPSK_Modulator_Baseband_out1_re,  -- sfix16_En15
              out0_im => QPSK_Modulator_Baseband_out1_im  -- sfix16_En15
              );

  u_qam_validity_check : qam_validity_check
    PORT MAP( in_qam_re => QPSK_Modulator_Baseband_out1_re,  -- sfix16_En15
              in_qam_im => QPSK_Modulator_Baseband_out1_im,  -- sfix16_En15
              is_len_qam_valid => is_len_qam_valid
              );

  u_IFFT1 : IFFT1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              dataIn_re => QPSK_Modulator_Baseband_out1_re,  -- sfix16_En15
              dataIn_im => QPSK_Modulator_Baseband_out1_im,  -- sfix16_En15
              validIn => is_len_qam_valid,
              dataOut_re => IFFT1_out1_re,  -- sfix16_En15
              dataOut_im => IFFT1_out1_im  -- sfix16_En15
              );

  u_Sine_HDL_Optimized : Sine_HDL_Optimized
    PORT MAP( u => std_logic_vector(Gain_out1),  -- sfix64_En34
              x => Sine  -- sfix17_En15
              );

  -- Modulo, Signed Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 150000
  count_step <= to_signed(1, 32);

  modValue <= to_signed(150000, 32);

  enb <= clk_enable;

  count_from <= HDL_Counter1_out1 - modValue;

  count <= HDL_Counter1_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter1_out1 > to_signed(149999, 32) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter1_out1 <= count_value;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  Gain1_out1 <= to_signed(1145324612, 32) * HDL_Counter1_out1;

  Cosine_signed <= signed(Cosine);

  -- Modulo, Signed Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 150000
  count_step_1 <= to_signed(1, 32);

  modValue_1 <= to_signed(150000, 32);

  count_from_1 <= HDL_Counter_out1 - modValue_1;

  count_1 <= HDL_Counter_out1 + count_step_1;

  
  need_to_wrap_1 <= '1' WHEN HDL_Counter_out1 > to_signed(149999, 32) ELSE
      '0';

  
  count_value_1 <= count_1 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter_out1 <= count_value_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  IFFT1_out1_re_signed <= signed(IFFT1_out1_re);

  Product_out1 <= Cosine_signed * IFFT1_out1_re_signed;

  IFFT1_out1_im_signed <= signed(IFFT1_out1_im);

  Gain_out1 <= to_signed(1145324612, 32) * HDL_Counter_out1;

  Sine_signed <= signed(Sine);

  Product1_mul_temp <= IFFT1_out1_im_signed * Sine_signed;
  Product1_out1 <= resize(Product1_mul_temp(32 DOWNTO 30), 16);

  Sum_add_cast <= resize(Product_out1, 64);
  Sum_add_cast_1 <= resize(Product1_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1 <= Sum_add_cast + Sum_add_cast_1;

  OFDM_Signal <= std_logic_vector(Sum_out1);

  ce_out <= clk_enable;

END rtl;

