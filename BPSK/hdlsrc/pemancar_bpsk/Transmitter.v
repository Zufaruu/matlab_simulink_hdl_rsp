// -------------------------------------------------------------
// 
// File Name: hdlsrc\pemancar_bpsk\Transmitter.v
// Created: 2023-04-05 16:06:49
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.001
// Target subsystem base rate: 0.001
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.001
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Out1                          ce_out        0.001
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Transmitter
// Source Path: pemancar_bpsk/Transmitter
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Transmitter
          (clk,
           reset,
           clk_enable,
           In1,
           ce_out,
           Out1);


  input   clk;
  input   reset;
  input   clk_enable;
  input   In1;
  output  ce_out;
  output  signed [24:0] Out1;  // sfix25_En14


  wire enb;
  wire enb_1_1000_1;
  wire enb_1_1_1;
  wire In1_1;
  reg  In1_2;
  wire [1:0] Gain_cast;  // ufix2_E1
  wire Gain_out1;  // ufix1_E1
  wire [7:0] Constant_out1;  // uint8
  wire signed [8:0] Subtract_sub_cast;  // sfix9
  wire signed [8:0] Subtract_1;  // sfix9
  wire signed [8:0] Subtract_out1;  // sfix9
  reg signed [8:0] Subtract_out1_1;  // sfix9
  reg signed [8:0] RT1_bypass_reg;  // sfix9
  wire signed [8:0] Subtract_out1_2;  // sfix9
  wire signed [8:0] RT_out1;  // sfix9
  reg signed [8:0] RT_out1_1;  // sfix9
  wire signed [15:0] Sine_Wave1_out1;  // sfix16_En14
  reg signed [15:0] Sine_Wave1_out1_1;  // sfix16_En14
  wire signed [24:0] Product_out1;  // sfix25_En14
  reg signed [24:0] Product_out1_1;  // sfix25_En14


  assign In1_1 = In1;

  Transmitter_tc u_Transmitter_tc (.clk(clk),
                                   .reset(reset),
                                   .clk_enable(clk_enable),
                                   .enb(enb),
                                   .enb_1_1_1(enb_1_1_1),
                                   .enb_1_1000_1(enb_1_1000_1)
                                   );

  always @(posedge clk or posedge reset)
    begin : in_0_pipe_in_pipe_process
      if (reset == 1'b1) begin
        In1_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          In1_2 <= In1_1;
        end
      end
    end



  assign Gain_cast = {1'b0, In1_2};
  assign Gain_out1 = Gain_cast[0];



  assign Constant_out1 = 8'b00000001;



  assign Subtract_sub_cast = {7'b0, {Gain_out1, 1'b0}};
  assign Subtract_1 = {1'b0, Constant_out1};
  assign Subtract_out1 = Subtract_sub_cast - Subtract_1;



  always @(posedge clk or posedge reset)
    begin : crp_out_delay_process
      if (reset == 1'b1) begin
        Subtract_out1_1 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Subtract_out1_1 <= Subtract_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : RT1_bypass_process
      if (reset == 1'b1) begin
        RT1_bypass_reg <= 9'sb000000000;
      end
      else begin
        if (enb_1_1000_1) begin
          RT1_bypass_reg <= Subtract_out1_1;
        end
      end
    end

  assign Subtract_out1_2 = (enb_1_1000_1 == 1'b1 ? Subtract_out1_1 :
              RT1_bypass_reg);



  assign RT_out1 = Subtract_out1_2;

  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        RT_out1_1 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          RT_out1_1 <= RT_out1;
        end
      end
    end



  Sine_Wave1 u_Sine_Wave1 (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .Sine_Wave_out1(Sine_Wave1_out1)  // sfix16_En14
                           );

  always @(posedge clk or posedge reset)
    begin : Sine_Wave1_out_pipe_process
      if (reset == 1'b1) begin
        Sine_Wave1_out1_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Sine_Wave1_out1_1 <= Sine_Wave1_out1;
        end
      end
    end



  assign Product_out1 = RT_out1_1 * Sine_Wave1_out1_1;



  always @(posedge clk or posedge reset)
    begin : out_0_pipe_in_pipe_process
      if (reset == 1'b1) begin
        Product_out1_1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          Product_out1_1 <= Product_out1;
        end
      end
    end



  assign Out1 = Product_out1_1;

  assign ce_out = enb_1_1_1;

endmodule  // Transmitter

