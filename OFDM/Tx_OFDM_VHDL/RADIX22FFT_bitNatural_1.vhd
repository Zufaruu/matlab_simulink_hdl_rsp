-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\OFDM\Tx_OFDM\RADIX22FFT_bitNatural_1.vhd
-- Created: 2023-04-09 19:16:04
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: RADIX22FFT_bitNatural_1
-- Source Path: dsphdl.IFFT/RADIX22FFT_bitNatural_1
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Transmitter_pkg.ALL;

ENTITY RADIX22FFT_bitNatural_1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_960_0                       :   IN    std_logic;
        dout_re_v                         :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
        dout_im_v                         :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
        dout_2_vld                        :   IN    std_logic;
        dMem_re1                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dMem_im1                          :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        dMem_vld1                         :   OUT   std_logic
        );
END RADIX22FFT_bitNatural_1;


ARCHITECTURE rtl OF RADIX22FFT_bitNatural_1 IS

  -- Signals
  SIGNAL dout_re_v_signed                 : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL dout_im_v_signed                 : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL fftIdx_cnt                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL fftIdx_cnt_next                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL FFTIdx_1                         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL FFTIdxRev                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL fftIdx_vld                       : std_logic;
  SIGNAL wrAddrGenBitNaturalP_wrCnt       : std_logic;  -- ufix1
  SIGNAL wrAddrGenBitNaturalP_wrOddFrame  : std_logic;
  SIGNAL wrAddrGenBitNaturalP_wrAddrReg   : std_logic;  -- ufix1
  SIGNAL wrAddrGenBitNaturalP_wrEnbReg    : std_logic;
  SIGNAL wrAddrGenBitNaturalP_wrCnt_next  : std_logic;  -- ufix1
  SIGNAL wrAddrGenBitNaturalP_wrOddFrame_next : std_logic;
  SIGNAL wrAddrGenBitNaturalP_wrAddrReg_next : std_logic;  -- ufix1
  SIGNAL wrAddrGenBitNaturalP_wrEnbReg_next : std_logic;
  SIGNAL wrAddr                           : std_logic;  -- ufix1
  SIGNAL WrEnb                            : std_logic;
  SIGNAL sampleCnt                        : std_logic;  -- ufix1
  SIGNAL intdelay_reg                     : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL intdelay_reg_next                : std_logic_vector(0 TO 6);  -- ufix1 [7]
  SIGNAL sampleCntDly                     : std_logic;  -- ufix1
  SIGNAL MUXSel                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL MUXSel_vld                       : std_logic;
  SIGNAL dout_re_v_0                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg2                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_2                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg3                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_3                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg4                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_4                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg5                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_5                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg6                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_6                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg7                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_7                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg8                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_8                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg9                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_9                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg10                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_10                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg11                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_11                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg12                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_12                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg13                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_13                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg14                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_14                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg15                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_15                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg16                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_16                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg17                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_17                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg18                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_18                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg19                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_19                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg20                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_20                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg21                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_21                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg22                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_22                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg23                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_23                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg24                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_24                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg25                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_25                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg26                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_26                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg27                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_27                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg28                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_28                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg29                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_29                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg30                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_30                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg31                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_31                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg32                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_32                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg33                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_33                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg34                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_34                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg35                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_35                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg36                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_36                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg37                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_37                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg38                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_38                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg39                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_39                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg40                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_40                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg41                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_41                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg42                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_42                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg43                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_43                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg44                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_44                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg45                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_45                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg46                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_46                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg47                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_47                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg48                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_48                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg49                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_49                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg50                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_50                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg51                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_51                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg52                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_52                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg53                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_53                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg54                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_54                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg55                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_55                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg56                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_56                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg57                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_57                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg58                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_58                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg59                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_59                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg60                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_60                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg61                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_61                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg62                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_62                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg63                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_re_v_63                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_re_reg64                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL memIn_re                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL intdelay_reg_1                   : vector_of_signed16(0 TO 5);  -- sfix16 [6]
  SIGNAL intdelay_reg_next_1              : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL memIn_re_reg                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_0                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg2                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_2                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg3                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_3                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg4                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_4                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg5                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_5                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg6                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_6                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg7                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_7                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg8                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_8                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg9                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_9                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg10                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_10                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg11                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_11                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg12                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_12                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg13                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_13                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg14                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_14                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg15                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_15                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg16                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_16                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg17                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_17                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg18                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_18                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg19                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_19                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg20                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_20                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg21                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_21                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg22                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_22                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg23                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_23                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg24                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_24                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg25                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_25                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg26                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_26                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg27                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_27                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg28                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_28                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg29                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_29                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg30                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_30                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg31                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_31                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg32                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_32                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg33                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_33                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg34                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_34                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg35                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_35                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg36                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_36                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg37                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_37                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg38                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_38                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg39                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_39                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg40                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_40                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg41                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_41                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg42                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_42                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg43                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_43                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg44                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_44                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg45                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_45                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg46                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_46                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg47                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_47                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg48                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_48                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg49                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_49                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg50                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_50                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg51                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_51                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg52                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_52                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg53                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_53                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg54                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_54                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg55                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_55                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg56                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_56                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg57                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_57                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg58                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_58                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg59                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_59                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg60                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_60                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg61                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_61                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg62                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_62                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg63                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dout_im_v_63                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL din_im_reg64                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL memIn_im                         : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL intdelay_reg_2                   : vector_of_signed16(0 TO 5);  -- sfix16 [6]
  SIGNAL intdelay_reg_next_2              : vector_of_signed16(0 TO 5);  -- sfix16_En14 [6]
  SIGNAL memIn_im_reg                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL intdelay_reg_3                   : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL intdelay_reg_next_3              : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL wrAddr_reg                       : std_logic;  -- ufix1
  SIGNAL intdelay_reg_4                   : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL intdelay_reg_next_4              : std_logic_vector(0 TO 5);  -- ufix1 [6]
  SIGNAL wrEnb_reg                        : std_logic;
  SIGNAL rdAddr                           : std_logic;  -- ufix1
  SIGNAL twoLocationReg_0_MEM_re_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_0        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_im_1        : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_re_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_dout_im_reg     : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL twoLocationReg_0_MEM_re_0_next   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twoLocationReg_0_MEM_im_0_next   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twoLocationReg_0_MEM_re_1_next   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twoLocationReg_0_MEM_im_1_next   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twoLocationReg_0_dout_re_reg_next : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL twoLocationReg_0_dout_im_reg_next : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL memOut_re                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL memOut_im                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL rdAddrGenBitNaturalP_addrReg     : std_logic;  -- ufix1
  SIGNAL rdAddrGenBitNaturalP_rdOddFrame  : std_logic;
  SIGNAL rdAddrGenBitNaturalP_rdAddrReg   : std_logic;  -- ufix1
  SIGNAL rdAddrGenBitNaturalP_rdState     : std_logic;  -- ufix1
  SIGNAL rdAddrGenBitNaturalP_vldOutReg   : std_logic;
  SIGNAL rdAddrGenBitNaturalP_rdCnt       : std_logic;  -- ufix1
  SIGNAL rdAddrGenBitNaturalP_FFTIdxO     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL rdAddrGenBitNaturalP_startOutReg : std_logic;
  SIGNAL rdAddrGenBitNaturalP_endOutReg   : std_logic;
  SIGNAL rdAddrGenBitNaturalP_startOutRegDly : std_logic;
  SIGNAL rdAddrGenBitNaturalP_endOutRegDly : std_logic;
  SIGNAL rdAddrGenBitNaturalP_addrReg_next : std_logic;  -- ufix1
  SIGNAL rdAddrGenBitNaturalP_rdOddFrame_next : std_logic;
  SIGNAL rdAddrGenBitNaturalP_rdAddrReg_next : std_logic;  -- ufix1
  SIGNAL rdAddrGenBitNaturalP_rdState_next : std_logic;  -- ufix1
  SIGNAL rdAddrGenBitNaturalP_vldOutReg_next : std_logic;
  SIGNAL rdAddrGenBitNaturalP_rdCnt_next  : std_logic;  -- ufix1
  SIGNAL rdAddrGenBitNaturalP_FFTIdxO_next : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL rdAddrGenBitNaturalP_startOutReg_next : std_logic;
  SIGNAL rdAddrGenBitNaturalP_endOutReg_next : std_logic;
  SIGNAL rdAddrGenBitNaturalP_startOutRegDly_next : std_logic;
  SIGNAL rdAddrGenBitNaturalP_endOutRegDly_next : std_logic;
  SIGNAL dMem_re1_tmp                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL dMem_im1_tmp                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL startOutW                        : std_logic;
  SIGNAL endOutW                          : std_logic;

BEGIN
  dout_re_v_signed <= dout_re_v;

  dout_im_v_signed <= dout_im_v;

  -- fftIdx
  fftIdx_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fftIdx_cnt <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        fftIdx_cnt <= fftIdx_cnt_next;
      END IF;
    END IF;
  END PROCESS fftIdx_process;

  fftIdx_output : PROCESS (dout_2_vld, fftIdx_cnt)
  BEGIN
    fftIdx_cnt_next <= fftIdx_cnt;
    IF dout_2_vld = '1' THEN 
      fftIdx_cnt_next <= fftIdx_cnt + to_unsigned(16#40#, 7);
    END IF;
    FFTIdx_1 <= fftIdx_cnt;
    FFTIdxRev <= unsigned'(fftIdx_cnt(0) & fftIdx_cnt(1) & fftIdx_cnt(2) & fftIdx_cnt(3) & fftIdx_cnt(4) & fftIdx_cnt(5) & fftIdx_cnt(6));
    fftIdx_vld <= dout_2_vld;
  END PROCESS fftIdx_output;


  -- wrAddrGenBitNaturalP
  wrAddrGenBitNaturalP_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wrAddrGenBitNaturalP_wrCnt <= '0';
      wrAddrGenBitNaturalP_wrAddrReg <= '0';
      wrAddrGenBitNaturalP_wrOddFrame <= '0';
      wrAddrGenBitNaturalP_wrEnbReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        wrAddrGenBitNaturalP_wrCnt <= wrAddrGenBitNaturalP_wrCnt_next;
        wrAddrGenBitNaturalP_wrOddFrame <= wrAddrGenBitNaturalP_wrOddFrame_next;
        wrAddrGenBitNaturalP_wrAddrReg <= wrAddrGenBitNaturalP_wrAddrReg_next;
        wrAddrGenBitNaturalP_wrEnbReg <= wrAddrGenBitNaturalP_wrEnbReg_next;
      END IF;
    END IF;
  END PROCESS wrAddrGenBitNaturalP_process;

  wrAddrGenBitNaturalP_output : PROCESS (FFTIdxRev, fftIdx_vld, wrAddrGenBitNaturalP_wrAddrReg,
       wrAddrGenBitNaturalP_wrCnt, wrAddrGenBitNaturalP_wrEnbReg,
       wrAddrGenBitNaturalP_wrOddFrame)
    VARIABLE add_cast : unsigned(1 DOWNTO 0);
    VARIABLE add_temp : unsigned(1 DOWNTO 0);
  BEGIN
    add_temp := to_unsigned(16#0#, 2);
    add_cast := to_unsigned(16#0#, 2);
    wrAddrGenBitNaturalP_wrCnt_next <= wrAddrGenBitNaturalP_wrCnt;
    wrAddrGenBitNaturalP_wrOddFrame_next <= wrAddrGenBitNaturalP_wrOddFrame;
    wrAddrGenBitNaturalP_wrEnbReg_next <= fftIdx_vld;
    IF wrAddrGenBitNaturalP_wrOddFrame = '1' THEN 
      wrAddrGenBitNaturalP_wrAddrReg_next <= wrAddrGenBitNaturalP_wrCnt;
    ELSE 
      wrAddrGenBitNaturalP_wrAddrReg_next <= FFTIdxRev(6) XOR wrAddrGenBitNaturalP_wrCnt;
    END IF;
    IF (wrAddrGenBitNaturalP_wrCnt = '1') AND fftIdx_vld = '1' THEN 
      wrAddrGenBitNaturalP_wrOddFrame_next <=  NOT wrAddrGenBitNaturalP_wrOddFrame;
    END IF;
    IF fftIdx_vld = '1' THEN 
      add_cast := '0' & wrAddrGenBitNaturalP_wrCnt;
      add_temp := add_cast + to_unsigned(16#1#, 2);
      wrAddrGenBitNaturalP_wrCnt_next <= add_temp(0);
    END IF;
    wrAddr <= wrAddrGenBitNaturalP_wrAddrReg;
    WrEnb <= wrAddrGenBitNaturalP_wrEnbReg;
    sampleCnt <= wrAddrGenBitNaturalP_wrCnt;
  END PROCESS wrAddrGenBitNaturalP_output;


  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg(0) <= '0';
      intdelay_reg(1) <= '0';
      intdelay_reg(2) <= '0';
      intdelay_reg(3) <= '0';
      intdelay_reg(4) <= '0';
      intdelay_reg(5) <= '0';
      intdelay_reg(6) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        intdelay_reg(0) <= intdelay_reg_next(0);
        intdelay_reg(1) <= intdelay_reg_next(1);
        intdelay_reg(2) <= intdelay_reg_next(2);
        intdelay_reg(3) <= intdelay_reg_next(3);
        intdelay_reg(4) <= intdelay_reg_next(4);
        intdelay_reg(5) <= intdelay_reg_next(5);
        intdelay_reg(6) <= intdelay_reg_next(6);
      END IF;
    END IF;
  END PROCESS intdelay_process;

  sampleCntDly <= intdelay_reg(6);
  intdelay_reg_next(0) <= sampleCnt;
  intdelay_reg_next(1) <= intdelay_reg(0);
  intdelay_reg_next(2) <= intdelay_reg(1);
  intdelay_reg_next(3) <= intdelay_reg(2);
  intdelay_reg_next(4) <= intdelay_reg(3);
  intdelay_reg_next(5) <= intdelay_reg(4);
  intdelay_reg_next(6) <= intdelay_reg(5);

  -- inMUXSel
  inMuxSel_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      MUXSel <= to_unsigned(16#00#, 6);
      MUXSel_vld <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        MUXSel <= FFTIdxRev(5 DOWNTO 0);
        MUXSel_vld <= fftIdx_vld;
      END IF;
    END IF;
  END PROCESS inMuxSel_process;


  dout_re_v_0 <= signed(dout_re_v_signed(0));

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg1 <= dout_re_v_0;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  dout_re_v_1 <= signed(dout_re_v_signed(1));

  intdelay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg2 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg2 <= dout_re_v_1;
      END IF;
    END IF;
  END PROCESS intdelay_2_process;


  dout_re_v_2 <= signed(dout_re_v_signed(2));

  intdelay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg3 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg3 <= dout_re_v_2;
      END IF;
    END IF;
  END PROCESS intdelay_3_process;


  dout_re_v_3 <= signed(dout_re_v_signed(3));

  intdelay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg4 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg4 <= dout_re_v_3;
      END IF;
    END IF;
  END PROCESS intdelay_4_process;


  dout_re_v_4 <= signed(dout_re_v_signed(4));

  intdelay_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg5 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg5 <= dout_re_v_4;
      END IF;
    END IF;
  END PROCESS intdelay_5_process;


  dout_re_v_5 <= signed(dout_re_v_signed(5));

  intdelay_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg6 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg6 <= dout_re_v_5;
      END IF;
    END IF;
  END PROCESS intdelay_6_process;


  dout_re_v_6 <= signed(dout_re_v_signed(6));

  intdelay_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg7 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg7 <= dout_re_v_6;
      END IF;
    END IF;
  END PROCESS intdelay_7_process;


  dout_re_v_7 <= signed(dout_re_v_signed(7));

  intdelay_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg8 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg8 <= dout_re_v_7;
      END IF;
    END IF;
  END PROCESS intdelay_8_process;


  dout_re_v_8 <= signed(dout_re_v_signed(8));

  intdelay_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg9 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg9 <= dout_re_v_8;
      END IF;
    END IF;
  END PROCESS intdelay_9_process;


  dout_re_v_9 <= signed(dout_re_v_signed(9));

  intdelay_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg10 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg10 <= dout_re_v_9;
      END IF;
    END IF;
  END PROCESS intdelay_10_process;


  dout_re_v_10 <= signed(dout_re_v_signed(10));

  intdelay_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg11 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg11 <= dout_re_v_10;
      END IF;
    END IF;
  END PROCESS intdelay_11_process;


  dout_re_v_11 <= signed(dout_re_v_signed(11));

  intdelay_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg12 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg12 <= dout_re_v_11;
      END IF;
    END IF;
  END PROCESS intdelay_12_process;


  dout_re_v_12 <= signed(dout_re_v_signed(12));

  intdelay_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg13 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg13 <= dout_re_v_12;
      END IF;
    END IF;
  END PROCESS intdelay_13_process;


  dout_re_v_13 <= signed(dout_re_v_signed(13));

  intdelay_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg14 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg14 <= dout_re_v_13;
      END IF;
    END IF;
  END PROCESS intdelay_14_process;


  dout_re_v_14 <= signed(dout_re_v_signed(14));

  intdelay_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg15 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg15 <= dout_re_v_14;
      END IF;
    END IF;
  END PROCESS intdelay_15_process;


  dout_re_v_15 <= signed(dout_re_v_signed(15));

  intdelay_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg16 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg16 <= dout_re_v_15;
      END IF;
    END IF;
  END PROCESS intdelay_16_process;


  dout_re_v_16 <= signed(dout_re_v_signed(16));

  intdelay_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg17 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg17 <= dout_re_v_16;
      END IF;
    END IF;
  END PROCESS intdelay_17_process;


  dout_re_v_17 <= signed(dout_re_v_signed(17));

  intdelay_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg18 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg18 <= dout_re_v_17;
      END IF;
    END IF;
  END PROCESS intdelay_18_process;


  dout_re_v_18 <= signed(dout_re_v_signed(18));

  intdelay_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg19 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg19 <= dout_re_v_18;
      END IF;
    END IF;
  END PROCESS intdelay_19_process;


  dout_re_v_19 <= signed(dout_re_v_signed(19));

  intdelay_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg20 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg20 <= dout_re_v_19;
      END IF;
    END IF;
  END PROCESS intdelay_20_process;


  dout_re_v_20 <= signed(dout_re_v_signed(20));

  intdelay_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg21 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg21 <= dout_re_v_20;
      END IF;
    END IF;
  END PROCESS intdelay_21_process;


  dout_re_v_21 <= signed(dout_re_v_signed(21));

  intdelay_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg22 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg22 <= dout_re_v_21;
      END IF;
    END IF;
  END PROCESS intdelay_22_process;


  dout_re_v_22 <= signed(dout_re_v_signed(22));

  intdelay_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg23 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg23 <= dout_re_v_22;
      END IF;
    END IF;
  END PROCESS intdelay_23_process;


  dout_re_v_23 <= signed(dout_re_v_signed(23));

  intdelay_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg24 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg24 <= dout_re_v_23;
      END IF;
    END IF;
  END PROCESS intdelay_24_process;


  dout_re_v_24 <= signed(dout_re_v_signed(24));

  intdelay_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg25 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg25 <= dout_re_v_24;
      END IF;
    END IF;
  END PROCESS intdelay_25_process;


  dout_re_v_25 <= signed(dout_re_v_signed(25));

  intdelay_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg26 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg26 <= dout_re_v_25;
      END IF;
    END IF;
  END PROCESS intdelay_26_process;


  dout_re_v_26 <= signed(dout_re_v_signed(26));

  intdelay_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg27 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg27 <= dout_re_v_26;
      END IF;
    END IF;
  END PROCESS intdelay_27_process;


  dout_re_v_27 <= signed(dout_re_v_signed(27));

  intdelay_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg28 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg28 <= dout_re_v_27;
      END IF;
    END IF;
  END PROCESS intdelay_28_process;


  dout_re_v_28 <= signed(dout_re_v_signed(28));

  intdelay_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg29 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg29 <= dout_re_v_28;
      END IF;
    END IF;
  END PROCESS intdelay_29_process;


  dout_re_v_29 <= signed(dout_re_v_signed(29));

  intdelay_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg30 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg30 <= dout_re_v_29;
      END IF;
    END IF;
  END PROCESS intdelay_30_process;


  dout_re_v_30 <= signed(dout_re_v_signed(30));

  intdelay_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg31 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg31 <= dout_re_v_30;
      END IF;
    END IF;
  END PROCESS intdelay_31_process;


  dout_re_v_31 <= signed(dout_re_v_signed(31));

  intdelay_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg32 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg32 <= dout_re_v_31;
      END IF;
    END IF;
  END PROCESS intdelay_32_process;


  dout_re_v_32 <= signed(dout_re_v_signed(32));

  intdelay_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg33 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg33 <= dout_re_v_32;
      END IF;
    END IF;
  END PROCESS intdelay_33_process;


  dout_re_v_33 <= signed(dout_re_v_signed(33));

  intdelay_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg34 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg34 <= dout_re_v_33;
      END IF;
    END IF;
  END PROCESS intdelay_34_process;


  dout_re_v_34 <= signed(dout_re_v_signed(34));

  intdelay_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg35 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg35 <= dout_re_v_34;
      END IF;
    END IF;
  END PROCESS intdelay_35_process;


  dout_re_v_35 <= signed(dout_re_v_signed(35));

  intdelay_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg36 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg36 <= dout_re_v_35;
      END IF;
    END IF;
  END PROCESS intdelay_36_process;


  dout_re_v_36 <= signed(dout_re_v_signed(36));

  intdelay_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg37 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg37 <= dout_re_v_36;
      END IF;
    END IF;
  END PROCESS intdelay_37_process;


  dout_re_v_37 <= signed(dout_re_v_signed(37));

  intdelay_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg38 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg38 <= dout_re_v_37;
      END IF;
    END IF;
  END PROCESS intdelay_38_process;


  dout_re_v_38 <= signed(dout_re_v_signed(38));

  intdelay_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg39 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg39 <= dout_re_v_38;
      END IF;
    END IF;
  END PROCESS intdelay_39_process;


  dout_re_v_39 <= signed(dout_re_v_signed(39));

  intdelay_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg40 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg40 <= dout_re_v_39;
      END IF;
    END IF;
  END PROCESS intdelay_40_process;


  dout_re_v_40 <= signed(dout_re_v_signed(40));

  intdelay_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg41 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg41 <= dout_re_v_40;
      END IF;
    END IF;
  END PROCESS intdelay_41_process;


  dout_re_v_41 <= signed(dout_re_v_signed(41));

  intdelay_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg42 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg42 <= dout_re_v_41;
      END IF;
    END IF;
  END PROCESS intdelay_42_process;


  dout_re_v_42 <= signed(dout_re_v_signed(42));

  intdelay_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg43 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg43 <= dout_re_v_42;
      END IF;
    END IF;
  END PROCESS intdelay_43_process;


  dout_re_v_43 <= signed(dout_re_v_signed(43));

  intdelay_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg44 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg44 <= dout_re_v_43;
      END IF;
    END IF;
  END PROCESS intdelay_44_process;


  dout_re_v_44 <= signed(dout_re_v_signed(44));

  intdelay_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg45 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg45 <= dout_re_v_44;
      END IF;
    END IF;
  END PROCESS intdelay_45_process;


  dout_re_v_45 <= signed(dout_re_v_signed(45));

  intdelay_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg46 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg46 <= dout_re_v_45;
      END IF;
    END IF;
  END PROCESS intdelay_46_process;


  dout_re_v_46 <= signed(dout_re_v_signed(46));

  intdelay_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg47 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg47 <= dout_re_v_46;
      END IF;
    END IF;
  END PROCESS intdelay_47_process;


  dout_re_v_47 <= signed(dout_re_v_signed(47));

  intdelay_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg48 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg48 <= dout_re_v_47;
      END IF;
    END IF;
  END PROCESS intdelay_48_process;


  dout_re_v_48 <= signed(dout_re_v_signed(48));

  intdelay_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg49 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg49 <= dout_re_v_48;
      END IF;
    END IF;
  END PROCESS intdelay_49_process;


  dout_re_v_49 <= signed(dout_re_v_signed(49));

  intdelay_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg50 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg50 <= dout_re_v_49;
      END IF;
    END IF;
  END PROCESS intdelay_50_process;


  dout_re_v_50 <= signed(dout_re_v_signed(50));

  intdelay_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg51 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg51 <= dout_re_v_50;
      END IF;
    END IF;
  END PROCESS intdelay_51_process;


  dout_re_v_51 <= signed(dout_re_v_signed(51));

  intdelay_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg52 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg52 <= dout_re_v_51;
      END IF;
    END IF;
  END PROCESS intdelay_52_process;


  dout_re_v_52 <= signed(dout_re_v_signed(52));

  intdelay_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg53 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg53 <= dout_re_v_52;
      END IF;
    END IF;
  END PROCESS intdelay_53_process;


  dout_re_v_53 <= signed(dout_re_v_signed(53));

  intdelay_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg54 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg54 <= dout_re_v_53;
      END IF;
    END IF;
  END PROCESS intdelay_54_process;


  dout_re_v_54 <= signed(dout_re_v_signed(54));

  intdelay_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg55 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg55 <= dout_re_v_54;
      END IF;
    END IF;
  END PROCESS intdelay_55_process;


  dout_re_v_55 <= signed(dout_re_v_signed(55));

  intdelay_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg56 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg56 <= dout_re_v_55;
      END IF;
    END IF;
  END PROCESS intdelay_56_process;


  dout_re_v_56 <= signed(dout_re_v_signed(56));

  intdelay_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg57 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg57 <= dout_re_v_56;
      END IF;
    END IF;
  END PROCESS intdelay_57_process;


  dout_re_v_57 <= signed(dout_re_v_signed(57));

  intdelay_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg58 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg58 <= dout_re_v_57;
      END IF;
    END IF;
  END PROCESS intdelay_58_process;


  dout_re_v_58 <= signed(dout_re_v_signed(58));

  intdelay_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg59 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg59 <= dout_re_v_58;
      END IF;
    END IF;
  END PROCESS intdelay_59_process;


  dout_re_v_59 <= signed(dout_re_v_signed(59));

  intdelay_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg60 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg60 <= dout_re_v_59;
      END IF;
    END IF;
  END PROCESS intdelay_60_process;


  dout_re_v_60 <= signed(dout_re_v_signed(60));

  intdelay_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg61 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg61 <= dout_re_v_60;
      END IF;
    END IF;
  END PROCESS intdelay_61_process;


  dout_re_v_61 <= signed(dout_re_v_signed(61));

  intdelay_62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg62 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg62 <= dout_re_v_61;
      END IF;
    END IF;
  END PROCESS intdelay_62_process;


  dout_re_v_62 <= signed(dout_re_v_signed(62));

  intdelay_63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg63 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg63 <= dout_re_v_62;
      END IF;
    END IF;
  END PROCESS intdelay_63_process;


  dout_re_v_63 <= signed(dout_re_v_signed(63));

  intdelay_64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_re_reg64 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_re_reg64 <= dout_re_v_63;
      END IF;
    END IF;
  END PROCESS intdelay_64_process;


  
  memIn_re <= din_re_reg1 WHEN MUXSel = to_unsigned(16#00#, 6) ELSE
      din_re_reg2 WHEN MUXSel = to_unsigned(16#01#, 6) ELSE
      din_re_reg3 WHEN MUXSel = to_unsigned(16#02#, 6) ELSE
      din_re_reg4 WHEN MUXSel = to_unsigned(16#03#, 6) ELSE
      din_re_reg5 WHEN MUXSel = to_unsigned(16#04#, 6) ELSE
      din_re_reg6 WHEN MUXSel = to_unsigned(16#05#, 6) ELSE
      din_re_reg7 WHEN MUXSel = to_unsigned(16#06#, 6) ELSE
      din_re_reg8 WHEN MUXSel = to_unsigned(16#07#, 6) ELSE
      din_re_reg9 WHEN MUXSel = to_unsigned(16#08#, 6) ELSE
      din_re_reg10 WHEN MUXSel = to_unsigned(16#09#, 6) ELSE
      din_re_reg11 WHEN MUXSel = to_unsigned(16#0A#, 6) ELSE
      din_re_reg12 WHEN MUXSel = to_unsigned(16#0B#, 6) ELSE
      din_re_reg13 WHEN MUXSel = to_unsigned(16#0C#, 6) ELSE
      din_re_reg14 WHEN MUXSel = to_unsigned(16#0D#, 6) ELSE
      din_re_reg15 WHEN MUXSel = to_unsigned(16#0E#, 6) ELSE
      din_re_reg16 WHEN MUXSel = to_unsigned(16#0F#, 6) ELSE
      din_re_reg17 WHEN MUXSel = to_unsigned(16#10#, 6) ELSE
      din_re_reg18 WHEN MUXSel = to_unsigned(16#11#, 6) ELSE
      din_re_reg19 WHEN MUXSel = to_unsigned(16#12#, 6) ELSE
      din_re_reg20 WHEN MUXSel = to_unsigned(16#13#, 6) ELSE
      din_re_reg21 WHEN MUXSel = to_unsigned(16#14#, 6) ELSE
      din_re_reg22 WHEN MUXSel = to_unsigned(16#15#, 6) ELSE
      din_re_reg23 WHEN MUXSel = to_unsigned(16#16#, 6) ELSE
      din_re_reg24 WHEN MUXSel = to_unsigned(16#17#, 6) ELSE
      din_re_reg25 WHEN MUXSel = to_unsigned(16#18#, 6) ELSE
      din_re_reg26 WHEN MUXSel = to_unsigned(16#19#, 6) ELSE
      din_re_reg27 WHEN MUXSel = to_unsigned(16#1A#, 6) ELSE
      din_re_reg28 WHEN MUXSel = to_unsigned(16#1B#, 6) ELSE
      din_re_reg29 WHEN MUXSel = to_unsigned(16#1C#, 6) ELSE
      din_re_reg30 WHEN MUXSel = to_unsigned(16#1D#, 6) ELSE
      din_re_reg31 WHEN MUXSel = to_unsigned(16#1E#, 6) ELSE
      din_re_reg32 WHEN MUXSel = to_unsigned(16#1F#, 6) ELSE
      din_re_reg33 WHEN MUXSel = to_unsigned(16#20#, 6) ELSE
      din_re_reg34 WHEN MUXSel = to_unsigned(16#21#, 6) ELSE
      din_re_reg35 WHEN MUXSel = to_unsigned(16#22#, 6) ELSE
      din_re_reg36 WHEN MUXSel = to_unsigned(16#23#, 6) ELSE
      din_re_reg37 WHEN MUXSel = to_unsigned(16#24#, 6) ELSE
      din_re_reg38 WHEN MUXSel = to_unsigned(16#25#, 6) ELSE
      din_re_reg39 WHEN MUXSel = to_unsigned(16#26#, 6) ELSE
      din_re_reg40 WHEN MUXSel = to_unsigned(16#27#, 6) ELSE
      din_re_reg41 WHEN MUXSel = to_unsigned(16#28#, 6) ELSE
      din_re_reg42 WHEN MUXSel = to_unsigned(16#29#, 6) ELSE
      din_re_reg43 WHEN MUXSel = to_unsigned(16#2A#, 6) ELSE
      din_re_reg44 WHEN MUXSel = to_unsigned(16#2B#, 6) ELSE
      din_re_reg45 WHEN MUXSel = to_unsigned(16#2C#, 6) ELSE
      din_re_reg46 WHEN MUXSel = to_unsigned(16#2D#, 6) ELSE
      din_re_reg47 WHEN MUXSel = to_unsigned(16#2E#, 6) ELSE
      din_re_reg48 WHEN MUXSel = to_unsigned(16#2F#, 6) ELSE
      din_re_reg49 WHEN MUXSel = to_unsigned(16#30#, 6) ELSE
      din_re_reg50 WHEN MUXSel = to_unsigned(16#31#, 6) ELSE
      din_re_reg51 WHEN MUXSel = to_unsigned(16#32#, 6) ELSE
      din_re_reg52 WHEN MUXSel = to_unsigned(16#33#, 6) ELSE
      din_re_reg53 WHEN MUXSel = to_unsigned(16#34#, 6) ELSE
      din_re_reg54 WHEN MUXSel = to_unsigned(16#35#, 6) ELSE
      din_re_reg55 WHEN MUXSel = to_unsigned(16#36#, 6) ELSE
      din_re_reg56 WHEN MUXSel = to_unsigned(16#37#, 6) ELSE
      din_re_reg57 WHEN MUXSel = to_unsigned(16#38#, 6) ELSE
      din_re_reg58 WHEN MUXSel = to_unsigned(16#39#, 6) ELSE
      din_re_reg59 WHEN MUXSel = to_unsigned(16#3A#, 6) ELSE
      din_re_reg60 WHEN MUXSel = to_unsigned(16#3B#, 6) ELSE
      din_re_reg61 WHEN MUXSel = to_unsigned(16#3C#, 6) ELSE
      din_re_reg62 WHEN MUXSel = to_unsigned(16#3D#, 6) ELSE
      din_re_reg63 WHEN MUXSel = to_unsigned(16#3E#, 6) ELSE
      din_re_reg64;

  intdelay_65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_1(0) <= to_signed(16#0000#, 16);
      intdelay_reg_1(1) <= to_signed(16#0000#, 16);
      intdelay_reg_1(2) <= to_signed(16#0000#, 16);
      intdelay_reg_1(3) <= to_signed(16#0000#, 16);
      intdelay_reg_1(4) <= to_signed(16#0000#, 16);
      intdelay_reg_1(5) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        intdelay_reg_1(0) <= intdelay_reg_next_1(0);
        intdelay_reg_1(1) <= intdelay_reg_next_1(1);
        intdelay_reg_1(2) <= intdelay_reg_next_1(2);
        intdelay_reg_1(3) <= intdelay_reg_next_1(3);
        intdelay_reg_1(4) <= intdelay_reg_next_1(4);
        intdelay_reg_1(5) <= intdelay_reg_next_1(5);
      END IF;
    END IF;
  END PROCESS intdelay_65_process;

  memIn_re_reg <= intdelay_reg_1(5);
  intdelay_reg_next_1(0) <= memIn_re;
  intdelay_reg_next_1(1) <= intdelay_reg_1(0);
  intdelay_reg_next_1(2) <= intdelay_reg_1(1);
  intdelay_reg_next_1(3) <= intdelay_reg_1(2);
  intdelay_reg_next_1(4) <= intdelay_reg_1(3);
  intdelay_reg_next_1(5) <= intdelay_reg_1(4);

  dout_im_v_0 <= signed(dout_im_v_signed(0));

  intdelay_66_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg1 <= dout_im_v_0;
      END IF;
    END IF;
  END PROCESS intdelay_66_process;


  dout_im_v_1 <= signed(dout_im_v_signed(1));

  intdelay_67_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg2 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg2 <= dout_im_v_1;
      END IF;
    END IF;
  END PROCESS intdelay_67_process;


  dout_im_v_2 <= signed(dout_im_v_signed(2));

  intdelay_68_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg3 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg3 <= dout_im_v_2;
      END IF;
    END IF;
  END PROCESS intdelay_68_process;


  dout_im_v_3 <= signed(dout_im_v_signed(3));

  intdelay_69_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg4 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg4 <= dout_im_v_3;
      END IF;
    END IF;
  END PROCESS intdelay_69_process;


  dout_im_v_4 <= signed(dout_im_v_signed(4));

  intdelay_70_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg5 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg5 <= dout_im_v_4;
      END IF;
    END IF;
  END PROCESS intdelay_70_process;


  dout_im_v_5 <= signed(dout_im_v_signed(5));

  intdelay_71_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg6 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg6 <= dout_im_v_5;
      END IF;
    END IF;
  END PROCESS intdelay_71_process;


  dout_im_v_6 <= signed(dout_im_v_signed(6));

  intdelay_72_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg7 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg7 <= dout_im_v_6;
      END IF;
    END IF;
  END PROCESS intdelay_72_process;


  dout_im_v_7 <= signed(dout_im_v_signed(7));

  intdelay_73_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg8 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg8 <= dout_im_v_7;
      END IF;
    END IF;
  END PROCESS intdelay_73_process;


  dout_im_v_8 <= signed(dout_im_v_signed(8));

  intdelay_74_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg9 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg9 <= dout_im_v_8;
      END IF;
    END IF;
  END PROCESS intdelay_74_process;


  dout_im_v_9 <= signed(dout_im_v_signed(9));

  intdelay_75_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg10 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg10 <= dout_im_v_9;
      END IF;
    END IF;
  END PROCESS intdelay_75_process;


  dout_im_v_10 <= signed(dout_im_v_signed(10));

  intdelay_76_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg11 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg11 <= dout_im_v_10;
      END IF;
    END IF;
  END PROCESS intdelay_76_process;


  dout_im_v_11 <= signed(dout_im_v_signed(11));

  intdelay_77_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg12 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg12 <= dout_im_v_11;
      END IF;
    END IF;
  END PROCESS intdelay_77_process;


  dout_im_v_12 <= signed(dout_im_v_signed(12));

  intdelay_78_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg13 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg13 <= dout_im_v_12;
      END IF;
    END IF;
  END PROCESS intdelay_78_process;


  dout_im_v_13 <= signed(dout_im_v_signed(13));

  intdelay_79_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg14 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg14 <= dout_im_v_13;
      END IF;
    END IF;
  END PROCESS intdelay_79_process;


  dout_im_v_14 <= signed(dout_im_v_signed(14));

  intdelay_80_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg15 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg15 <= dout_im_v_14;
      END IF;
    END IF;
  END PROCESS intdelay_80_process;


  dout_im_v_15 <= signed(dout_im_v_signed(15));

  intdelay_81_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg16 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg16 <= dout_im_v_15;
      END IF;
    END IF;
  END PROCESS intdelay_81_process;


  dout_im_v_16 <= signed(dout_im_v_signed(16));

  intdelay_82_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg17 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg17 <= dout_im_v_16;
      END IF;
    END IF;
  END PROCESS intdelay_82_process;


  dout_im_v_17 <= signed(dout_im_v_signed(17));

  intdelay_83_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg18 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg18 <= dout_im_v_17;
      END IF;
    END IF;
  END PROCESS intdelay_83_process;


  dout_im_v_18 <= signed(dout_im_v_signed(18));

  intdelay_84_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg19 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg19 <= dout_im_v_18;
      END IF;
    END IF;
  END PROCESS intdelay_84_process;


  dout_im_v_19 <= signed(dout_im_v_signed(19));

  intdelay_85_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg20 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg20 <= dout_im_v_19;
      END IF;
    END IF;
  END PROCESS intdelay_85_process;


  dout_im_v_20 <= signed(dout_im_v_signed(20));

  intdelay_86_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg21 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg21 <= dout_im_v_20;
      END IF;
    END IF;
  END PROCESS intdelay_86_process;


  dout_im_v_21 <= signed(dout_im_v_signed(21));

  intdelay_87_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg22 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg22 <= dout_im_v_21;
      END IF;
    END IF;
  END PROCESS intdelay_87_process;


  dout_im_v_22 <= signed(dout_im_v_signed(22));

  intdelay_88_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg23 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg23 <= dout_im_v_22;
      END IF;
    END IF;
  END PROCESS intdelay_88_process;


  dout_im_v_23 <= signed(dout_im_v_signed(23));

  intdelay_89_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg24 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg24 <= dout_im_v_23;
      END IF;
    END IF;
  END PROCESS intdelay_89_process;


  dout_im_v_24 <= signed(dout_im_v_signed(24));

  intdelay_90_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg25 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg25 <= dout_im_v_24;
      END IF;
    END IF;
  END PROCESS intdelay_90_process;


  dout_im_v_25 <= signed(dout_im_v_signed(25));

  intdelay_91_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg26 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg26 <= dout_im_v_25;
      END IF;
    END IF;
  END PROCESS intdelay_91_process;


  dout_im_v_26 <= signed(dout_im_v_signed(26));

  intdelay_92_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg27 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg27 <= dout_im_v_26;
      END IF;
    END IF;
  END PROCESS intdelay_92_process;


  dout_im_v_27 <= signed(dout_im_v_signed(27));

  intdelay_93_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg28 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg28 <= dout_im_v_27;
      END IF;
    END IF;
  END PROCESS intdelay_93_process;


  dout_im_v_28 <= signed(dout_im_v_signed(28));

  intdelay_94_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg29 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg29 <= dout_im_v_28;
      END IF;
    END IF;
  END PROCESS intdelay_94_process;


  dout_im_v_29 <= signed(dout_im_v_signed(29));

  intdelay_95_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg30 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg30 <= dout_im_v_29;
      END IF;
    END IF;
  END PROCESS intdelay_95_process;


  dout_im_v_30 <= signed(dout_im_v_signed(30));

  intdelay_96_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg31 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg31 <= dout_im_v_30;
      END IF;
    END IF;
  END PROCESS intdelay_96_process;


  dout_im_v_31 <= signed(dout_im_v_signed(31));

  intdelay_97_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg32 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg32 <= dout_im_v_31;
      END IF;
    END IF;
  END PROCESS intdelay_97_process;


  dout_im_v_32 <= signed(dout_im_v_signed(32));

  intdelay_98_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg33 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg33 <= dout_im_v_32;
      END IF;
    END IF;
  END PROCESS intdelay_98_process;


  dout_im_v_33 <= signed(dout_im_v_signed(33));

  intdelay_99_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg34 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg34 <= dout_im_v_33;
      END IF;
    END IF;
  END PROCESS intdelay_99_process;


  dout_im_v_34 <= signed(dout_im_v_signed(34));

  intdelay_100_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg35 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg35 <= dout_im_v_34;
      END IF;
    END IF;
  END PROCESS intdelay_100_process;


  dout_im_v_35 <= signed(dout_im_v_signed(35));

  intdelay_101_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg36 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg36 <= dout_im_v_35;
      END IF;
    END IF;
  END PROCESS intdelay_101_process;


  dout_im_v_36 <= signed(dout_im_v_signed(36));

  intdelay_102_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg37 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg37 <= dout_im_v_36;
      END IF;
    END IF;
  END PROCESS intdelay_102_process;


  dout_im_v_37 <= signed(dout_im_v_signed(37));

  intdelay_103_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg38 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg38 <= dout_im_v_37;
      END IF;
    END IF;
  END PROCESS intdelay_103_process;


  dout_im_v_38 <= signed(dout_im_v_signed(38));

  intdelay_104_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg39 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg39 <= dout_im_v_38;
      END IF;
    END IF;
  END PROCESS intdelay_104_process;


  dout_im_v_39 <= signed(dout_im_v_signed(39));

  intdelay_105_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg40 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg40 <= dout_im_v_39;
      END IF;
    END IF;
  END PROCESS intdelay_105_process;


  dout_im_v_40 <= signed(dout_im_v_signed(40));

  intdelay_106_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg41 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg41 <= dout_im_v_40;
      END IF;
    END IF;
  END PROCESS intdelay_106_process;


  dout_im_v_41 <= signed(dout_im_v_signed(41));

  intdelay_107_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg42 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg42 <= dout_im_v_41;
      END IF;
    END IF;
  END PROCESS intdelay_107_process;


  dout_im_v_42 <= signed(dout_im_v_signed(42));

  intdelay_108_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg43 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg43 <= dout_im_v_42;
      END IF;
    END IF;
  END PROCESS intdelay_108_process;


  dout_im_v_43 <= signed(dout_im_v_signed(43));

  intdelay_109_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg44 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg44 <= dout_im_v_43;
      END IF;
    END IF;
  END PROCESS intdelay_109_process;


  dout_im_v_44 <= signed(dout_im_v_signed(44));

  intdelay_110_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg45 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg45 <= dout_im_v_44;
      END IF;
    END IF;
  END PROCESS intdelay_110_process;


  dout_im_v_45 <= signed(dout_im_v_signed(45));

  intdelay_111_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg46 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg46 <= dout_im_v_45;
      END IF;
    END IF;
  END PROCESS intdelay_111_process;


  dout_im_v_46 <= signed(dout_im_v_signed(46));

  intdelay_112_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg47 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg47 <= dout_im_v_46;
      END IF;
    END IF;
  END PROCESS intdelay_112_process;


  dout_im_v_47 <= signed(dout_im_v_signed(47));

  intdelay_113_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg48 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg48 <= dout_im_v_47;
      END IF;
    END IF;
  END PROCESS intdelay_113_process;


  dout_im_v_48 <= signed(dout_im_v_signed(48));

  intdelay_114_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg49 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg49 <= dout_im_v_48;
      END IF;
    END IF;
  END PROCESS intdelay_114_process;


  dout_im_v_49 <= signed(dout_im_v_signed(49));

  intdelay_115_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg50 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg50 <= dout_im_v_49;
      END IF;
    END IF;
  END PROCESS intdelay_115_process;


  dout_im_v_50 <= signed(dout_im_v_signed(50));

  intdelay_116_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg51 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg51 <= dout_im_v_50;
      END IF;
    END IF;
  END PROCESS intdelay_116_process;


  dout_im_v_51 <= signed(dout_im_v_signed(51));

  intdelay_117_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg52 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg52 <= dout_im_v_51;
      END IF;
    END IF;
  END PROCESS intdelay_117_process;


  dout_im_v_52 <= signed(dout_im_v_signed(52));

  intdelay_118_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg53 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg53 <= dout_im_v_52;
      END IF;
    END IF;
  END PROCESS intdelay_118_process;


  dout_im_v_53 <= signed(dout_im_v_signed(53));

  intdelay_119_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg54 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg54 <= dout_im_v_53;
      END IF;
    END IF;
  END PROCESS intdelay_119_process;


  dout_im_v_54 <= signed(dout_im_v_signed(54));

  intdelay_120_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg55 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg55 <= dout_im_v_54;
      END IF;
    END IF;
  END PROCESS intdelay_120_process;


  dout_im_v_55 <= signed(dout_im_v_signed(55));

  intdelay_121_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg56 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg56 <= dout_im_v_55;
      END IF;
    END IF;
  END PROCESS intdelay_121_process;


  dout_im_v_56 <= signed(dout_im_v_signed(56));

  intdelay_122_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg57 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg57 <= dout_im_v_56;
      END IF;
    END IF;
  END PROCESS intdelay_122_process;


  dout_im_v_57 <= signed(dout_im_v_signed(57));

  intdelay_123_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg58 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg58 <= dout_im_v_57;
      END IF;
    END IF;
  END PROCESS intdelay_123_process;


  dout_im_v_58 <= signed(dout_im_v_signed(58));

  intdelay_124_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg59 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg59 <= dout_im_v_58;
      END IF;
    END IF;
  END PROCESS intdelay_124_process;


  dout_im_v_59 <= signed(dout_im_v_signed(59));

  intdelay_125_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg60 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg60 <= dout_im_v_59;
      END IF;
    END IF;
  END PROCESS intdelay_125_process;


  dout_im_v_60 <= signed(dout_im_v_signed(60));

  intdelay_126_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg61 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg61 <= dout_im_v_60;
      END IF;
    END IF;
  END PROCESS intdelay_126_process;


  dout_im_v_61 <= signed(dout_im_v_signed(61));

  intdelay_127_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg62 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg62 <= dout_im_v_61;
      END IF;
    END IF;
  END PROCESS intdelay_127_process;


  dout_im_v_62 <= signed(dout_im_v_signed(62));

  intdelay_128_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg63 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg63 <= dout_im_v_62;
      END IF;
    END IF;
  END PROCESS intdelay_128_process;


  dout_im_v_63 <= signed(dout_im_v_signed(63));

  intdelay_129_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      din_im_reg64 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        din_im_reg64 <= dout_im_v_63;
      END IF;
    END IF;
  END PROCESS intdelay_129_process;


  
  memIn_im <= din_im_reg1 WHEN MUXSel = to_unsigned(16#00#, 6) ELSE
      din_im_reg2 WHEN MUXSel = to_unsigned(16#01#, 6) ELSE
      din_im_reg3 WHEN MUXSel = to_unsigned(16#02#, 6) ELSE
      din_im_reg4 WHEN MUXSel = to_unsigned(16#03#, 6) ELSE
      din_im_reg5 WHEN MUXSel = to_unsigned(16#04#, 6) ELSE
      din_im_reg6 WHEN MUXSel = to_unsigned(16#05#, 6) ELSE
      din_im_reg7 WHEN MUXSel = to_unsigned(16#06#, 6) ELSE
      din_im_reg8 WHEN MUXSel = to_unsigned(16#07#, 6) ELSE
      din_im_reg9 WHEN MUXSel = to_unsigned(16#08#, 6) ELSE
      din_im_reg10 WHEN MUXSel = to_unsigned(16#09#, 6) ELSE
      din_im_reg11 WHEN MUXSel = to_unsigned(16#0A#, 6) ELSE
      din_im_reg12 WHEN MUXSel = to_unsigned(16#0B#, 6) ELSE
      din_im_reg13 WHEN MUXSel = to_unsigned(16#0C#, 6) ELSE
      din_im_reg14 WHEN MUXSel = to_unsigned(16#0D#, 6) ELSE
      din_im_reg15 WHEN MUXSel = to_unsigned(16#0E#, 6) ELSE
      din_im_reg16 WHEN MUXSel = to_unsigned(16#0F#, 6) ELSE
      din_im_reg17 WHEN MUXSel = to_unsigned(16#10#, 6) ELSE
      din_im_reg18 WHEN MUXSel = to_unsigned(16#11#, 6) ELSE
      din_im_reg19 WHEN MUXSel = to_unsigned(16#12#, 6) ELSE
      din_im_reg20 WHEN MUXSel = to_unsigned(16#13#, 6) ELSE
      din_im_reg21 WHEN MUXSel = to_unsigned(16#14#, 6) ELSE
      din_im_reg22 WHEN MUXSel = to_unsigned(16#15#, 6) ELSE
      din_im_reg23 WHEN MUXSel = to_unsigned(16#16#, 6) ELSE
      din_im_reg24 WHEN MUXSel = to_unsigned(16#17#, 6) ELSE
      din_im_reg25 WHEN MUXSel = to_unsigned(16#18#, 6) ELSE
      din_im_reg26 WHEN MUXSel = to_unsigned(16#19#, 6) ELSE
      din_im_reg27 WHEN MUXSel = to_unsigned(16#1A#, 6) ELSE
      din_im_reg28 WHEN MUXSel = to_unsigned(16#1B#, 6) ELSE
      din_im_reg29 WHEN MUXSel = to_unsigned(16#1C#, 6) ELSE
      din_im_reg30 WHEN MUXSel = to_unsigned(16#1D#, 6) ELSE
      din_im_reg31 WHEN MUXSel = to_unsigned(16#1E#, 6) ELSE
      din_im_reg32 WHEN MUXSel = to_unsigned(16#1F#, 6) ELSE
      din_im_reg33 WHEN MUXSel = to_unsigned(16#20#, 6) ELSE
      din_im_reg34 WHEN MUXSel = to_unsigned(16#21#, 6) ELSE
      din_im_reg35 WHEN MUXSel = to_unsigned(16#22#, 6) ELSE
      din_im_reg36 WHEN MUXSel = to_unsigned(16#23#, 6) ELSE
      din_im_reg37 WHEN MUXSel = to_unsigned(16#24#, 6) ELSE
      din_im_reg38 WHEN MUXSel = to_unsigned(16#25#, 6) ELSE
      din_im_reg39 WHEN MUXSel = to_unsigned(16#26#, 6) ELSE
      din_im_reg40 WHEN MUXSel = to_unsigned(16#27#, 6) ELSE
      din_im_reg41 WHEN MUXSel = to_unsigned(16#28#, 6) ELSE
      din_im_reg42 WHEN MUXSel = to_unsigned(16#29#, 6) ELSE
      din_im_reg43 WHEN MUXSel = to_unsigned(16#2A#, 6) ELSE
      din_im_reg44 WHEN MUXSel = to_unsigned(16#2B#, 6) ELSE
      din_im_reg45 WHEN MUXSel = to_unsigned(16#2C#, 6) ELSE
      din_im_reg46 WHEN MUXSel = to_unsigned(16#2D#, 6) ELSE
      din_im_reg47 WHEN MUXSel = to_unsigned(16#2E#, 6) ELSE
      din_im_reg48 WHEN MUXSel = to_unsigned(16#2F#, 6) ELSE
      din_im_reg49 WHEN MUXSel = to_unsigned(16#30#, 6) ELSE
      din_im_reg50 WHEN MUXSel = to_unsigned(16#31#, 6) ELSE
      din_im_reg51 WHEN MUXSel = to_unsigned(16#32#, 6) ELSE
      din_im_reg52 WHEN MUXSel = to_unsigned(16#33#, 6) ELSE
      din_im_reg53 WHEN MUXSel = to_unsigned(16#34#, 6) ELSE
      din_im_reg54 WHEN MUXSel = to_unsigned(16#35#, 6) ELSE
      din_im_reg55 WHEN MUXSel = to_unsigned(16#36#, 6) ELSE
      din_im_reg56 WHEN MUXSel = to_unsigned(16#37#, 6) ELSE
      din_im_reg57 WHEN MUXSel = to_unsigned(16#38#, 6) ELSE
      din_im_reg58 WHEN MUXSel = to_unsigned(16#39#, 6) ELSE
      din_im_reg59 WHEN MUXSel = to_unsigned(16#3A#, 6) ELSE
      din_im_reg60 WHEN MUXSel = to_unsigned(16#3B#, 6) ELSE
      din_im_reg61 WHEN MUXSel = to_unsigned(16#3C#, 6) ELSE
      din_im_reg62 WHEN MUXSel = to_unsigned(16#3D#, 6) ELSE
      din_im_reg63 WHEN MUXSel = to_unsigned(16#3E#, 6) ELSE
      din_im_reg64;

  intdelay_130_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_2(0) <= to_signed(16#0000#, 16);
      intdelay_reg_2(1) <= to_signed(16#0000#, 16);
      intdelay_reg_2(2) <= to_signed(16#0000#, 16);
      intdelay_reg_2(3) <= to_signed(16#0000#, 16);
      intdelay_reg_2(4) <= to_signed(16#0000#, 16);
      intdelay_reg_2(5) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        intdelay_reg_2(0) <= intdelay_reg_next_2(0);
        intdelay_reg_2(1) <= intdelay_reg_next_2(1);
        intdelay_reg_2(2) <= intdelay_reg_next_2(2);
        intdelay_reg_2(3) <= intdelay_reg_next_2(3);
        intdelay_reg_2(4) <= intdelay_reg_next_2(4);
        intdelay_reg_2(5) <= intdelay_reg_next_2(5);
      END IF;
    END IF;
  END PROCESS intdelay_130_process;

  memIn_im_reg <= intdelay_reg_2(5);
  intdelay_reg_next_2(0) <= memIn_im;
  intdelay_reg_next_2(1) <= intdelay_reg_2(0);
  intdelay_reg_next_2(2) <= intdelay_reg_2(1);
  intdelay_reg_next_2(3) <= intdelay_reg_2(2);
  intdelay_reg_next_2(4) <= intdelay_reg_2(3);
  intdelay_reg_next_2(5) <= intdelay_reg_2(4);

  intdelay_131_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_3(0) <= '0';
      intdelay_reg_3(1) <= '0';
      intdelay_reg_3(2) <= '0';
      intdelay_reg_3(3) <= '0';
      intdelay_reg_3(4) <= '0';
      intdelay_reg_3(5) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        intdelay_reg_3(0) <= intdelay_reg_next_3(0);
        intdelay_reg_3(1) <= intdelay_reg_next_3(1);
        intdelay_reg_3(2) <= intdelay_reg_next_3(2);
        intdelay_reg_3(3) <= intdelay_reg_next_3(3);
        intdelay_reg_3(4) <= intdelay_reg_next_3(4);
        intdelay_reg_3(5) <= intdelay_reg_next_3(5);
      END IF;
    END IF;
  END PROCESS intdelay_131_process;

  wrAddr_reg <= intdelay_reg_3(5);
  intdelay_reg_next_3(0) <= wrAddr;
  intdelay_reg_next_3(1) <= intdelay_reg_3(0);
  intdelay_reg_next_3(2) <= intdelay_reg_3(1);
  intdelay_reg_next_3(3) <= intdelay_reg_3(2);
  intdelay_reg_next_3(4) <= intdelay_reg_3(3);
  intdelay_reg_next_3(5) <= intdelay_reg_3(4);

  intdelay_132_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_4(0) <= '0';
      intdelay_reg_4(1) <= '0';
      intdelay_reg_4(2) <= '0';
      intdelay_reg_4(3) <= '0';
      intdelay_reg_4(4) <= '0';
      intdelay_reg_4(5) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        intdelay_reg_4(0) <= intdelay_reg_next_4(0);
        intdelay_reg_4(1) <= intdelay_reg_next_4(1);
        intdelay_reg_4(2) <= intdelay_reg_next_4(2);
        intdelay_reg_4(3) <= intdelay_reg_next_4(3);
        intdelay_reg_4(4) <= intdelay_reg_next_4(4);
        intdelay_reg_4(5) <= intdelay_reg_next_4(5);
      END IF;
    END IF;
  END PROCESS intdelay_132_process;

  wrEnb_reg <= intdelay_reg_4(5);
  intdelay_reg_next_4(0) <= WrEnb;
  intdelay_reg_next_4(1) <= intdelay_reg_4(0);
  intdelay_reg_next_4(2) <= intdelay_reg_4(1);
  intdelay_reg_next_4(3) <= intdelay_reg_4(2);
  intdelay_reg_next_4(4) <= intdelay_reg_4(3);
  intdelay_reg_next_4(5) <= intdelay_reg_4(4);

  -- twoLocationReg_0
  twoLocationReg_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      twoLocationReg_0_MEM_re_0 <= to_signed(16#0000#, 16);
      twoLocationReg_0_MEM_im_0 <= to_signed(16#0000#, 16);
      twoLocationReg_0_MEM_re_1 <= to_signed(16#0000#, 16);
      twoLocationReg_0_MEM_im_1 <= to_signed(16#0000#, 16);
      twoLocationReg_0_dout_re_reg <= to_signed(16#0000#, 16);
      twoLocationReg_0_dout_im_reg <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        twoLocationReg_0_MEM_re_0 <= twoLocationReg_0_MEM_re_0_next;
        twoLocationReg_0_MEM_im_0 <= twoLocationReg_0_MEM_im_0_next;
        twoLocationReg_0_MEM_re_1 <= twoLocationReg_0_MEM_re_1_next;
        twoLocationReg_0_MEM_im_1 <= twoLocationReg_0_MEM_im_1_next;
        twoLocationReg_0_dout_re_reg <= twoLocationReg_0_dout_re_reg_next;
        twoLocationReg_0_dout_im_reg <= twoLocationReg_0_dout_im_reg_next;
      END IF;
    END IF;
  END PROCESS twoLocationReg_0_process;

  twoLocationReg_0_output : PROCESS (memIn_im_reg, memIn_re_reg, rdAddr, twoLocationReg_0_MEM_im_0,
       twoLocationReg_0_MEM_im_1, twoLocationReg_0_MEM_re_0,
       twoLocationReg_0_MEM_re_1, twoLocationReg_0_dout_im_reg,
       twoLocationReg_0_dout_re_reg, wrAddr_reg, wrEnb_reg)
  BEGIN
    twoLocationReg_0_MEM_re_0_next <= twoLocationReg_0_MEM_re_0;
    twoLocationReg_0_MEM_im_0_next <= twoLocationReg_0_MEM_im_0;
    twoLocationReg_0_MEM_re_1_next <= twoLocationReg_0_MEM_re_1;
    twoLocationReg_0_MEM_im_1_next <= twoLocationReg_0_MEM_im_1;
    IF rdAddr = '1' THEN 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_1;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_1;
    ELSE 
      twoLocationReg_0_dout_re_reg_next <= twoLocationReg_0_MEM_re_0;
      twoLocationReg_0_dout_im_reg_next <= twoLocationReg_0_MEM_im_0;
    END IF;
    IF wrEnb_reg = '1' THEN 
      IF wrAddr_reg = '1' THEN 
        twoLocationReg_0_MEM_re_1_next <= memIn_re_reg;
        twoLocationReg_0_MEM_im_1_next <= memIn_im_reg;
      ELSE 
        twoLocationReg_0_MEM_re_0_next <= memIn_re_reg;
        twoLocationReg_0_MEM_im_0_next <= memIn_im_reg;
      END IF;
    END IF;
    memOut_re <= twoLocationReg_0_dout_re_reg;
    memOut_im <= twoLocationReg_0_dout_im_reg;
  END PROCESS twoLocationReg_0_output;


  -- rdAddrGenBitNaturalP
  rdAddrGenBitNaturalP_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rdAddrGenBitNaturalP_addrReg <= '0';
      rdAddrGenBitNaturalP_rdCnt <= '0';
      rdAddrGenBitNaturalP_rdAddrReg <= '0';
      rdAddrGenBitNaturalP_rdOddFrame <= '0';
      rdAddrGenBitNaturalP_vldOutReg <= '0';
      rdAddrGenBitNaturalP_rdState <= '0';
      rdAddrGenBitNaturalP_FFTIdxO <= to_unsigned(16#00#, 7);
      rdAddrGenBitNaturalP_startOutReg <= '0';
      rdAddrGenBitNaturalP_endOutReg <= '0';
      rdAddrGenBitNaturalP_startOutRegDly <= '0';
      rdAddrGenBitNaturalP_endOutRegDly <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_960_0 = '1' THEN
        rdAddrGenBitNaturalP_addrReg <= rdAddrGenBitNaturalP_addrReg_next;
        rdAddrGenBitNaturalP_rdOddFrame <= rdAddrGenBitNaturalP_rdOddFrame_next;
        rdAddrGenBitNaturalP_rdAddrReg <= rdAddrGenBitNaturalP_rdAddrReg_next;
        rdAddrGenBitNaturalP_rdState <= rdAddrGenBitNaturalP_rdState_next;
        rdAddrGenBitNaturalP_vldOutReg <= rdAddrGenBitNaturalP_vldOutReg_next;
        rdAddrGenBitNaturalP_rdCnt <= rdAddrGenBitNaturalP_rdCnt_next;
        rdAddrGenBitNaturalP_FFTIdxO <= rdAddrGenBitNaturalP_FFTIdxO_next;
        rdAddrGenBitNaturalP_startOutReg <= rdAddrGenBitNaturalP_startOutReg_next;
        rdAddrGenBitNaturalP_endOutReg <= rdAddrGenBitNaturalP_endOutReg_next;
        rdAddrGenBitNaturalP_startOutRegDly <= rdAddrGenBitNaturalP_startOutRegDly_next;
        rdAddrGenBitNaturalP_endOutRegDly <= rdAddrGenBitNaturalP_endOutRegDly_next;
      END IF;
    END IF;
  END PROCESS rdAddrGenBitNaturalP_process;

  rdAddrGenBitNaturalP_output : PROCESS (memOut_im, memOut_re, rdAddrGenBitNaturalP_FFTIdxO,
       rdAddrGenBitNaturalP_addrReg, rdAddrGenBitNaturalP_endOutReg,
       rdAddrGenBitNaturalP_endOutRegDly, rdAddrGenBitNaturalP_rdAddrReg,
       rdAddrGenBitNaturalP_rdCnt, rdAddrGenBitNaturalP_rdOddFrame,
       rdAddrGenBitNaturalP_rdState, rdAddrGenBitNaturalP_startOutReg,
       rdAddrGenBitNaturalP_startOutRegDly, rdAddrGenBitNaturalP_vldOutReg,
       sampleCntDly)
    VARIABLE t_0 : unsigned(6 DOWNTO 0);
    VARIABLE add_cast1 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp1 : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_0 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_0 : unsigned(1 DOWNTO 0);
    VARIABLE add_cast_1 : unsigned(1 DOWNTO 0);
    VARIABLE add_temp_1 : unsigned(1 DOWNTO 0);
  BEGIN
    t_0 := to_unsigned(16#00#, 7);
    add_temp1 := to_unsigned(16#0#, 2);
    add_temp_0 := to_unsigned(16#0#, 2);
    add_temp_1 := to_unsigned(16#0#, 2);
    add_cast_0 := to_unsigned(16#0#, 2);
    add_cast_1 := to_unsigned(16#0#, 2);
    add_cast1 := to_unsigned(16#0#, 2);
    rdAddrGenBitNaturalP_addrReg_next <= rdAddrGenBitNaturalP_addrReg;
    rdAddrGenBitNaturalP_FFTIdxO_next <= rdAddrGenBitNaturalP_FFTIdxO;
    rdAddrGenBitNaturalP_rdOddFrame_next <= rdAddrGenBitNaturalP_rdOddFrame;
    rdAddrGenBitNaturalP_rdState_next <= rdAddrGenBitNaturalP_rdState;
    rdAddrGenBitNaturalP_vldOutReg_next <= rdAddrGenBitNaturalP_vldOutReg;
    rdAddrGenBitNaturalP_rdCnt_next <= rdAddrGenBitNaturalP_rdCnt;
    rdAddrGenBitNaturalP_startOutReg_next <= rdAddrGenBitNaturalP_startOutReg;
    rdAddrGenBitNaturalP_endOutReg_next <= rdAddrGenBitNaturalP_endOutReg;
    rdAddrGenBitNaturalP_startOutRegDly_next <= rdAddrGenBitNaturalP_startOutReg;
    rdAddrGenBitNaturalP_endOutRegDly_next <= rdAddrGenBitNaturalP_endOutReg;
    IF rdAddrGenBitNaturalP_rdOddFrame = '1' THEN 
      t_0 := unsigned'(rdAddrGenBitNaturalP_FFTIdxO(0) & rdAddrGenBitNaturalP_FFTIdxO(1) & rdAddrGenBitNaturalP_FFTIdxO(2) & rdAddrGenBitNaturalP_FFTIdxO(3) & rdAddrGenBitNaturalP_FFTIdxO(4) & rdAddrGenBitNaturalP_FFTIdxO(5) & rdAddrGenBitNaturalP_FFTIdxO(6));
      rdAddrGenBitNaturalP_rdAddrReg_next <= t_0(6) XOR rdAddrGenBitNaturalP_addrReg;
    ELSE 
      rdAddrGenBitNaturalP_rdAddrReg_next <= rdAddrGenBitNaturalP_addrReg;
    END IF;
    CASE rdAddrGenBitNaturalP_rdState IS
      WHEN '0' =>
        rdAddrGenBitNaturalP_rdState_next <= '0';
        rdAddrGenBitNaturalP_endOutReg_next <= '0';
        rdAddrGenBitNaturalP_rdCnt_next <= '0';
        rdAddrGenBitNaturalP_addrReg_next <= '0';
        rdAddrGenBitNaturalP_vldOutReg_next <= '0';
        rdAddrGenBitNaturalP_startOutReg_next <= '0';
        rdAddrGenBitNaturalP_FFTIdxO_next <= to_unsigned(16#00#, 7);
        IF sampleCntDly = '1' THEN 
          rdAddrGenBitNaturalP_rdState_next <= '1';
          rdAddrGenBitNaturalP_addrReg_next <= '1';
          rdAddrGenBitNaturalP_FFTIdxO_next <= to_unsigned(16#40#, 7);
          rdAddrGenBitNaturalP_startOutReg_next <= '1';
        END IF;
      WHEN '1' =>
        rdAddrGenBitNaturalP_rdState_next <= '1';
        rdAddrGenBitNaturalP_endOutReg_next <= '0';
        rdAddrGenBitNaturalP_startOutReg_next <= '0';
        rdAddrGenBitNaturalP_vldOutReg_next <= '1';
        IF rdAddrGenBitNaturalP_rdCnt = '1' THEN 
          IF sampleCntDly = '1' THEN 
            rdAddrGenBitNaturalP_rdState_next <= '1';
            rdAddrGenBitNaturalP_startOutReg_next <= '1';
            rdAddrGenBitNaturalP_FFTIdxO_next <= rdAddrGenBitNaturalP_FFTIdxO + to_unsigned(16#40#, 7);
            add_cast_0 := '0' & rdAddrGenBitNaturalP_addrReg;
            add_temp_0 := add_cast_0 + to_unsigned(16#1#, 2);
            rdAddrGenBitNaturalP_addrReg_next <= add_temp_0(0);
          ELSE 
            rdAddrGenBitNaturalP_rdState_next <= '0';
            rdAddrGenBitNaturalP_FFTIdxO_next <= to_unsigned(16#00#, 7);
            rdAddrGenBitNaturalP_addrReg_next <= '0';
          END IF;
        ELSE 
          rdAddrGenBitNaturalP_FFTIdxO_next <= rdAddrGenBitNaturalP_FFTIdxO + to_unsigned(16#40#, 7);
          add_cast1 := '0' & rdAddrGenBitNaturalP_addrReg;
          add_temp1 := add_cast1 + to_unsigned(16#1#, 2);
          rdAddrGenBitNaturalP_addrReg_next <= add_temp1(0);
        END IF;
        IF rdAddrGenBitNaturalP_rdCnt = '0' THEN 
          rdAddrGenBitNaturalP_endOutReg_next <= '1';
          rdAddrGenBitNaturalP_rdOddFrame_next <=  NOT rdAddrGenBitNaturalP_rdOddFrame;
        END IF;
        add_cast_1 := '0' & rdAddrGenBitNaturalP_rdCnt;
        add_temp_1 := add_cast_1 + to_unsigned(16#1#, 2);
        rdAddrGenBitNaturalP_rdCnt_next <= add_temp_1(0);
      WHEN OTHERS => 
        NULL;
    END CASE;
    rdAddr <= rdAddrGenBitNaturalP_rdAddrReg;
    dMem_re1_tmp <= memOut_re;
    dMem_im1_tmp <= memOut_im;
    dMem_vld1 <= rdAddrGenBitNaturalP_vldOutReg;
    startOutW <= rdAddrGenBitNaturalP_startOutRegDly;
    endOutW <= rdAddrGenBitNaturalP_endOutRegDly;
  END PROCESS rdAddrGenBitNaturalP_output;


  dMem_re1 <= std_logic_vector(dMem_re1_tmp);

  dMem_im1 <= std_logic_vector(dMem_im1_tmp);

END rtl;

