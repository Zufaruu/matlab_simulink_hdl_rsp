// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\OFDM\Tx_OFDM_Verilog\Tx_OFDM\Transmitter_tc.v
// Created: 2023-06-11 16:01:33
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Transmitter_tc
// Source Path: Transmitter_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb         : identical to clk_enable
// enb_1_1_1   : identical to clk_enable
// enb_1_64_0  : 64x slower than clk with last phase
// enb_1_64_1  : 64x slower than clk with phase 1
// enb_1_4096_0: 4096x slower than clk with last phase
// enb_1_4096_1: 4096x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Transmitter_tc
          (clk,
           reset,
           clk_enable,
           enb,
           enb_1_1_1,
           enb_1_64_0,
           enb_1_64_1,
           enb_1_4096_0,
           enb_1_4096_1);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb;
  output  enb_1_1_1;
  output  enb_1_64_0;
  output  enb_1_64_1;
  output  enb_1_4096_0;
  output  enb_1_4096_1;


  reg [5:0] count64;  // ufix6
  wire comp_0_tmp;
  wire phase_0_tmp;
  reg  phase_0;
  wire enb_1_64_0_1;
  wire comp_1_tmp;
  wire phase_1_tmp;
  reg  phase_1;
  wire enb_1_64_1_1;
  reg [11:0] count4096;  // ufix12
  wire comp_0_tmp_1;
  wire phase_0_tmp_1;
  reg  phase_0_1;
  wire enb_1_4096_0_1;
  wire comp_1_tmp_1;
  wire phase_1_tmp_1;
  reg  phase_1_1;
  wire enb_1_4096_1_1;


  assign enb = clk_enable;

  assign enb_1_1_1 = clk_enable;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 63
  always @(posedge clk or posedge reset)
    begin : counter_64_process
      if (reset == 1'b1) begin
        count64 <= 6'b000001;
      end
      else begin
        if (clk_enable) begin
          count64 <= count64 + 6'b000001;
        end
      end
    end



  assign comp_0_tmp = count64 == 6'b111111;



  assign phase_0_tmp = comp_0_tmp & clk_enable;



  always @(posedge clk or posedge reset)
    begin : phase_delay_process
      if (reset == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end



  assign enb_1_64_0_1 = phase_0 & clk_enable;



  assign enb_1_64_0 = enb_1_64_0_1;

  assign comp_1_tmp = count64 == 6'b000000;



  assign phase_1_tmp = comp_1_tmp & clk_enable;



  always @(posedge clk or posedge reset)
    begin : phase_delay_1_process
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end



  assign enb_1_64_1_1 = phase_1 & clk_enable;



  assign enb_1_64_1 = enb_1_64_1_1;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 4095
  always @(posedge clk or posedge reset)
    begin : counter_4096_process
      if (reset == 1'b1) begin
        count4096 <= 12'b000000000001;
      end
      else begin
        if (clk_enable) begin
          count4096 <= count4096 + 12'b000000000001;
        end
      end
    end



  assign comp_0_tmp_1 = count4096 == 12'b111111111111;



  assign phase_0_tmp_1 = comp_0_tmp_1 & clk_enable;



  always @(posedge clk or posedge reset)
    begin : phase_delay_2_process
      if (reset == 1'b1) begin
        phase_0_1 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0_1 <= phase_0_tmp_1;
        end
      end
    end



  assign enb_1_4096_0_1 = phase_0_1 & clk_enable;



  assign enb_1_4096_0 = enb_1_4096_0_1;

  assign comp_1_tmp_1 = count4096 == 12'b000000000000;



  assign phase_1_tmp_1 = comp_1_tmp_1 & clk_enable;



  always @(posedge clk or posedge reset)
    begin : phase_delay_3_process
      if (reset == 1'b1) begin
        phase_1_1 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1_1 <= phase_1_tmp_1;
        end
      end
    end



  assign enb_1_4096_1_1 = phase_1_1 & clk_enable;



  assign enb_1_4096_1 = enb_1_4096_1_1;

endmodule  // Transmitter_tc

