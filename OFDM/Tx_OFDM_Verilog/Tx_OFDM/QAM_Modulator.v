// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\OFDM\Tx_OFDM_Verilog\Tx_OFDM\QAM_Modulator.v
// Created: 2023-06-11 16:01:44
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: QAM_Modulator
// Source Path: Tx_OFDM/Transmitter/QAM Modulator
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module QAM_Modulator
          (clk,
           reset,
           enb,
           enb_1_64_0,
           enb_1_64_1,
           serial,
           vector_re_0,
           vector_re_1,
           vector_re_2,
           vector_re_3,
           vector_re_4,
           vector_re_5,
           vector_re_6,
           vector_re_7,
           vector_re_8,
           vector_re_9,
           vector_re_10,
           vector_re_11,
           vector_re_12,
           vector_re_13,
           vector_re_14,
           vector_re_15,
           vector_re_16,
           vector_re_17,
           vector_re_18,
           vector_re_19,
           vector_re_20,
           vector_re_21,
           vector_re_22,
           vector_re_23,
           vector_re_24,
           vector_re_25,
           vector_re_26,
           vector_re_27,
           vector_re_28,
           vector_re_29,
           vector_re_30,
           vector_re_31,
           vector_re_32,
           vector_re_33,
           vector_re_34,
           vector_re_35,
           vector_re_36,
           vector_re_37,
           vector_re_38,
           vector_re_39,
           vector_re_40,
           vector_re_41,
           vector_re_42,
           vector_re_43,
           vector_re_44,
           vector_re_45,
           vector_re_46,
           vector_re_47,
           vector_re_48,
           vector_re_49,
           vector_re_50,
           vector_re_51,
           vector_re_52,
           vector_re_53,
           vector_re_54,
           vector_re_55,
           vector_re_56,
           vector_re_57,
           vector_re_58,
           vector_re_59,
           vector_re_60,
           vector_re_61,
           vector_re_62,
           vector_re_63,
           vector_im_0,
           vector_im_1,
           vector_im_2,
           vector_im_3,
           vector_im_4,
           vector_im_5,
           vector_im_6,
           vector_im_7,
           vector_im_8,
           vector_im_9,
           vector_im_10,
           vector_im_11,
           vector_im_12,
           vector_im_13,
           vector_im_14,
           vector_im_15,
           vector_im_16,
           vector_im_17,
           vector_im_18,
           vector_im_19,
           vector_im_20,
           vector_im_21,
           vector_im_22,
           vector_im_23,
           vector_im_24,
           vector_im_25,
           vector_im_26,
           vector_im_27,
           vector_im_28,
           vector_im_29,
           vector_im_30,
           vector_im_31,
           vector_im_32,
           vector_im_33,
           vector_im_34,
           vector_im_35,
           vector_im_36,
           vector_im_37,
           vector_im_38,
           vector_im_39,
           vector_im_40,
           vector_im_41,
           vector_im_42,
           vector_im_43,
           vector_im_44,
           vector_im_45,
           vector_im_46,
           vector_im_47,
           vector_im_48,
           vector_im_49,
           vector_im_50,
           vector_im_51,
           vector_im_52,
           vector_im_53,
           vector_im_54,
           vector_im_55,
           vector_im_56,
           vector_im_57,
           vector_im_58,
           vector_im_59,
           vector_im_60,
           vector_im_61,
           vector_im_62,
           vector_im_63);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_64_0;
  input   enb_1_64_1;
  input   [7:0] serial;  // uint8
  output  signed [15:0] vector_re_0;  // sfix16_En14
  output  signed [15:0] vector_re_1;  // sfix16_En14
  output  signed [15:0] vector_re_2;  // sfix16_En14
  output  signed [15:0] vector_re_3;  // sfix16_En14
  output  signed [15:0] vector_re_4;  // sfix16_En14
  output  signed [15:0] vector_re_5;  // sfix16_En14
  output  signed [15:0] vector_re_6;  // sfix16_En14
  output  signed [15:0] vector_re_7;  // sfix16_En14
  output  signed [15:0] vector_re_8;  // sfix16_En14
  output  signed [15:0] vector_re_9;  // sfix16_En14
  output  signed [15:0] vector_re_10;  // sfix16_En14
  output  signed [15:0] vector_re_11;  // sfix16_En14
  output  signed [15:0] vector_re_12;  // sfix16_En14
  output  signed [15:0] vector_re_13;  // sfix16_En14
  output  signed [15:0] vector_re_14;  // sfix16_En14
  output  signed [15:0] vector_re_15;  // sfix16_En14
  output  signed [15:0] vector_re_16;  // sfix16_En14
  output  signed [15:0] vector_re_17;  // sfix16_En14
  output  signed [15:0] vector_re_18;  // sfix16_En14
  output  signed [15:0] vector_re_19;  // sfix16_En14
  output  signed [15:0] vector_re_20;  // sfix16_En14
  output  signed [15:0] vector_re_21;  // sfix16_En14
  output  signed [15:0] vector_re_22;  // sfix16_En14
  output  signed [15:0] vector_re_23;  // sfix16_En14
  output  signed [15:0] vector_re_24;  // sfix16_En14
  output  signed [15:0] vector_re_25;  // sfix16_En14
  output  signed [15:0] vector_re_26;  // sfix16_En14
  output  signed [15:0] vector_re_27;  // sfix16_En14
  output  signed [15:0] vector_re_28;  // sfix16_En14
  output  signed [15:0] vector_re_29;  // sfix16_En14
  output  signed [15:0] vector_re_30;  // sfix16_En14
  output  signed [15:0] vector_re_31;  // sfix16_En14
  output  signed [15:0] vector_re_32;  // sfix16_En14
  output  signed [15:0] vector_re_33;  // sfix16_En14
  output  signed [15:0] vector_re_34;  // sfix16_En14
  output  signed [15:0] vector_re_35;  // sfix16_En14
  output  signed [15:0] vector_re_36;  // sfix16_En14
  output  signed [15:0] vector_re_37;  // sfix16_En14
  output  signed [15:0] vector_re_38;  // sfix16_En14
  output  signed [15:0] vector_re_39;  // sfix16_En14
  output  signed [15:0] vector_re_40;  // sfix16_En14
  output  signed [15:0] vector_re_41;  // sfix16_En14
  output  signed [15:0] vector_re_42;  // sfix16_En14
  output  signed [15:0] vector_re_43;  // sfix16_En14
  output  signed [15:0] vector_re_44;  // sfix16_En14
  output  signed [15:0] vector_re_45;  // sfix16_En14
  output  signed [15:0] vector_re_46;  // sfix16_En14
  output  signed [15:0] vector_re_47;  // sfix16_En14
  output  signed [15:0] vector_re_48;  // sfix16_En14
  output  signed [15:0] vector_re_49;  // sfix16_En14
  output  signed [15:0] vector_re_50;  // sfix16_En14
  output  signed [15:0] vector_re_51;  // sfix16_En14
  output  signed [15:0] vector_re_52;  // sfix16_En14
  output  signed [15:0] vector_re_53;  // sfix16_En14
  output  signed [15:0] vector_re_54;  // sfix16_En14
  output  signed [15:0] vector_re_55;  // sfix16_En14
  output  signed [15:0] vector_re_56;  // sfix16_En14
  output  signed [15:0] vector_re_57;  // sfix16_En14
  output  signed [15:0] vector_re_58;  // sfix16_En14
  output  signed [15:0] vector_re_59;  // sfix16_En14
  output  signed [15:0] vector_re_60;  // sfix16_En14
  output  signed [15:0] vector_re_61;  // sfix16_En14
  output  signed [15:0] vector_re_62;  // sfix16_En14
  output  signed [15:0] vector_re_63;  // sfix16_En14
  output  signed [15:0] vector_im_0;  // sfix16_En14
  output  signed [15:0] vector_im_1;  // sfix16_En14
  output  signed [15:0] vector_im_2;  // sfix16_En14
  output  signed [15:0] vector_im_3;  // sfix16_En14
  output  signed [15:0] vector_im_4;  // sfix16_En14
  output  signed [15:0] vector_im_5;  // sfix16_En14
  output  signed [15:0] vector_im_6;  // sfix16_En14
  output  signed [15:0] vector_im_7;  // sfix16_En14
  output  signed [15:0] vector_im_8;  // sfix16_En14
  output  signed [15:0] vector_im_9;  // sfix16_En14
  output  signed [15:0] vector_im_10;  // sfix16_En14
  output  signed [15:0] vector_im_11;  // sfix16_En14
  output  signed [15:0] vector_im_12;  // sfix16_En14
  output  signed [15:0] vector_im_13;  // sfix16_En14
  output  signed [15:0] vector_im_14;  // sfix16_En14
  output  signed [15:0] vector_im_15;  // sfix16_En14
  output  signed [15:0] vector_im_16;  // sfix16_En14
  output  signed [15:0] vector_im_17;  // sfix16_En14
  output  signed [15:0] vector_im_18;  // sfix16_En14
  output  signed [15:0] vector_im_19;  // sfix16_En14
  output  signed [15:0] vector_im_20;  // sfix16_En14
  output  signed [15:0] vector_im_21;  // sfix16_En14
  output  signed [15:0] vector_im_22;  // sfix16_En14
  output  signed [15:0] vector_im_23;  // sfix16_En14
  output  signed [15:0] vector_im_24;  // sfix16_En14
  output  signed [15:0] vector_im_25;  // sfix16_En14
  output  signed [15:0] vector_im_26;  // sfix16_En14
  output  signed [15:0] vector_im_27;  // sfix16_En14
  output  signed [15:0] vector_im_28;  // sfix16_En14
  output  signed [15:0] vector_im_29;  // sfix16_En14
  output  signed [15:0] vector_im_30;  // sfix16_En14
  output  signed [15:0] vector_im_31;  // sfix16_En14
  output  signed [15:0] vector_im_32;  // sfix16_En14
  output  signed [15:0] vector_im_33;  // sfix16_En14
  output  signed [15:0] vector_im_34;  // sfix16_En14
  output  signed [15:0] vector_im_35;  // sfix16_En14
  output  signed [15:0] vector_im_36;  // sfix16_En14
  output  signed [15:0] vector_im_37;  // sfix16_En14
  output  signed [15:0] vector_im_38;  // sfix16_En14
  output  signed [15:0] vector_im_39;  // sfix16_En14
  output  signed [15:0] vector_im_40;  // sfix16_En14
  output  signed [15:0] vector_im_41;  // sfix16_En14
  output  signed [15:0] vector_im_42;  // sfix16_En14
  output  signed [15:0] vector_im_43;  // sfix16_En14
  output  signed [15:0] vector_im_44;  // sfix16_En14
  output  signed [15:0] vector_im_45;  // sfix16_En14
  output  signed [15:0] vector_im_46;  // sfix16_En14
  output  signed [15:0] vector_im_47;  // sfix16_En14
  output  signed [15:0] vector_im_48;  // sfix16_En14
  output  signed [15:0] vector_im_49;  // sfix16_En14
  output  signed [15:0] vector_im_50;  // sfix16_En14
  output  signed [15:0] vector_im_51;  // sfix16_En14
  output  signed [15:0] vector_im_52;  // sfix16_En14
  output  signed [15:0] vector_im_53;  // sfix16_En14
  output  signed [15:0] vector_im_54;  // sfix16_En14
  output  signed [15:0] vector_im_55;  // sfix16_En14
  output  signed [15:0] vector_im_56;  // sfix16_En14
  output  signed [15:0] vector_im_57;  // sfix16_En14
  output  signed [15:0] vector_im_58;  // sfix16_En14
  output  signed [15:0] vector_im_59;  // sfix16_En14
  output  signed [15:0] vector_im_60;  // sfix16_En14
  output  signed [15:0] vector_im_61;  // sfix16_En14
  output  signed [15:0] vector_im_62;  // sfix16_En14
  output  signed [15:0] vector_im_63;  // sfix16_En14


  wire [3:0] constellationLUTaddress;  // ufix4
  wire signed [15:0] alpha_table_data_re [0:15];  // sfix16_En13 [16]
  wire signed [15:0] alpha_table_data_im [0:15];  // sfix16_En13 [16]
  wire signed [15:0] Rectangular_QAM_Modulator_Baseband_out1_re;  // sfix16_En13
  wire signed [15:0] Rectangular_QAM_Modulator_Baseband_out1_im;  // sfix16_En13
  wire signed [15:0] buffer_re_0;  // sfix16_En14
  wire signed [15:0] buffer_re_1;  // sfix16_En14
  wire signed [15:0] buffer_re_2;  // sfix16_En14
  wire signed [15:0] buffer_re_3;  // sfix16_En14
  wire signed [15:0] buffer_re_4;  // sfix16_En14
  wire signed [15:0] buffer_re_5;  // sfix16_En14
  wire signed [15:0] buffer_re_6;  // sfix16_En14
  wire signed [15:0] buffer_re_7;  // sfix16_En14
  wire signed [15:0] buffer_re_8;  // sfix16_En14
  wire signed [15:0] buffer_re_9;  // sfix16_En14
  wire signed [15:0] buffer_re_10;  // sfix16_En14
  wire signed [15:0] buffer_re_11;  // sfix16_En14
  wire signed [15:0] buffer_re_12;  // sfix16_En14
  wire signed [15:0] buffer_re_13;  // sfix16_En14
  wire signed [15:0] buffer_re_14;  // sfix16_En14
  wire signed [15:0] buffer_re_15;  // sfix16_En14
  wire signed [15:0] buffer_re_16;  // sfix16_En14
  wire signed [15:0] buffer_re_17;  // sfix16_En14
  wire signed [15:0] buffer_re_18;  // sfix16_En14
  wire signed [15:0] buffer_re_19;  // sfix16_En14
  wire signed [15:0] buffer_re_20;  // sfix16_En14
  wire signed [15:0] buffer_re_21;  // sfix16_En14
  wire signed [15:0] buffer_re_22;  // sfix16_En14
  wire signed [15:0] buffer_re_23;  // sfix16_En14
  wire signed [15:0] buffer_re_24;  // sfix16_En14
  wire signed [15:0] buffer_re_25;  // sfix16_En14
  wire signed [15:0] buffer_re_26;  // sfix16_En14
  wire signed [15:0] buffer_re_27;  // sfix16_En14
  wire signed [15:0] buffer_re_28;  // sfix16_En14
  wire signed [15:0] buffer_re_29;  // sfix16_En14
  wire signed [15:0] buffer_re_30;  // sfix16_En14
  wire signed [15:0] buffer_re_31;  // sfix16_En14
  wire signed [15:0] buffer_re_32;  // sfix16_En14
  wire signed [15:0] buffer_re_33;  // sfix16_En14
  wire signed [15:0] buffer_re_34;  // sfix16_En14
  wire signed [15:0] buffer_re_35;  // sfix16_En14
  wire signed [15:0] buffer_re_36;  // sfix16_En14
  wire signed [15:0] buffer_re_37;  // sfix16_En14
  wire signed [15:0] buffer_re_38;  // sfix16_En14
  wire signed [15:0] buffer_re_39;  // sfix16_En14
  wire signed [15:0] buffer_re_40;  // sfix16_En14
  wire signed [15:0] buffer_re_41;  // sfix16_En14
  wire signed [15:0] buffer_re_42;  // sfix16_En14
  wire signed [15:0] buffer_re_43;  // sfix16_En14
  wire signed [15:0] buffer_re_44;  // sfix16_En14
  wire signed [15:0] buffer_re_45;  // sfix16_En14
  wire signed [15:0] buffer_re_46;  // sfix16_En14
  wire signed [15:0] buffer_re_47;  // sfix16_En14
  wire signed [15:0] buffer_re_48;  // sfix16_En14
  wire signed [15:0] buffer_re_49;  // sfix16_En14
  wire signed [15:0] buffer_re_50;  // sfix16_En14
  wire signed [15:0] buffer_re_51;  // sfix16_En14
  wire signed [15:0] buffer_re_52;  // sfix16_En14
  wire signed [15:0] buffer_re_53;  // sfix16_En14
  wire signed [15:0] buffer_re_54;  // sfix16_En14
  wire signed [15:0] buffer_re_55;  // sfix16_En14
  wire signed [15:0] buffer_re_56;  // sfix16_En14
  wire signed [15:0] buffer_re_57;  // sfix16_En14
  wire signed [15:0] buffer_re_58;  // sfix16_En14
  wire signed [15:0] buffer_re_59;  // sfix16_En14
  wire signed [15:0] buffer_re_60;  // sfix16_En14
  wire signed [15:0] buffer_re_61;  // sfix16_En14
  wire signed [15:0] buffer_re_62;  // sfix16_En14
  wire signed [15:0] buffer_re_63;  // sfix16_En14
  wire signed [15:0] buffer_im_0;  // sfix16_En14
  wire signed [15:0] buffer_im_1;  // sfix16_En14
  wire signed [15:0] buffer_im_2;  // sfix16_En14
  wire signed [15:0] buffer_im_3;  // sfix16_En14
  wire signed [15:0] buffer_im_4;  // sfix16_En14
  wire signed [15:0] buffer_im_5;  // sfix16_En14
  wire signed [15:0] buffer_im_6;  // sfix16_En14
  wire signed [15:0] buffer_im_7;  // sfix16_En14
  wire signed [15:0] buffer_im_8;  // sfix16_En14
  wire signed [15:0] buffer_im_9;  // sfix16_En14
  wire signed [15:0] buffer_im_10;  // sfix16_En14
  wire signed [15:0] buffer_im_11;  // sfix16_En14
  wire signed [15:0] buffer_im_12;  // sfix16_En14
  wire signed [15:0] buffer_im_13;  // sfix16_En14
  wire signed [15:0] buffer_im_14;  // sfix16_En14
  wire signed [15:0] buffer_im_15;  // sfix16_En14
  wire signed [15:0] buffer_im_16;  // sfix16_En14
  wire signed [15:0] buffer_im_17;  // sfix16_En14
  wire signed [15:0] buffer_im_18;  // sfix16_En14
  wire signed [15:0] buffer_im_19;  // sfix16_En14
  wire signed [15:0] buffer_im_20;  // sfix16_En14
  wire signed [15:0] buffer_im_21;  // sfix16_En14
  wire signed [15:0] buffer_im_22;  // sfix16_En14
  wire signed [15:0] buffer_im_23;  // sfix16_En14
  wire signed [15:0] buffer_im_24;  // sfix16_En14
  wire signed [15:0] buffer_im_25;  // sfix16_En14
  wire signed [15:0] buffer_im_26;  // sfix16_En14
  wire signed [15:0] buffer_im_27;  // sfix16_En14
  wire signed [15:0] buffer_im_28;  // sfix16_En14
  wire signed [15:0] buffer_im_29;  // sfix16_En14
  wire signed [15:0] buffer_im_30;  // sfix16_En14
  wire signed [15:0] buffer_im_31;  // sfix16_En14
  wire signed [15:0] buffer_im_32;  // sfix16_En14
  wire signed [15:0] buffer_im_33;  // sfix16_En14
  wire signed [15:0] buffer_im_34;  // sfix16_En14
  wire signed [15:0] buffer_im_35;  // sfix16_En14
  wire signed [15:0] buffer_im_36;  // sfix16_En14
  wire signed [15:0] buffer_im_37;  // sfix16_En14
  wire signed [15:0] buffer_im_38;  // sfix16_En14
  wire signed [15:0] buffer_im_39;  // sfix16_En14
  wire signed [15:0] buffer_im_40;  // sfix16_En14
  wire signed [15:0] buffer_im_41;  // sfix16_En14
  wire signed [15:0] buffer_im_42;  // sfix16_En14
  wire signed [15:0] buffer_im_43;  // sfix16_En14
  wire signed [15:0] buffer_im_44;  // sfix16_En14
  wire signed [15:0] buffer_im_45;  // sfix16_En14
  wire signed [15:0] buffer_im_46;  // sfix16_En14
  wire signed [15:0] buffer_im_47;  // sfix16_En14
  wire signed [15:0] buffer_im_48;  // sfix16_En14
  wire signed [15:0] buffer_im_49;  // sfix16_En14
  wire signed [15:0] buffer_im_50;  // sfix16_En14
  wire signed [15:0] buffer_im_51;  // sfix16_En14
  wire signed [15:0] buffer_im_52;  // sfix16_En14
  wire signed [15:0] buffer_im_53;  // sfix16_En14
  wire signed [15:0] buffer_im_54;  // sfix16_En14
  wire signed [15:0] buffer_im_55;  // sfix16_En14
  wire signed [15:0] buffer_im_56;  // sfix16_En14
  wire signed [15:0] buffer_im_57;  // sfix16_En14
  wire signed [15:0] buffer_im_58;  // sfix16_En14
  wire signed [15:0] buffer_im_59;  // sfix16_En14
  wire signed [15:0] buffer_im_60;  // sfix16_En14
  wire signed [15:0] buffer_im_61;  // sfix16_En14
  wire signed [15:0] buffer_im_62;  // sfix16_En14
  wire signed [15:0] buffer_im_63;  // sfix16_En14

  // When changing N, change the vector init size to N manually


  assign constellationLUTaddress = serial[3:0];



  assign alpha_table_data_re[0] = 16'sb1010000000000000;
  assign alpha_table_data_re[1] = 16'sb1010000000000000;
  assign alpha_table_data_re[2] = 16'sb1010000000000000;
  assign alpha_table_data_re[3] = 16'sb1010000000000000;
  assign alpha_table_data_re[4] = 16'sb1110000000000000;
  assign alpha_table_data_re[5] = 16'sb1110000000000000;
  assign alpha_table_data_re[6] = 16'sb1110000000000000;
  assign alpha_table_data_re[7] = 16'sb1110000000000000;
  assign alpha_table_data_re[8] = 16'sb0110000000000000;
  assign alpha_table_data_re[9] = 16'sb0110000000000000;
  assign alpha_table_data_re[10] = 16'sb0110000000000000;
  assign alpha_table_data_re[11] = 16'sb0110000000000000;
  assign alpha_table_data_re[12] = 16'sb0010000000000000;
  assign alpha_table_data_re[13] = 16'sb0010000000000000;
  assign alpha_table_data_re[14] = 16'sb0010000000000000;
  assign alpha_table_data_re[15] = 16'sb0010000000000000;
  assign alpha_table_data_im[0] = 16'sb0110000000000000;
  assign alpha_table_data_im[1] = 16'sb0010000000000000;
  assign alpha_table_data_im[2] = 16'sb1010000000000000;
  assign alpha_table_data_im[3] = 16'sb1110000000000000;
  assign alpha_table_data_im[4] = 16'sb0110000000000000;
  assign alpha_table_data_im[5] = 16'sb0010000000000000;
  assign alpha_table_data_im[6] = 16'sb1010000000000000;
  assign alpha_table_data_im[7] = 16'sb1110000000000000;
  assign alpha_table_data_im[8] = 16'sb0110000000000000;
  assign alpha_table_data_im[9] = 16'sb0010000000000000;
  assign alpha_table_data_im[10] = 16'sb1010000000000000;
  assign alpha_table_data_im[11] = 16'sb1110000000000000;
  assign alpha_table_data_im[12] = 16'sb0110000000000000;
  assign alpha_table_data_im[13] = 16'sb0010000000000000;
  assign alpha_table_data_im[14] = 16'sb1010000000000000;
  assign alpha_table_data_im[15] = 16'sb1110000000000000;
  assign Rectangular_QAM_Modulator_Baseband_out1_re = alpha_table_data_re[constellationLUTaddress];
  assign Rectangular_QAM_Modulator_Baseband_out1_im = alpha_table_data_im[constellationLUTaddress];



  QAM_Buffer u_QAM_Buffer (.clk(clk),
                           .reset(reset),
                           .enb(enb),
                           .enb_1_64_0(enb_1_64_0),
                           .enb_1_64_1(enb_1_64_1),
                           .scalar_re(Rectangular_QAM_Modulator_Baseband_out1_re),  // sfix16_En13
                           .scalar_im(Rectangular_QAM_Modulator_Baseband_out1_im),  // sfix16_En13
                           .vector_re_0(buffer_re_0),  // sfix16_En14
                           .vector_re_1(buffer_re_1),  // sfix16_En14
                           .vector_re_2(buffer_re_2),  // sfix16_En14
                           .vector_re_3(buffer_re_3),  // sfix16_En14
                           .vector_re_4(buffer_re_4),  // sfix16_En14
                           .vector_re_5(buffer_re_5),  // sfix16_En14
                           .vector_re_6(buffer_re_6),  // sfix16_En14
                           .vector_re_7(buffer_re_7),  // sfix16_En14
                           .vector_re_8(buffer_re_8),  // sfix16_En14
                           .vector_re_9(buffer_re_9),  // sfix16_En14
                           .vector_re_10(buffer_re_10),  // sfix16_En14
                           .vector_re_11(buffer_re_11),  // sfix16_En14
                           .vector_re_12(buffer_re_12),  // sfix16_En14
                           .vector_re_13(buffer_re_13),  // sfix16_En14
                           .vector_re_14(buffer_re_14),  // sfix16_En14
                           .vector_re_15(buffer_re_15),  // sfix16_En14
                           .vector_re_16(buffer_re_16),  // sfix16_En14
                           .vector_re_17(buffer_re_17),  // sfix16_En14
                           .vector_re_18(buffer_re_18),  // sfix16_En14
                           .vector_re_19(buffer_re_19),  // sfix16_En14
                           .vector_re_20(buffer_re_20),  // sfix16_En14
                           .vector_re_21(buffer_re_21),  // sfix16_En14
                           .vector_re_22(buffer_re_22),  // sfix16_En14
                           .vector_re_23(buffer_re_23),  // sfix16_En14
                           .vector_re_24(buffer_re_24),  // sfix16_En14
                           .vector_re_25(buffer_re_25),  // sfix16_En14
                           .vector_re_26(buffer_re_26),  // sfix16_En14
                           .vector_re_27(buffer_re_27),  // sfix16_En14
                           .vector_re_28(buffer_re_28),  // sfix16_En14
                           .vector_re_29(buffer_re_29),  // sfix16_En14
                           .vector_re_30(buffer_re_30),  // sfix16_En14
                           .vector_re_31(buffer_re_31),  // sfix16_En14
                           .vector_re_32(buffer_re_32),  // sfix16_En14
                           .vector_re_33(buffer_re_33),  // sfix16_En14
                           .vector_re_34(buffer_re_34),  // sfix16_En14
                           .vector_re_35(buffer_re_35),  // sfix16_En14
                           .vector_re_36(buffer_re_36),  // sfix16_En14
                           .vector_re_37(buffer_re_37),  // sfix16_En14
                           .vector_re_38(buffer_re_38),  // sfix16_En14
                           .vector_re_39(buffer_re_39),  // sfix16_En14
                           .vector_re_40(buffer_re_40),  // sfix16_En14
                           .vector_re_41(buffer_re_41),  // sfix16_En14
                           .vector_re_42(buffer_re_42),  // sfix16_En14
                           .vector_re_43(buffer_re_43),  // sfix16_En14
                           .vector_re_44(buffer_re_44),  // sfix16_En14
                           .vector_re_45(buffer_re_45),  // sfix16_En14
                           .vector_re_46(buffer_re_46),  // sfix16_En14
                           .vector_re_47(buffer_re_47),  // sfix16_En14
                           .vector_re_48(buffer_re_48),  // sfix16_En14
                           .vector_re_49(buffer_re_49),  // sfix16_En14
                           .vector_re_50(buffer_re_50),  // sfix16_En14
                           .vector_re_51(buffer_re_51),  // sfix16_En14
                           .vector_re_52(buffer_re_52),  // sfix16_En14
                           .vector_re_53(buffer_re_53),  // sfix16_En14
                           .vector_re_54(buffer_re_54),  // sfix16_En14
                           .vector_re_55(buffer_re_55),  // sfix16_En14
                           .vector_re_56(buffer_re_56),  // sfix16_En14
                           .vector_re_57(buffer_re_57),  // sfix16_En14
                           .vector_re_58(buffer_re_58),  // sfix16_En14
                           .vector_re_59(buffer_re_59),  // sfix16_En14
                           .vector_re_60(buffer_re_60),  // sfix16_En14
                           .vector_re_61(buffer_re_61),  // sfix16_En14
                           .vector_re_62(buffer_re_62),  // sfix16_En14
                           .vector_re_63(buffer_re_63),  // sfix16_En14
                           .vector_im_0(buffer_im_0),  // sfix16_En14
                           .vector_im_1(buffer_im_1),  // sfix16_En14
                           .vector_im_2(buffer_im_2),  // sfix16_En14
                           .vector_im_3(buffer_im_3),  // sfix16_En14
                           .vector_im_4(buffer_im_4),  // sfix16_En14
                           .vector_im_5(buffer_im_5),  // sfix16_En14
                           .vector_im_6(buffer_im_6),  // sfix16_En14
                           .vector_im_7(buffer_im_7),  // sfix16_En14
                           .vector_im_8(buffer_im_8),  // sfix16_En14
                           .vector_im_9(buffer_im_9),  // sfix16_En14
                           .vector_im_10(buffer_im_10),  // sfix16_En14
                           .vector_im_11(buffer_im_11),  // sfix16_En14
                           .vector_im_12(buffer_im_12),  // sfix16_En14
                           .vector_im_13(buffer_im_13),  // sfix16_En14
                           .vector_im_14(buffer_im_14),  // sfix16_En14
                           .vector_im_15(buffer_im_15),  // sfix16_En14
                           .vector_im_16(buffer_im_16),  // sfix16_En14
                           .vector_im_17(buffer_im_17),  // sfix16_En14
                           .vector_im_18(buffer_im_18),  // sfix16_En14
                           .vector_im_19(buffer_im_19),  // sfix16_En14
                           .vector_im_20(buffer_im_20),  // sfix16_En14
                           .vector_im_21(buffer_im_21),  // sfix16_En14
                           .vector_im_22(buffer_im_22),  // sfix16_En14
                           .vector_im_23(buffer_im_23),  // sfix16_En14
                           .vector_im_24(buffer_im_24),  // sfix16_En14
                           .vector_im_25(buffer_im_25),  // sfix16_En14
                           .vector_im_26(buffer_im_26),  // sfix16_En14
                           .vector_im_27(buffer_im_27),  // sfix16_En14
                           .vector_im_28(buffer_im_28),  // sfix16_En14
                           .vector_im_29(buffer_im_29),  // sfix16_En14
                           .vector_im_30(buffer_im_30),  // sfix16_En14
                           .vector_im_31(buffer_im_31),  // sfix16_En14
                           .vector_im_32(buffer_im_32),  // sfix16_En14
                           .vector_im_33(buffer_im_33),  // sfix16_En14
                           .vector_im_34(buffer_im_34),  // sfix16_En14
                           .vector_im_35(buffer_im_35),  // sfix16_En14
                           .vector_im_36(buffer_im_36),  // sfix16_En14
                           .vector_im_37(buffer_im_37),  // sfix16_En14
                           .vector_im_38(buffer_im_38),  // sfix16_En14
                           .vector_im_39(buffer_im_39),  // sfix16_En14
                           .vector_im_40(buffer_im_40),  // sfix16_En14
                           .vector_im_41(buffer_im_41),  // sfix16_En14
                           .vector_im_42(buffer_im_42),  // sfix16_En14
                           .vector_im_43(buffer_im_43),  // sfix16_En14
                           .vector_im_44(buffer_im_44),  // sfix16_En14
                           .vector_im_45(buffer_im_45),  // sfix16_En14
                           .vector_im_46(buffer_im_46),  // sfix16_En14
                           .vector_im_47(buffer_im_47),  // sfix16_En14
                           .vector_im_48(buffer_im_48),  // sfix16_En14
                           .vector_im_49(buffer_im_49),  // sfix16_En14
                           .vector_im_50(buffer_im_50),  // sfix16_En14
                           .vector_im_51(buffer_im_51),  // sfix16_En14
                           .vector_im_52(buffer_im_52),  // sfix16_En14
                           .vector_im_53(buffer_im_53),  // sfix16_En14
                           .vector_im_54(buffer_im_54),  // sfix16_En14
                           .vector_im_55(buffer_im_55),  // sfix16_En14
                           .vector_im_56(buffer_im_56),  // sfix16_En14
                           .vector_im_57(buffer_im_57),  // sfix16_En14
                           .vector_im_58(buffer_im_58),  // sfix16_En14
                           .vector_im_59(buffer_im_59),  // sfix16_En14
                           .vector_im_60(buffer_im_60),  // sfix16_En14
                           .vector_im_61(buffer_im_61),  // sfix16_En14
                           .vector_im_62(buffer_im_62),  // sfix16_En14
                           .vector_im_63(buffer_im_63)  // sfix16_En14
                           );

  assign vector_re_0 = buffer_re_0;

  assign vector_re_1 = buffer_re_1;

  assign vector_re_2 = buffer_re_2;

  assign vector_re_3 = buffer_re_3;

  assign vector_re_4 = buffer_re_4;

  assign vector_re_5 = buffer_re_5;

  assign vector_re_6 = buffer_re_6;

  assign vector_re_7 = buffer_re_7;

  assign vector_re_8 = buffer_re_8;

  assign vector_re_9 = buffer_re_9;

  assign vector_re_10 = buffer_re_10;

  assign vector_re_11 = buffer_re_11;

  assign vector_re_12 = buffer_re_12;

  assign vector_re_13 = buffer_re_13;

  assign vector_re_14 = buffer_re_14;

  assign vector_re_15 = buffer_re_15;

  assign vector_re_16 = buffer_re_16;

  assign vector_re_17 = buffer_re_17;

  assign vector_re_18 = buffer_re_18;

  assign vector_re_19 = buffer_re_19;

  assign vector_re_20 = buffer_re_20;

  assign vector_re_21 = buffer_re_21;

  assign vector_re_22 = buffer_re_22;

  assign vector_re_23 = buffer_re_23;

  assign vector_re_24 = buffer_re_24;

  assign vector_re_25 = buffer_re_25;

  assign vector_re_26 = buffer_re_26;

  assign vector_re_27 = buffer_re_27;

  assign vector_re_28 = buffer_re_28;

  assign vector_re_29 = buffer_re_29;

  assign vector_re_30 = buffer_re_30;

  assign vector_re_31 = buffer_re_31;

  assign vector_re_32 = buffer_re_32;

  assign vector_re_33 = buffer_re_33;

  assign vector_re_34 = buffer_re_34;

  assign vector_re_35 = buffer_re_35;

  assign vector_re_36 = buffer_re_36;

  assign vector_re_37 = buffer_re_37;

  assign vector_re_38 = buffer_re_38;

  assign vector_re_39 = buffer_re_39;

  assign vector_re_40 = buffer_re_40;

  assign vector_re_41 = buffer_re_41;

  assign vector_re_42 = buffer_re_42;

  assign vector_re_43 = buffer_re_43;

  assign vector_re_44 = buffer_re_44;

  assign vector_re_45 = buffer_re_45;

  assign vector_re_46 = buffer_re_46;

  assign vector_re_47 = buffer_re_47;

  assign vector_re_48 = buffer_re_48;

  assign vector_re_49 = buffer_re_49;

  assign vector_re_50 = buffer_re_50;

  assign vector_re_51 = buffer_re_51;

  assign vector_re_52 = buffer_re_52;

  assign vector_re_53 = buffer_re_53;

  assign vector_re_54 = buffer_re_54;

  assign vector_re_55 = buffer_re_55;

  assign vector_re_56 = buffer_re_56;

  assign vector_re_57 = buffer_re_57;

  assign vector_re_58 = buffer_re_58;

  assign vector_re_59 = buffer_re_59;

  assign vector_re_60 = buffer_re_60;

  assign vector_re_61 = buffer_re_61;

  assign vector_re_62 = buffer_re_62;

  assign vector_re_63 = buffer_re_63;

  assign vector_im_0 = buffer_im_0;

  assign vector_im_1 = buffer_im_1;

  assign vector_im_2 = buffer_im_2;

  assign vector_im_3 = buffer_im_3;

  assign vector_im_4 = buffer_im_4;

  assign vector_im_5 = buffer_im_5;

  assign vector_im_6 = buffer_im_6;

  assign vector_im_7 = buffer_im_7;

  assign vector_im_8 = buffer_im_8;

  assign vector_im_9 = buffer_im_9;

  assign vector_im_10 = buffer_im_10;

  assign vector_im_11 = buffer_im_11;

  assign vector_im_12 = buffer_im_12;

  assign vector_im_13 = buffer_im_13;

  assign vector_im_14 = buffer_im_14;

  assign vector_im_15 = buffer_im_15;

  assign vector_im_16 = buffer_im_16;

  assign vector_im_17 = buffer_im_17;

  assign vector_im_18 = buffer_im_18;

  assign vector_im_19 = buffer_im_19;

  assign vector_im_20 = buffer_im_20;

  assign vector_im_21 = buffer_im_21;

  assign vector_im_22 = buffer_im_22;

  assign vector_im_23 = buffer_im_23;

  assign vector_im_24 = buffer_im_24;

  assign vector_im_25 = buffer_im_25;

  assign vector_im_26 = buffer_im_26;

  assign vector_im_27 = buffer_im_27;

  assign vector_im_28 = buffer_im_28;

  assign vector_im_29 = buffer_im_29;

  assign vector_im_30 = buffer_im_30;

  assign vector_im_31 = buffer_im_31;

  assign vector_im_32 = buffer_im_32;

  assign vector_im_33 = buffer_im_33;

  assign vector_im_34 = buffer_im_34;

  assign vector_im_35 = buffer_im_35;

  assign vector_im_36 = buffer_im_36;

  assign vector_im_37 = buffer_im_37;

  assign vector_im_38 = buffer_im_38;

  assign vector_im_39 = buffer_im_39;

  assign vector_im_40 = buffer_im_40;

  assign vector_im_41 = buffer_im_41;

  assign vector_im_42 = buffer_im_42;

  assign vector_im_43 = buffer_im_43;

  assign vector_im_44 = buffer_im_44;

  assign vector_im_45 = buffer_im_45;

  assign vector_im_46 = buffer_im_46;

  assign vector_im_47 = buffer_im_47;

  assign vector_im_48 = buffer_im_48;

  assign vector_im_49 = buffer_im_49;

  assign vector_im_50 = buffer_im_50;

  assign vector_im_51 = buffer_im_51;

  assign vector_im_52 = buffer_im_52;

  assign vector_im_53 = buffer_im_53;

  assign vector_im_54 = buffer_im_54;

  assign vector_im_55 = buffer_im_55;

  assign vector_im_56 = buffer_im_56;

  assign vector_im_57 = buffer_im_57;

  assign vector_im_58 = buffer_im_58;

  assign vector_im_59 = buffer_im_59;

  assign vector_im_60 = buffer_im_60;

  assign vector_im_61 = buffer_im_61;

  assign vector_im_62 = buffer_im_62;

  assign vector_im_63 = buffer_im_63;

endmodule  // QAM_Modulator

