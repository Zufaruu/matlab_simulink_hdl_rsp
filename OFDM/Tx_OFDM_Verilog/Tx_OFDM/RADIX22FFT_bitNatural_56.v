// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\OFDM\Tx_OFDM_Verilog\Tx_OFDM\RADIX22FFT_bitNatural_56.v
// Created: 2023-06-11 16:01:42
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RADIX22FFT_bitNatural_56
// Source Path: dsphdl.IFFT/RADIX22FFT_bitNatural_56
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RADIX22FFT_bitNatural_56
          (clk,
           reset,
           enb_1_4096_0,
           dout_re_v_0,
           dout_re_v_1,
           dout_re_v_2,
           dout_re_v_3,
           dout_re_v_4,
           dout_re_v_5,
           dout_re_v_6,
           dout_re_v_7,
           dout_re_v_8,
           dout_re_v_9,
           dout_re_v_10,
           dout_re_v_11,
           dout_re_v_12,
           dout_re_v_13,
           dout_re_v_14,
           dout_re_v_15,
           dout_re_v_16,
           dout_re_v_17,
           dout_re_v_18,
           dout_re_v_19,
           dout_re_v_20,
           dout_re_v_21,
           dout_re_v_22,
           dout_re_v_23,
           dout_re_v_24,
           dout_re_v_25,
           dout_re_v_26,
           dout_re_v_27,
           dout_re_v_28,
           dout_re_v_29,
           dout_re_v_30,
           dout_re_v_31,
           dout_re_v_32,
           dout_re_v_33,
           dout_re_v_34,
           dout_re_v_35,
           dout_re_v_36,
           dout_re_v_37,
           dout_re_v_38,
           dout_re_v_39,
           dout_re_v_40,
           dout_re_v_41,
           dout_re_v_42,
           dout_re_v_43,
           dout_re_v_44,
           dout_re_v_45,
           dout_re_v_46,
           dout_re_v_47,
           dout_re_v_48,
           dout_re_v_49,
           dout_re_v_50,
           dout_re_v_51,
           dout_re_v_52,
           dout_re_v_53,
           dout_re_v_54,
           dout_re_v_55,
           dout_re_v_56,
           dout_re_v_57,
           dout_re_v_58,
           dout_re_v_59,
           dout_re_v_60,
           dout_re_v_61,
           dout_re_v_62,
           dout_re_v_63,
           dout_im_v_0,
           dout_im_v_1,
           dout_im_v_2,
           dout_im_v_3,
           dout_im_v_4,
           dout_im_v_5,
           dout_im_v_6,
           dout_im_v_7,
           dout_im_v_8,
           dout_im_v_9,
           dout_im_v_10,
           dout_im_v_11,
           dout_im_v_12,
           dout_im_v_13,
           dout_im_v_14,
           dout_im_v_15,
           dout_im_v_16,
           dout_im_v_17,
           dout_im_v_18,
           dout_im_v_19,
           dout_im_v_20,
           dout_im_v_21,
           dout_im_v_22,
           dout_im_v_23,
           dout_im_v_24,
           dout_im_v_25,
           dout_im_v_26,
           dout_im_v_27,
           dout_im_v_28,
           dout_im_v_29,
           dout_im_v_30,
           dout_im_v_31,
           dout_im_v_32,
           dout_im_v_33,
           dout_im_v_34,
           dout_im_v_35,
           dout_im_v_36,
           dout_im_v_37,
           dout_im_v_38,
           dout_im_v_39,
           dout_im_v_40,
           dout_im_v_41,
           dout_im_v_42,
           dout_im_v_43,
           dout_im_v_44,
           dout_im_v_45,
           dout_im_v_46,
           dout_im_v_47,
           dout_im_v_48,
           dout_im_v_49,
           dout_im_v_50,
           dout_im_v_51,
           dout_im_v_52,
           dout_im_v_53,
           dout_im_v_54,
           dout_im_v_55,
           dout_im_v_56,
           dout_im_v_57,
           dout_im_v_58,
           dout_im_v_59,
           dout_im_v_60,
           dout_im_v_61,
           dout_im_v_62,
           dout_im_v_63,
           dout_2_vld,
           dMem_re56,
           dMem_im56);


  input   clk;
  input   reset;
  input   enb_1_4096_0;
  input   signed [15:0] dout_re_v_0;  // sfix16_En14
  input   signed [15:0] dout_re_v_1;  // sfix16_En14
  input   signed [15:0] dout_re_v_2;  // sfix16_En14
  input   signed [15:0] dout_re_v_3;  // sfix16_En14
  input   signed [15:0] dout_re_v_4;  // sfix16_En14
  input   signed [15:0] dout_re_v_5;  // sfix16_En14
  input   signed [15:0] dout_re_v_6;  // sfix16_En14
  input   signed [15:0] dout_re_v_7;  // sfix16_En14
  input   signed [15:0] dout_re_v_8;  // sfix16_En14
  input   signed [15:0] dout_re_v_9;  // sfix16_En14
  input   signed [15:0] dout_re_v_10;  // sfix16_En14
  input   signed [15:0] dout_re_v_11;  // sfix16_En14
  input   signed [15:0] dout_re_v_12;  // sfix16_En14
  input   signed [15:0] dout_re_v_13;  // sfix16_En14
  input   signed [15:0] dout_re_v_14;  // sfix16_En14
  input   signed [15:0] dout_re_v_15;  // sfix16_En14
  input   signed [15:0] dout_re_v_16;  // sfix16_En14
  input   signed [15:0] dout_re_v_17;  // sfix16_En14
  input   signed [15:0] dout_re_v_18;  // sfix16_En14
  input   signed [15:0] dout_re_v_19;  // sfix16_En14
  input   signed [15:0] dout_re_v_20;  // sfix16_En14
  input   signed [15:0] dout_re_v_21;  // sfix16_En14
  input   signed [15:0] dout_re_v_22;  // sfix16_En14
  input   signed [15:0] dout_re_v_23;  // sfix16_En14
  input   signed [15:0] dout_re_v_24;  // sfix16_En14
  input   signed [15:0] dout_re_v_25;  // sfix16_En14
  input   signed [15:0] dout_re_v_26;  // sfix16_En14
  input   signed [15:0] dout_re_v_27;  // sfix16_En14
  input   signed [15:0] dout_re_v_28;  // sfix16_En14
  input   signed [15:0] dout_re_v_29;  // sfix16_En14
  input   signed [15:0] dout_re_v_30;  // sfix16_En14
  input   signed [15:0] dout_re_v_31;  // sfix16_En14
  input   signed [15:0] dout_re_v_32;  // sfix16_En14
  input   signed [15:0] dout_re_v_33;  // sfix16_En14
  input   signed [15:0] dout_re_v_34;  // sfix16_En14
  input   signed [15:0] dout_re_v_35;  // sfix16_En14
  input   signed [15:0] dout_re_v_36;  // sfix16_En14
  input   signed [15:0] dout_re_v_37;  // sfix16_En14
  input   signed [15:0] dout_re_v_38;  // sfix16_En14
  input   signed [15:0] dout_re_v_39;  // sfix16_En14
  input   signed [15:0] dout_re_v_40;  // sfix16_En14
  input   signed [15:0] dout_re_v_41;  // sfix16_En14
  input   signed [15:0] dout_re_v_42;  // sfix16_En14
  input   signed [15:0] dout_re_v_43;  // sfix16_En14
  input   signed [15:0] dout_re_v_44;  // sfix16_En14
  input   signed [15:0] dout_re_v_45;  // sfix16_En14
  input   signed [15:0] dout_re_v_46;  // sfix16_En14
  input   signed [15:0] dout_re_v_47;  // sfix16_En14
  input   signed [15:0] dout_re_v_48;  // sfix16_En14
  input   signed [15:0] dout_re_v_49;  // sfix16_En14
  input   signed [15:0] dout_re_v_50;  // sfix16_En14
  input   signed [15:0] dout_re_v_51;  // sfix16_En14
  input   signed [15:0] dout_re_v_52;  // sfix16_En14
  input   signed [15:0] dout_re_v_53;  // sfix16_En14
  input   signed [15:0] dout_re_v_54;  // sfix16_En14
  input   signed [15:0] dout_re_v_55;  // sfix16_En14
  input   signed [15:0] dout_re_v_56;  // sfix16_En14
  input   signed [15:0] dout_re_v_57;  // sfix16_En14
  input   signed [15:0] dout_re_v_58;  // sfix16_En14
  input   signed [15:0] dout_re_v_59;  // sfix16_En14
  input   signed [15:0] dout_re_v_60;  // sfix16_En14
  input   signed [15:0] dout_re_v_61;  // sfix16_En14
  input   signed [15:0] dout_re_v_62;  // sfix16_En14
  input   signed [15:0] dout_re_v_63;  // sfix16_En14
  input   signed [15:0] dout_im_v_0;  // sfix16_En14
  input   signed [15:0] dout_im_v_1;  // sfix16_En14
  input   signed [15:0] dout_im_v_2;  // sfix16_En14
  input   signed [15:0] dout_im_v_3;  // sfix16_En14
  input   signed [15:0] dout_im_v_4;  // sfix16_En14
  input   signed [15:0] dout_im_v_5;  // sfix16_En14
  input   signed [15:0] dout_im_v_6;  // sfix16_En14
  input   signed [15:0] dout_im_v_7;  // sfix16_En14
  input   signed [15:0] dout_im_v_8;  // sfix16_En14
  input   signed [15:0] dout_im_v_9;  // sfix16_En14
  input   signed [15:0] dout_im_v_10;  // sfix16_En14
  input   signed [15:0] dout_im_v_11;  // sfix16_En14
  input   signed [15:0] dout_im_v_12;  // sfix16_En14
  input   signed [15:0] dout_im_v_13;  // sfix16_En14
  input   signed [15:0] dout_im_v_14;  // sfix16_En14
  input   signed [15:0] dout_im_v_15;  // sfix16_En14
  input   signed [15:0] dout_im_v_16;  // sfix16_En14
  input   signed [15:0] dout_im_v_17;  // sfix16_En14
  input   signed [15:0] dout_im_v_18;  // sfix16_En14
  input   signed [15:0] dout_im_v_19;  // sfix16_En14
  input   signed [15:0] dout_im_v_20;  // sfix16_En14
  input   signed [15:0] dout_im_v_21;  // sfix16_En14
  input   signed [15:0] dout_im_v_22;  // sfix16_En14
  input   signed [15:0] dout_im_v_23;  // sfix16_En14
  input   signed [15:0] dout_im_v_24;  // sfix16_En14
  input   signed [15:0] dout_im_v_25;  // sfix16_En14
  input   signed [15:0] dout_im_v_26;  // sfix16_En14
  input   signed [15:0] dout_im_v_27;  // sfix16_En14
  input   signed [15:0] dout_im_v_28;  // sfix16_En14
  input   signed [15:0] dout_im_v_29;  // sfix16_En14
  input   signed [15:0] dout_im_v_30;  // sfix16_En14
  input   signed [15:0] dout_im_v_31;  // sfix16_En14
  input   signed [15:0] dout_im_v_32;  // sfix16_En14
  input   signed [15:0] dout_im_v_33;  // sfix16_En14
  input   signed [15:0] dout_im_v_34;  // sfix16_En14
  input   signed [15:0] dout_im_v_35;  // sfix16_En14
  input   signed [15:0] dout_im_v_36;  // sfix16_En14
  input   signed [15:0] dout_im_v_37;  // sfix16_En14
  input   signed [15:0] dout_im_v_38;  // sfix16_En14
  input   signed [15:0] dout_im_v_39;  // sfix16_En14
  input   signed [15:0] dout_im_v_40;  // sfix16_En14
  input   signed [15:0] dout_im_v_41;  // sfix16_En14
  input   signed [15:0] dout_im_v_42;  // sfix16_En14
  input   signed [15:0] dout_im_v_43;  // sfix16_En14
  input   signed [15:0] dout_im_v_44;  // sfix16_En14
  input   signed [15:0] dout_im_v_45;  // sfix16_En14
  input   signed [15:0] dout_im_v_46;  // sfix16_En14
  input   signed [15:0] dout_im_v_47;  // sfix16_En14
  input   signed [15:0] dout_im_v_48;  // sfix16_En14
  input   signed [15:0] dout_im_v_49;  // sfix16_En14
  input   signed [15:0] dout_im_v_50;  // sfix16_En14
  input   signed [15:0] dout_im_v_51;  // sfix16_En14
  input   signed [15:0] dout_im_v_52;  // sfix16_En14
  input   signed [15:0] dout_im_v_53;  // sfix16_En14
  input   signed [15:0] dout_im_v_54;  // sfix16_En14
  input   signed [15:0] dout_im_v_55;  // sfix16_En14
  input   signed [15:0] dout_im_v_56;  // sfix16_En14
  input   signed [15:0] dout_im_v_57;  // sfix16_En14
  input   signed [15:0] dout_im_v_58;  // sfix16_En14
  input   signed [15:0] dout_im_v_59;  // sfix16_En14
  input   signed [15:0] dout_im_v_60;  // sfix16_En14
  input   signed [15:0] dout_im_v_61;  // sfix16_En14
  input   signed [15:0] dout_im_v_62;  // sfix16_En14
  input   signed [15:0] dout_im_v_63;  // sfix16_En14
  input   dout_2_vld;
  output  signed [15:0] dMem_re56;  // sfix16_En14
  output  signed [15:0] dMem_im56;  // sfix16_En14


  reg [6:0] fftIdx_cnt;  // ufix7
  reg [6:0] fftIdx_cnt_next;  // ufix7
  reg [6:0] FFTIdx_1;  // ufix7
  reg [6:0] FFTIdxRev;  // ufix7
  reg  fftIdx_vld;
  reg  wrAddrGenBitNaturalP_wrCnt;  // ufix1
  reg  wrAddrGenBitNaturalP_wrOddFrame;
  reg  wrAddrGenBitNaturalP_wrAddrReg;  // ufix1
  reg  wrAddrGenBitNaturalP_wrEnbReg;
  reg  wrAddrGenBitNaturalP_wrCnt_next;  // ufix1
  reg  wrAddrGenBitNaturalP_wrOddFrame_next;
  reg  wrAddrGenBitNaturalP_wrAddrReg_next;  // ufix1
  reg  wrAddrGenBitNaturalP_wrEnbReg_next;
  reg  wrAddr;  // ufix1
  reg  WrEnb;
  reg  sampleCnt;  // ufix1
  reg  [0:6] intdelay_reg;  // ufix1 [7]
  wire [0:6] intdelay_reg_next;  // ufix1 [7]
  wire sampleCntDly;  // ufix1
  reg [5:0] MUXSel;  // ufix6
  reg  MUXSel_vld;
  reg signed [15:0] din_re_reg1;  // sfix16_En14
  reg signed [15:0] din_re_reg2;  // sfix16_En14
  reg signed [15:0] din_re_reg3;  // sfix16_En14
  reg signed [15:0] din_re_reg4;  // sfix16_En14
  reg signed [15:0] din_re_reg5;  // sfix16_En14
  reg signed [15:0] din_re_reg6;  // sfix16_En14
  reg signed [15:0] din_re_reg7;  // sfix16_En14
  reg signed [15:0] din_re_reg8;  // sfix16_En14
  reg signed [15:0] din_re_reg9;  // sfix16_En14
  reg signed [15:0] din_re_reg10;  // sfix16_En14
  reg signed [15:0] din_re_reg11;  // sfix16_En14
  reg signed [15:0] din_re_reg12;  // sfix16_En14
  reg signed [15:0] din_re_reg13;  // sfix16_En14
  reg signed [15:0] din_re_reg14;  // sfix16_En14
  reg signed [15:0] din_re_reg15;  // sfix16_En14
  reg signed [15:0] din_re_reg16;  // sfix16_En14
  reg signed [15:0] din_re_reg17;  // sfix16_En14
  reg signed [15:0] din_re_reg18;  // sfix16_En14
  reg signed [15:0] din_re_reg19;  // sfix16_En14
  reg signed [15:0] din_re_reg20;  // sfix16_En14
  reg signed [15:0] din_re_reg21;  // sfix16_En14
  reg signed [15:0] din_re_reg22;  // sfix16_En14
  reg signed [15:0] din_re_reg23;  // sfix16_En14
  reg signed [15:0] din_re_reg24;  // sfix16_En14
  reg signed [15:0] din_re_reg25;  // sfix16_En14
  reg signed [15:0] din_re_reg26;  // sfix16_En14
  reg signed [15:0] din_re_reg27;  // sfix16_En14
  reg signed [15:0] din_re_reg28;  // sfix16_En14
  reg signed [15:0] din_re_reg29;  // sfix16_En14
  reg signed [15:0] din_re_reg30;  // sfix16_En14
  reg signed [15:0] din_re_reg31;  // sfix16_En14
  reg signed [15:0] din_re_reg32;  // sfix16_En14
  reg signed [15:0] din_re_reg33;  // sfix16_En14
  reg signed [15:0] din_re_reg34;  // sfix16_En14
  reg signed [15:0] din_re_reg35;  // sfix16_En14
  reg signed [15:0] din_re_reg36;  // sfix16_En14
  reg signed [15:0] din_re_reg37;  // sfix16_En14
  reg signed [15:0] din_re_reg38;  // sfix16_En14
  reg signed [15:0] din_re_reg39;  // sfix16_En14
  reg signed [15:0] din_re_reg40;  // sfix16_En14
  reg signed [15:0] din_re_reg41;  // sfix16_En14
  reg signed [15:0] din_re_reg42;  // sfix16_En14
  reg signed [15:0] din_re_reg43;  // sfix16_En14
  reg signed [15:0] din_re_reg44;  // sfix16_En14
  reg signed [15:0] din_re_reg45;  // sfix16_En14
  reg signed [15:0] din_re_reg46;  // sfix16_En14
  reg signed [15:0] din_re_reg47;  // sfix16_En14
  reg signed [15:0] din_re_reg48;  // sfix16_En14
  reg signed [15:0] din_re_reg49;  // sfix16_En14
  reg signed [15:0] din_re_reg50;  // sfix16_En14
  reg signed [15:0] din_re_reg51;  // sfix16_En14
  reg signed [15:0] din_re_reg52;  // sfix16_En14
  reg signed [15:0] din_re_reg53;  // sfix16_En14
  reg signed [15:0] din_re_reg54;  // sfix16_En14
  reg signed [15:0] din_re_reg55;  // sfix16_En14
  reg signed [15:0] din_re_reg56;  // sfix16_En14
  reg signed [15:0] din_re_reg57;  // sfix16_En14
  reg signed [15:0] din_re_reg58;  // sfix16_En14
  reg signed [15:0] din_re_reg59;  // sfix16_En14
  reg signed [15:0] din_re_reg60;  // sfix16_En14
  reg signed [15:0] din_re_reg61;  // sfix16_En14
  reg signed [15:0] din_re_reg62;  // sfix16_En14
  reg signed [15:0] din_re_reg63;  // sfix16_En14
  reg signed [15:0] din_re_reg64;  // sfix16_En14
  wire signed [15:0] memIn_re;  // sfix16_En14
  reg signed [15:0] intdelay_reg_1 [0:5];  // sfix16 [6]
  wire signed [15:0] intdelay_reg_next_1 [0:5];  // sfix16_En14 [6]
  wire signed [15:0] memIn_re_reg;  // sfix16_En14
  reg signed [15:0] din_im_reg1;  // sfix16_En14
  reg signed [15:0] din_im_reg2;  // sfix16_En14
  reg signed [15:0] din_im_reg3;  // sfix16_En14
  reg signed [15:0] din_im_reg4;  // sfix16_En14
  reg signed [15:0] din_im_reg5;  // sfix16_En14
  reg signed [15:0] din_im_reg6;  // sfix16_En14
  reg signed [15:0] din_im_reg7;  // sfix16_En14
  reg signed [15:0] din_im_reg8;  // sfix16_En14
  reg signed [15:0] din_im_reg9;  // sfix16_En14
  reg signed [15:0] din_im_reg10;  // sfix16_En14
  reg signed [15:0] din_im_reg11;  // sfix16_En14
  reg signed [15:0] din_im_reg12;  // sfix16_En14
  reg signed [15:0] din_im_reg13;  // sfix16_En14
  reg signed [15:0] din_im_reg14;  // sfix16_En14
  reg signed [15:0] din_im_reg15;  // sfix16_En14
  reg signed [15:0] din_im_reg16;  // sfix16_En14
  reg signed [15:0] din_im_reg17;  // sfix16_En14
  reg signed [15:0] din_im_reg18;  // sfix16_En14
  reg signed [15:0] din_im_reg19;  // sfix16_En14
  reg signed [15:0] din_im_reg20;  // sfix16_En14
  reg signed [15:0] din_im_reg21;  // sfix16_En14
  reg signed [15:0] din_im_reg22;  // sfix16_En14
  reg signed [15:0] din_im_reg23;  // sfix16_En14
  reg signed [15:0] din_im_reg24;  // sfix16_En14
  reg signed [15:0] din_im_reg25;  // sfix16_En14
  reg signed [15:0] din_im_reg26;  // sfix16_En14
  reg signed [15:0] din_im_reg27;  // sfix16_En14
  reg signed [15:0] din_im_reg28;  // sfix16_En14
  reg signed [15:0] din_im_reg29;  // sfix16_En14
  reg signed [15:0] din_im_reg30;  // sfix16_En14
  reg signed [15:0] din_im_reg31;  // sfix16_En14
  reg signed [15:0] din_im_reg32;  // sfix16_En14
  reg signed [15:0] din_im_reg33;  // sfix16_En14
  reg signed [15:0] din_im_reg34;  // sfix16_En14
  reg signed [15:0] din_im_reg35;  // sfix16_En14
  reg signed [15:0] din_im_reg36;  // sfix16_En14
  reg signed [15:0] din_im_reg37;  // sfix16_En14
  reg signed [15:0] din_im_reg38;  // sfix16_En14
  reg signed [15:0] din_im_reg39;  // sfix16_En14
  reg signed [15:0] din_im_reg40;  // sfix16_En14
  reg signed [15:0] din_im_reg41;  // sfix16_En14
  reg signed [15:0] din_im_reg42;  // sfix16_En14
  reg signed [15:0] din_im_reg43;  // sfix16_En14
  reg signed [15:0] din_im_reg44;  // sfix16_En14
  reg signed [15:0] din_im_reg45;  // sfix16_En14
  reg signed [15:0] din_im_reg46;  // sfix16_En14
  reg signed [15:0] din_im_reg47;  // sfix16_En14
  reg signed [15:0] din_im_reg48;  // sfix16_En14
  reg signed [15:0] din_im_reg49;  // sfix16_En14
  reg signed [15:0] din_im_reg50;  // sfix16_En14
  reg signed [15:0] din_im_reg51;  // sfix16_En14
  reg signed [15:0] din_im_reg52;  // sfix16_En14
  reg signed [15:0] din_im_reg53;  // sfix16_En14
  reg signed [15:0] din_im_reg54;  // sfix16_En14
  reg signed [15:0] din_im_reg55;  // sfix16_En14
  reg signed [15:0] din_im_reg56;  // sfix16_En14
  reg signed [15:0] din_im_reg57;  // sfix16_En14
  reg signed [15:0] din_im_reg58;  // sfix16_En14
  reg signed [15:0] din_im_reg59;  // sfix16_En14
  reg signed [15:0] din_im_reg60;  // sfix16_En14
  reg signed [15:0] din_im_reg61;  // sfix16_En14
  reg signed [15:0] din_im_reg62;  // sfix16_En14
  reg signed [15:0] din_im_reg63;  // sfix16_En14
  reg signed [15:0] din_im_reg64;  // sfix16_En14
  wire signed [15:0] memIn_im;  // sfix16_En14
  reg signed [15:0] intdelay_reg_2 [0:5];  // sfix16 [6]
  wire signed [15:0] intdelay_reg_next_2 [0:5];  // sfix16_En14 [6]
  wire signed [15:0] memIn_im_reg;  // sfix16_En14
  reg  [0:5] intdelay_reg_3;  // ufix1 [6]
  wire [0:5] intdelay_reg_next_3;  // ufix1 [6]
  wire wrAddr_reg;  // ufix1
  reg  [0:5] intdelay_reg_4;  // ufix1 [6]
  wire [0:5] intdelay_reg_next_4;  // ufix1 [6]
  wire wrEnb_reg;
  reg  rdAddr;  // ufix1
  reg signed [15:0] twoLocationReg_0_MEM_re_0;  // sfix16
  reg signed [15:0] twoLocationReg_0_MEM_im_0;  // sfix16
  reg signed [15:0] twoLocationReg_0_MEM_re_1;  // sfix16
  reg signed [15:0] twoLocationReg_0_MEM_im_1;  // sfix16
  reg signed [15:0] twoLocationReg_0_dout_re_reg;  // sfix16
  reg signed [15:0] twoLocationReg_0_dout_im_reg;  // sfix16
  reg signed [15:0] twoLocationReg_0_MEM_re_0_next;  // sfix16_En14
  reg signed [15:0] twoLocationReg_0_MEM_im_0_next;  // sfix16_En14
  reg signed [15:0] twoLocationReg_0_MEM_re_1_next;  // sfix16_En14
  reg signed [15:0] twoLocationReg_0_MEM_im_1_next;  // sfix16_En14
  reg signed [15:0] twoLocationReg_0_dout_re_reg_next;  // sfix16_En14
  reg signed [15:0] twoLocationReg_0_dout_im_reg_next;  // sfix16_En14
  reg signed [15:0] memOut_re;  // sfix16_En14
  reg signed [15:0] memOut_im;  // sfix16_En14
  reg  rdAddrGenBitNaturalP_addrReg;  // ufix1
  reg  rdAddrGenBitNaturalP_rdOddFrame;
  reg  rdAddrGenBitNaturalP_rdAddrReg;  // ufix1
  reg  rdAddrGenBitNaturalP_rdState;  // ufix1
  reg  rdAddrGenBitNaturalP_vldOutReg;
  reg  rdAddrGenBitNaturalP_rdCnt;  // ufix1
  reg [6:0] rdAddrGenBitNaturalP_FFTIdxO;  // ufix7
  reg  rdAddrGenBitNaturalP_startOutReg;
  reg  rdAddrGenBitNaturalP_endOutReg;
  reg  rdAddrGenBitNaturalP_startOutRegDly;
  reg  rdAddrGenBitNaturalP_endOutRegDly;
  reg  rdAddrGenBitNaturalP_addrReg_next;  // ufix1
  reg  rdAddrGenBitNaturalP_rdOddFrame_next;
  reg  rdAddrGenBitNaturalP_rdAddrReg_next;  // ufix1
  reg  rdAddrGenBitNaturalP_rdState_next;  // ufix1
  reg  rdAddrGenBitNaturalP_vldOutReg_next;
  reg  rdAddrGenBitNaturalP_rdCnt_next;  // ufix1
  reg [6:0] rdAddrGenBitNaturalP_FFTIdxO_next;  // ufix7
  reg  rdAddrGenBitNaturalP_startOutReg_next;
  reg  rdAddrGenBitNaturalP_endOutReg_next;
  reg  rdAddrGenBitNaturalP_startOutRegDly_next;
  reg  rdAddrGenBitNaturalP_endOutRegDly_next;
  reg signed [15:0] dMem_re56_1;  // sfix16_En14
  reg signed [15:0] dMem_im56_1;  // sfix16_En14
  reg  dMem_vld56;
  reg  startOutW;
  reg  endOutW;
  reg [1:0] wrAddrGenBitNaturalP_add_temp;  // ufix2
  reg [1:0] wrAddrGenBitNaturalP_t_0_0;  // ufix2
  reg [6:0] rdAddrGenBitNaturalP_t_0_0;  // ufix7
  reg [1:0] rdAddrGenBitNaturalP_add_temp;  // ufix2
  reg [1:0] rdAddrGenBitNaturalP_add_temp_0;  // ufix2
  reg [1:0] rdAddrGenBitNaturalP_add_temp_1;  // ufix2
  reg [1:0] rdAddrGenBitNaturalP_t_1;  // ufix2
  reg [1:0] rdAddrGenBitNaturalP_t_2_0;  // ufix2
  reg [1:0] rdAddrGenBitNaturalP_t_3;  // ufix2


  // fftIdx
  always @(posedge clk or posedge reset)
    begin : fftIdx_process
      if (reset == 1'b1) begin
        fftIdx_cnt <= 7'b0110111;
      end
      else begin
        if (enb_1_4096_0) begin
          fftIdx_cnt <= fftIdx_cnt_next;
        end
      end
    end

  always @(dout_2_vld, fftIdx_cnt) begin
    fftIdx_cnt_next = fftIdx_cnt;
    if (dout_2_vld) begin
      fftIdx_cnt_next = fftIdx_cnt + 7'b1000000;
    end
    FFTIdx_1 = fftIdx_cnt;
    FFTIdxRev = {fftIdx_cnt[0], fftIdx_cnt[1], fftIdx_cnt[2], fftIdx_cnt[3], fftIdx_cnt[4], fftIdx_cnt[5], fftIdx_cnt[6]};
    fftIdx_vld = dout_2_vld;
  end



  // wrAddrGenBitNaturalP
  always @(posedge clk or posedge reset)
    begin : wrAddrGenBitNaturalP_process
      if (reset == 1'b1) begin
        wrAddrGenBitNaturalP_wrCnt <= 1'b0;
        wrAddrGenBitNaturalP_wrAddrReg <= 1'b0;
        wrAddrGenBitNaturalP_wrOddFrame <= 1'b0;
        wrAddrGenBitNaturalP_wrEnbReg <= 1'b0;
      end
      else begin
        if (enb_1_4096_0) begin
          wrAddrGenBitNaturalP_wrCnt <= wrAddrGenBitNaturalP_wrCnt_next;
          wrAddrGenBitNaturalP_wrOddFrame <= wrAddrGenBitNaturalP_wrOddFrame_next;
          wrAddrGenBitNaturalP_wrAddrReg <= wrAddrGenBitNaturalP_wrAddrReg_next;
          wrAddrGenBitNaturalP_wrEnbReg <= wrAddrGenBitNaturalP_wrEnbReg_next;
        end
      end
    end

  always @(FFTIdxRev, fftIdx_vld, wrAddrGenBitNaturalP_wrAddrReg,
       wrAddrGenBitNaturalP_wrCnt, wrAddrGenBitNaturalP_wrEnbReg,
       wrAddrGenBitNaturalP_wrOddFrame) begin
    wrAddrGenBitNaturalP_add_temp = 2'b00;
    wrAddrGenBitNaturalP_t_0_0 = 2'b00;
    wrAddrGenBitNaturalP_wrCnt_next = wrAddrGenBitNaturalP_wrCnt;
    wrAddrGenBitNaturalP_wrOddFrame_next = wrAddrGenBitNaturalP_wrOddFrame;
    wrAddrGenBitNaturalP_wrEnbReg_next = fftIdx_vld;
    if (wrAddrGenBitNaturalP_wrOddFrame) begin
      wrAddrGenBitNaturalP_wrAddrReg_next = wrAddrGenBitNaturalP_wrCnt;
    end
    else begin
      wrAddrGenBitNaturalP_wrAddrReg_next = FFTIdxRev[6] ^ wrAddrGenBitNaturalP_wrCnt;
    end
    if (wrAddrGenBitNaturalP_wrCnt && fftIdx_vld) begin
      wrAddrGenBitNaturalP_wrOddFrame_next =  ! wrAddrGenBitNaturalP_wrOddFrame;
    end
    if (fftIdx_vld) begin
      wrAddrGenBitNaturalP_t_0_0 = {1'b0, wrAddrGenBitNaturalP_wrCnt};
      wrAddrGenBitNaturalP_add_temp = wrAddrGenBitNaturalP_t_0_0 + 2'b01;
      wrAddrGenBitNaturalP_wrCnt_next = wrAddrGenBitNaturalP_add_temp[0];
    end
    wrAddr = wrAddrGenBitNaturalP_wrAddrReg;
    WrEnb = wrAddrGenBitNaturalP_wrEnbReg;
    sampleCnt = wrAddrGenBitNaturalP_wrCnt;
  end



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 1'b0;
        intdelay_reg[1] <= 1'b0;
        intdelay_reg[2] <= 1'b0;
        intdelay_reg[3] <= 1'b0;
        intdelay_reg[4] <= 1'b0;
        intdelay_reg[5] <= 1'b0;
        intdelay_reg[6] <= 1'b0;
      end
      else begin
        if (enb_1_4096_0) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
          intdelay_reg[2] <= intdelay_reg_next[2];
          intdelay_reg[3] <= intdelay_reg_next[3];
          intdelay_reg[4] <= intdelay_reg_next[4];
          intdelay_reg[5] <= intdelay_reg_next[5];
          intdelay_reg[6] <= intdelay_reg_next[6];
        end
      end
    end

  assign sampleCntDly = intdelay_reg[6];
  assign intdelay_reg_next[0] = sampleCnt;
  assign intdelay_reg_next[1] = intdelay_reg[0];
  assign intdelay_reg_next[2] = intdelay_reg[1];
  assign intdelay_reg_next[3] = intdelay_reg[2];
  assign intdelay_reg_next[4] = intdelay_reg[3];
  assign intdelay_reg_next[5] = intdelay_reg[4];
  assign intdelay_reg_next[6] = intdelay_reg[5];



  // inMUXSel
  always @(posedge clk or posedge reset)
    begin : inMuxSel_process
      if (reset == 1'b1) begin
        MUXSel <= 6'b000000;
        MUXSel_vld <= 1'b0;
      end
      else begin
        if (enb_1_4096_0) begin
          MUXSel <= FFTIdxRev[5:0] ^ 6'b000001;
          MUXSel_vld <= fftIdx_vld;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        din_re_reg1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg1 <= dout_re_v_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        din_re_reg2 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg2 <= dout_re_v_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        din_re_reg3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg3 <= dout_re_v_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        din_re_reg4 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg4 <= dout_re_v_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        din_re_reg5 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg5 <= dout_re_v_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        din_re_reg6 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg6 <= dout_re_v_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        din_re_reg7 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg7 <= dout_re_v_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        din_re_reg8 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg8 <= dout_re_v_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        din_re_reg9 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg9 <= dout_re_v_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        din_re_reg10 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg10 <= dout_re_v_9;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        din_re_reg11 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg11 <= dout_re_v_10;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        din_re_reg12 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg12 <= dout_re_v_11;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        din_re_reg13 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg13 <= dout_re_v_12;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        din_re_reg14 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg14 <= dout_re_v_13;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        din_re_reg15 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg15 <= dout_re_v_14;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        din_re_reg16 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg16 <= dout_re_v_15;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        din_re_reg17 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg17 <= dout_re_v_16;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_18_process
      if (reset == 1'b1) begin
        din_re_reg18 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg18 <= dout_re_v_17;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_19_process
      if (reset == 1'b1) begin
        din_re_reg19 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg19 <= dout_re_v_18;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_20_process
      if (reset == 1'b1) begin
        din_re_reg20 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg20 <= dout_re_v_19;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_21_process
      if (reset == 1'b1) begin
        din_re_reg21 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg21 <= dout_re_v_20;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_22_process
      if (reset == 1'b1) begin
        din_re_reg22 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg22 <= dout_re_v_21;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_23_process
      if (reset == 1'b1) begin
        din_re_reg23 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg23 <= dout_re_v_22;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_24_process
      if (reset == 1'b1) begin
        din_re_reg24 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg24 <= dout_re_v_23;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_25_process
      if (reset == 1'b1) begin
        din_re_reg25 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg25 <= dout_re_v_24;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_26_process
      if (reset == 1'b1) begin
        din_re_reg26 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg26 <= dout_re_v_25;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_27_process
      if (reset == 1'b1) begin
        din_re_reg27 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg27 <= dout_re_v_26;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_28_process
      if (reset == 1'b1) begin
        din_re_reg28 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg28 <= dout_re_v_27;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_29_process
      if (reset == 1'b1) begin
        din_re_reg29 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg29 <= dout_re_v_28;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_30_process
      if (reset == 1'b1) begin
        din_re_reg30 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg30 <= dout_re_v_29;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_31_process
      if (reset == 1'b1) begin
        din_re_reg31 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg31 <= dout_re_v_30;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_32_process
      if (reset == 1'b1) begin
        din_re_reg32 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg32 <= dout_re_v_31;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_33_process
      if (reset == 1'b1) begin
        din_re_reg33 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg33 <= dout_re_v_32;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_34_process
      if (reset == 1'b1) begin
        din_re_reg34 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg34 <= dout_re_v_33;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_35_process
      if (reset == 1'b1) begin
        din_re_reg35 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg35 <= dout_re_v_34;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_36_process
      if (reset == 1'b1) begin
        din_re_reg36 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg36 <= dout_re_v_35;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_37_process
      if (reset == 1'b1) begin
        din_re_reg37 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg37 <= dout_re_v_36;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_38_process
      if (reset == 1'b1) begin
        din_re_reg38 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg38 <= dout_re_v_37;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_39_process
      if (reset == 1'b1) begin
        din_re_reg39 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg39 <= dout_re_v_38;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_40_process
      if (reset == 1'b1) begin
        din_re_reg40 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg40 <= dout_re_v_39;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_41_process
      if (reset == 1'b1) begin
        din_re_reg41 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg41 <= dout_re_v_40;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_42_process
      if (reset == 1'b1) begin
        din_re_reg42 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg42 <= dout_re_v_41;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_43_process
      if (reset == 1'b1) begin
        din_re_reg43 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg43 <= dout_re_v_42;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_44_process
      if (reset == 1'b1) begin
        din_re_reg44 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg44 <= dout_re_v_43;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_45_process
      if (reset == 1'b1) begin
        din_re_reg45 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg45 <= dout_re_v_44;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_46_process
      if (reset == 1'b1) begin
        din_re_reg46 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg46 <= dout_re_v_45;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_47_process
      if (reset == 1'b1) begin
        din_re_reg47 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg47 <= dout_re_v_46;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_48_process
      if (reset == 1'b1) begin
        din_re_reg48 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg48 <= dout_re_v_47;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_49_process
      if (reset == 1'b1) begin
        din_re_reg49 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg49 <= dout_re_v_48;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_50_process
      if (reset == 1'b1) begin
        din_re_reg50 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg50 <= dout_re_v_49;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_51_process
      if (reset == 1'b1) begin
        din_re_reg51 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg51 <= dout_re_v_50;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_52_process
      if (reset == 1'b1) begin
        din_re_reg52 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg52 <= dout_re_v_51;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_53_process
      if (reset == 1'b1) begin
        din_re_reg53 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg53 <= dout_re_v_52;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_54_process
      if (reset == 1'b1) begin
        din_re_reg54 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg54 <= dout_re_v_53;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_55_process
      if (reset == 1'b1) begin
        din_re_reg55 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg55 <= dout_re_v_54;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_56_process
      if (reset == 1'b1) begin
        din_re_reg56 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg56 <= dout_re_v_55;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_57_process
      if (reset == 1'b1) begin
        din_re_reg57 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg57 <= dout_re_v_56;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_58_process
      if (reset == 1'b1) begin
        din_re_reg58 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg58 <= dout_re_v_57;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_59_process
      if (reset == 1'b1) begin
        din_re_reg59 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg59 <= dout_re_v_58;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_60_process
      if (reset == 1'b1) begin
        din_re_reg60 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg60 <= dout_re_v_59;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_61_process
      if (reset == 1'b1) begin
        din_re_reg61 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg61 <= dout_re_v_60;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_62_process
      if (reset == 1'b1) begin
        din_re_reg62 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg62 <= dout_re_v_61;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_63_process
      if (reset == 1'b1) begin
        din_re_reg63 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg63 <= dout_re_v_62;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_64_process
      if (reset == 1'b1) begin
        din_re_reg64 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_re_reg64 <= dout_re_v_63;
        end
      end
    end



  assign memIn_re = (MUXSel == 6'b000000 ? din_re_reg1 :
              (MUXSel == 6'b000001 ? din_re_reg2 :
              (MUXSel == 6'b000010 ? din_re_reg3 :
              (MUXSel == 6'b000011 ? din_re_reg4 :
              (MUXSel == 6'b000100 ? din_re_reg5 :
              (MUXSel == 6'b000101 ? din_re_reg6 :
              (MUXSel == 6'b000110 ? din_re_reg7 :
              (MUXSel == 6'b000111 ? din_re_reg8 :
              (MUXSel == 6'b001000 ? din_re_reg9 :
              (MUXSel == 6'b001001 ? din_re_reg10 :
              (MUXSel == 6'b001010 ? din_re_reg11 :
              (MUXSel == 6'b001011 ? din_re_reg12 :
              (MUXSel == 6'b001100 ? din_re_reg13 :
              (MUXSel == 6'b001101 ? din_re_reg14 :
              (MUXSel == 6'b001110 ? din_re_reg15 :
              (MUXSel == 6'b001111 ? din_re_reg16 :
              (MUXSel == 6'b010000 ? din_re_reg17 :
              (MUXSel == 6'b010001 ? din_re_reg18 :
              (MUXSel == 6'b010010 ? din_re_reg19 :
              (MUXSel == 6'b010011 ? din_re_reg20 :
              (MUXSel == 6'b010100 ? din_re_reg21 :
              (MUXSel == 6'b010101 ? din_re_reg22 :
              (MUXSel == 6'b010110 ? din_re_reg23 :
              (MUXSel == 6'b010111 ? din_re_reg24 :
              (MUXSel == 6'b011000 ? din_re_reg25 :
              (MUXSel == 6'b011001 ? din_re_reg26 :
              (MUXSel == 6'b011010 ? din_re_reg27 :
              (MUXSel == 6'b011011 ? din_re_reg28 :
              (MUXSel == 6'b011100 ? din_re_reg29 :
              (MUXSel == 6'b011101 ? din_re_reg30 :
              (MUXSel == 6'b011110 ? din_re_reg31 :
              (MUXSel == 6'b011111 ? din_re_reg32 :
              (MUXSel == 6'b100000 ? din_re_reg33 :
              (MUXSel == 6'b100001 ? din_re_reg34 :
              (MUXSel == 6'b100010 ? din_re_reg35 :
              (MUXSel == 6'b100011 ? din_re_reg36 :
              (MUXSel == 6'b100100 ? din_re_reg37 :
              (MUXSel == 6'b100101 ? din_re_reg38 :
              (MUXSel == 6'b100110 ? din_re_reg39 :
              (MUXSel == 6'b100111 ? din_re_reg40 :
              (MUXSel == 6'b101000 ? din_re_reg41 :
              (MUXSel == 6'b101001 ? din_re_reg42 :
              (MUXSel == 6'b101010 ? din_re_reg43 :
              (MUXSel == 6'b101011 ? din_re_reg44 :
              (MUXSel == 6'b101100 ? din_re_reg45 :
              (MUXSel == 6'b101101 ? din_re_reg46 :
              (MUXSel == 6'b101110 ? din_re_reg47 :
              (MUXSel == 6'b101111 ? din_re_reg48 :
              (MUXSel == 6'b110000 ? din_re_reg49 :
              (MUXSel == 6'b110001 ? din_re_reg50 :
              (MUXSel == 6'b110010 ? din_re_reg51 :
              (MUXSel == 6'b110011 ? din_re_reg52 :
              (MUXSel == 6'b110100 ? din_re_reg53 :
              (MUXSel == 6'b110101 ? din_re_reg54 :
              (MUXSel == 6'b110110 ? din_re_reg55 :
              (MUXSel == 6'b110111 ? din_re_reg56 :
              (MUXSel == 6'b111000 ? din_re_reg57 :
              (MUXSel == 6'b111001 ? din_re_reg58 :
              (MUXSel == 6'b111010 ? din_re_reg59 :
              (MUXSel == 6'b111011 ? din_re_reg60 :
              (MUXSel == 6'b111100 ? din_re_reg61 :
              (MUXSel == 6'b111101 ? din_re_reg62 :
              (MUXSel == 6'b111110 ? din_re_reg63 :
              din_re_reg64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));



  always @(posedge clk or posedge reset)
    begin : intdelay_65_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 16'sb0000000000000000;
        intdelay_reg_1[1] <= 16'sb0000000000000000;
        intdelay_reg_1[2] <= 16'sb0000000000000000;
        intdelay_reg_1[3] <= 16'sb0000000000000000;
        intdelay_reg_1[4] <= 16'sb0000000000000000;
        intdelay_reg_1[5] <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          intdelay_reg_1[0] <= intdelay_reg_next_1[0];
          intdelay_reg_1[1] <= intdelay_reg_next_1[1];
          intdelay_reg_1[2] <= intdelay_reg_next_1[2];
          intdelay_reg_1[3] <= intdelay_reg_next_1[3];
          intdelay_reg_1[4] <= intdelay_reg_next_1[4];
          intdelay_reg_1[5] <= intdelay_reg_next_1[5];
        end
      end
    end

  assign memIn_re_reg = intdelay_reg_1[5];
  assign intdelay_reg_next_1[0] = memIn_re;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];
  assign intdelay_reg_next_1[2] = intdelay_reg_1[1];
  assign intdelay_reg_next_1[3] = intdelay_reg_1[2];
  assign intdelay_reg_next_1[4] = intdelay_reg_1[3];
  assign intdelay_reg_next_1[5] = intdelay_reg_1[4];



  always @(posedge clk or posedge reset)
    begin : intdelay_66_process
      if (reset == 1'b1) begin
        din_im_reg1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg1 <= dout_im_v_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_67_process
      if (reset == 1'b1) begin
        din_im_reg2 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg2 <= dout_im_v_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_68_process
      if (reset == 1'b1) begin
        din_im_reg3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg3 <= dout_im_v_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_69_process
      if (reset == 1'b1) begin
        din_im_reg4 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg4 <= dout_im_v_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_70_process
      if (reset == 1'b1) begin
        din_im_reg5 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg5 <= dout_im_v_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_71_process
      if (reset == 1'b1) begin
        din_im_reg6 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg6 <= dout_im_v_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_72_process
      if (reset == 1'b1) begin
        din_im_reg7 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg7 <= dout_im_v_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_73_process
      if (reset == 1'b1) begin
        din_im_reg8 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg8 <= dout_im_v_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_74_process
      if (reset == 1'b1) begin
        din_im_reg9 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg9 <= dout_im_v_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_75_process
      if (reset == 1'b1) begin
        din_im_reg10 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg10 <= dout_im_v_9;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_76_process
      if (reset == 1'b1) begin
        din_im_reg11 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg11 <= dout_im_v_10;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_77_process
      if (reset == 1'b1) begin
        din_im_reg12 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg12 <= dout_im_v_11;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_78_process
      if (reset == 1'b1) begin
        din_im_reg13 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg13 <= dout_im_v_12;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_79_process
      if (reset == 1'b1) begin
        din_im_reg14 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg14 <= dout_im_v_13;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_80_process
      if (reset == 1'b1) begin
        din_im_reg15 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg15 <= dout_im_v_14;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_81_process
      if (reset == 1'b1) begin
        din_im_reg16 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg16 <= dout_im_v_15;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_82_process
      if (reset == 1'b1) begin
        din_im_reg17 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg17 <= dout_im_v_16;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_83_process
      if (reset == 1'b1) begin
        din_im_reg18 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg18 <= dout_im_v_17;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_84_process
      if (reset == 1'b1) begin
        din_im_reg19 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg19 <= dout_im_v_18;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_85_process
      if (reset == 1'b1) begin
        din_im_reg20 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg20 <= dout_im_v_19;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_86_process
      if (reset == 1'b1) begin
        din_im_reg21 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg21 <= dout_im_v_20;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_87_process
      if (reset == 1'b1) begin
        din_im_reg22 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg22 <= dout_im_v_21;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_88_process
      if (reset == 1'b1) begin
        din_im_reg23 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg23 <= dout_im_v_22;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_89_process
      if (reset == 1'b1) begin
        din_im_reg24 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg24 <= dout_im_v_23;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_90_process
      if (reset == 1'b1) begin
        din_im_reg25 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg25 <= dout_im_v_24;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_91_process
      if (reset == 1'b1) begin
        din_im_reg26 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg26 <= dout_im_v_25;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_92_process
      if (reset == 1'b1) begin
        din_im_reg27 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg27 <= dout_im_v_26;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_93_process
      if (reset == 1'b1) begin
        din_im_reg28 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg28 <= dout_im_v_27;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_94_process
      if (reset == 1'b1) begin
        din_im_reg29 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg29 <= dout_im_v_28;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_95_process
      if (reset == 1'b1) begin
        din_im_reg30 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg30 <= dout_im_v_29;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_96_process
      if (reset == 1'b1) begin
        din_im_reg31 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg31 <= dout_im_v_30;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_97_process
      if (reset == 1'b1) begin
        din_im_reg32 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg32 <= dout_im_v_31;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_98_process
      if (reset == 1'b1) begin
        din_im_reg33 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg33 <= dout_im_v_32;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_99_process
      if (reset == 1'b1) begin
        din_im_reg34 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg34 <= dout_im_v_33;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_100_process
      if (reset == 1'b1) begin
        din_im_reg35 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg35 <= dout_im_v_34;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_101_process
      if (reset == 1'b1) begin
        din_im_reg36 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg36 <= dout_im_v_35;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_102_process
      if (reset == 1'b1) begin
        din_im_reg37 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg37 <= dout_im_v_36;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_103_process
      if (reset == 1'b1) begin
        din_im_reg38 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg38 <= dout_im_v_37;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_104_process
      if (reset == 1'b1) begin
        din_im_reg39 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg39 <= dout_im_v_38;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_105_process
      if (reset == 1'b1) begin
        din_im_reg40 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg40 <= dout_im_v_39;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_106_process
      if (reset == 1'b1) begin
        din_im_reg41 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg41 <= dout_im_v_40;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_107_process
      if (reset == 1'b1) begin
        din_im_reg42 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg42 <= dout_im_v_41;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_108_process
      if (reset == 1'b1) begin
        din_im_reg43 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg43 <= dout_im_v_42;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_109_process
      if (reset == 1'b1) begin
        din_im_reg44 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg44 <= dout_im_v_43;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_110_process
      if (reset == 1'b1) begin
        din_im_reg45 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg45 <= dout_im_v_44;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_111_process
      if (reset == 1'b1) begin
        din_im_reg46 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg46 <= dout_im_v_45;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_112_process
      if (reset == 1'b1) begin
        din_im_reg47 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg47 <= dout_im_v_46;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_113_process
      if (reset == 1'b1) begin
        din_im_reg48 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg48 <= dout_im_v_47;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_114_process
      if (reset == 1'b1) begin
        din_im_reg49 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg49 <= dout_im_v_48;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_115_process
      if (reset == 1'b1) begin
        din_im_reg50 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg50 <= dout_im_v_49;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_116_process
      if (reset == 1'b1) begin
        din_im_reg51 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg51 <= dout_im_v_50;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_117_process
      if (reset == 1'b1) begin
        din_im_reg52 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg52 <= dout_im_v_51;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_118_process
      if (reset == 1'b1) begin
        din_im_reg53 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg53 <= dout_im_v_52;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_119_process
      if (reset == 1'b1) begin
        din_im_reg54 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg54 <= dout_im_v_53;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_120_process
      if (reset == 1'b1) begin
        din_im_reg55 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg55 <= dout_im_v_54;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_121_process
      if (reset == 1'b1) begin
        din_im_reg56 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg56 <= dout_im_v_55;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_122_process
      if (reset == 1'b1) begin
        din_im_reg57 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg57 <= dout_im_v_56;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_123_process
      if (reset == 1'b1) begin
        din_im_reg58 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg58 <= dout_im_v_57;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_124_process
      if (reset == 1'b1) begin
        din_im_reg59 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg59 <= dout_im_v_58;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_125_process
      if (reset == 1'b1) begin
        din_im_reg60 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg60 <= dout_im_v_59;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_126_process
      if (reset == 1'b1) begin
        din_im_reg61 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg61 <= dout_im_v_60;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_127_process
      if (reset == 1'b1) begin
        din_im_reg62 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg62 <= dout_im_v_61;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_128_process
      if (reset == 1'b1) begin
        din_im_reg63 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg63 <= dout_im_v_62;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_129_process
      if (reset == 1'b1) begin
        din_im_reg64 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          din_im_reg64 <= dout_im_v_63;
        end
      end
    end



  assign memIn_im = (MUXSel == 6'b000000 ? din_im_reg1 :
              (MUXSel == 6'b000001 ? din_im_reg2 :
              (MUXSel == 6'b000010 ? din_im_reg3 :
              (MUXSel == 6'b000011 ? din_im_reg4 :
              (MUXSel == 6'b000100 ? din_im_reg5 :
              (MUXSel == 6'b000101 ? din_im_reg6 :
              (MUXSel == 6'b000110 ? din_im_reg7 :
              (MUXSel == 6'b000111 ? din_im_reg8 :
              (MUXSel == 6'b001000 ? din_im_reg9 :
              (MUXSel == 6'b001001 ? din_im_reg10 :
              (MUXSel == 6'b001010 ? din_im_reg11 :
              (MUXSel == 6'b001011 ? din_im_reg12 :
              (MUXSel == 6'b001100 ? din_im_reg13 :
              (MUXSel == 6'b001101 ? din_im_reg14 :
              (MUXSel == 6'b001110 ? din_im_reg15 :
              (MUXSel == 6'b001111 ? din_im_reg16 :
              (MUXSel == 6'b010000 ? din_im_reg17 :
              (MUXSel == 6'b010001 ? din_im_reg18 :
              (MUXSel == 6'b010010 ? din_im_reg19 :
              (MUXSel == 6'b010011 ? din_im_reg20 :
              (MUXSel == 6'b010100 ? din_im_reg21 :
              (MUXSel == 6'b010101 ? din_im_reg22 :
              (MUXSel == 6'b010110 ? din_im_reg23 :
              (MUXSel == 6'b010111 ? din_im_reg24 :
              (MUXSel == 6'b011000 ? din_im_reg25 :
              (MUXSel == 6'b011001 ? din_im_reg26 :
              (MUXSel == 6'b011010 ? din_im_reg27 :
              (MUXSel == 6'b011011 ? din_im_reg28 :
              (MUXSel == 6'b011100 ? din_im_reg29 :
              (MUXSel == 6'b011101 ? din_im_reg30 :
              (MUXSel == 6'b011110 ? din_im_reg31 :
              (MUXSel == 6'b011111 ? din_im_reg32 :
              (MUXSel == 6'b100000 ? din_im_reg33 :
              (MUXSel == 6'b100001 ? din_im_reg34 :
              (MUXSel == 6'b100010 ? din_im_reg35 :
              (MUXSel == 6'b100011 ? din_im_reg36 :
              (MUXSel == 6'b100100 ? din_im_reg37 :
              (MUXSel == 6'b100101 ? din_im_reg38 :
              (MUXSel == 6'b100110 ? din_im_reg39 :
              (MUXSel == 6'b100111 ? din_im_reg40 :
              (MUXSel == 6'b101000 ? din_im_reg41 :
              (MUXSel == 6'b101001 ? din_im_reg42 :
              (MUXSel == 6'b101010 ? din_im_reg43 :
              (MUXSel == 6'b101011 ? din_im_reg44 :
              (MUXSel == 6'b101100 ? din_im_reg45 :
              (MUXSel == 6'b101101 ? din_im_reg46 :
              (MUXSel == 6'b101110 ? din_im_reg47 :
              (MUXSel == 6'b101111 ? din_im_reg48 :
              (MUXSel == 6'b110000 ? din_im_reg49 :
              (MUXSel == 6'b110001 ? din_im_reg50 :
              (MUXSel == 6'b110010 ? din_im_reg51 :
              (MUXSel == 6'b110011 ? din_im_reg52 :
              (MUXSel == 6'b110100 ? din_im_reg53 :
              (MUXSel == 6'b110101 ? din_im_reg54 :
              (MUXSel == 6'b110110 ? din_im_reg55 :
              (MUXSel == 6'b110111 ? din_im_reg56 :
              (MUXSel == 6'b111000 ? din_im_reg57 :
              (MUXSel == 6'b111001 ? din_im_reg58 :
              (MUXSel == 6'b111010 ? din_im_reg59 :
              (MUXSel == 6'b111011 ? din_im_reg60 :
              (MUXSel == 6'b111100 ? din_im_reg61 :
              (MUXSel == 6'b111101 ? din_im_reg62 :
              (MUXSel == 6'b111110 ? din_im_reg63 :
              din_im_reg64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));



  always @(posedge clk or posedge reset)
    begin : intdelay_130_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 16'sb0000000000000000;
        intdelay_reg_2[1] <= 16'sb0000000000000000;
        intdelay_reg_2[2] <= 16'sb0000000000000000;
        intdelay_reg_2[3] <= 16'sb0000000000000000;
        intdelay_reg_2[4] <= 16'sb0000000000000000;
        intdelay_reg_2[5] <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          intdelay_reg_2[0] <= intdelay_reg_next_2[0];
          intdelay_reg_2[1] <= intdelay_reg_next_2[1];
          intdelay_reg_2[2] <= intdelay_reg_next_2[2];
          intdelay_reg_2[3] <= intdelay_reg_next_2[3];
          intdelay_reg_2[4] <= intdelay_reg_next_2[4];
          intdelay_reg_2[5] <= intdelay_reg_next_2[5];
        end
      end
    end

  assign memIn_im_reg = intdelay_reg_2[5];
  assign intdelay_reg_next_2[0] = memIn_im;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];
  assign intdelay_reg_next_2[2] = intdelay_reg_2[1];
  assign intdelay_reg_next_2[3] = intdelay_reg_2[2];
  assign intdelay_reg_next_2[4] = intdelay_reg_2[3];
  assign intdelay_reg_next_2[5] = intdelay_reg_2[4];



  always @(posedge clk or posedge reset)
    begin : intdelay_131_process
      if (reset == 1'b1) begin
        intdelay_reg_3[0] <= 1'b0;
        intdelay_reg_3[1] <= 1'b0;
        intdelay_reg_3[2] <= 1'b0;
        intdelay_reg_3[3] <= 1'b0;
        intdelay_reg_3[4] <= 1'b0;
        intdelay_reg_3[5] <= 1'b0;
      end
      else begin
        if (enb_1_4096_0) begin
          intdelay_reg_3[0] <= intdelay_reg_next_3[0];
          intdelay_reg_3[1] <= intdelay_reg_next_3[1];
          intdelay_reg_3[2] <= intdelay_reg_next_3[2];
          intdelay_reg_3[3] <= intdelay_reg_next_3[3];
          intdelay_reg_3[4] <= intdelay_reg_next_3[4];
          intdelay_reg_3[5] <= intdelay_reg_next_3[5];
        end
      end
    end

  assign wrAddr_reg = intdelay_reg_3[5];
  assign intdelay_reg_next_3[0] = wrAddr;
  assign intdelay_reg_next_3[1] = intdelay_reg_3[0];
  assign intdelay_reg_next_3[2] = intdelay_reg_3[1];
  assign intdelay_reg_next_3[3] = intdelay_reg_3[2];
  assign intdelay_reg_next_3[4] = intdelay_reg_3[3];
  assign intdelay_reg_next_3[5] = intdelay_reg_3[4];



  always @(posedge clk or posedge reset)
    begin : intdelay_132_process
      if (reset == 1'b1) begin
        intdelay_reg_4[0] <= 1'b0;
        intdelay_reg_4[1] <= 1'b0;
        intdelay_reg_4[2] <= 1'b0;
        intdelay_reg_4[3] <= 1'b0;
        intdelay_reg_4[4] <= 1'b0;
        intdelay_reg_4[5] <= 1'b0;
      end
      else begin
        if (enb_1_4096_0) begin
          intdelay_reg_4[0] <= intdelay_reg_next_4[0];
          intdelay_reg_4[1] <= intdelay_reg_next_4[1];
          intdelay_reg_4[2] <= intdelay_reg_next_4[2];
          intdelay_reg_4[3] <= intdelay_reg_next_4[3];
          intdelay_reg_4[4] <= intdelay_reg_next_4[4];
          intdelay_reg_4[5] <= intdelay_reg_next_4[5];
        end
      end
    end

  assign wrEnb_reg = intdelay_reg_4[5];
  assign intdelay_reg_next_4[0] = WrEnb;
  assign intdelay_reg_next_4[1] = intdelay_reg_4[0];
  assign intdelay_reg_next_4[2] = intdelay_reg_4[1];
  assign intdelay_reg_next_4[3] = intdelay_reg_4[2];
  assign intdelay_reg_next_4[4] = intdelay_reg_4[3];
  assign intdelay_reg_next_4[5] = intdelay_reg_4[4];



  // twoLocationReg_0
  always @(posedge clk or posedge reset)
    begin : twoLocationReg_0_process
      if (reset == 1'b1) begin
        twoLocationReg_0_MEM_re_0 <= 16'sb0000000000000000;
        twoLocationReg_0_MEM_im_0 <= 16'sb0000000000000000;
        twoLocationReg_0_MEM_re_1 <= 16'sb0000000000000000;
        twoLocationReg_0_MEM_im_1 <= 16'sb0000000000000000;
        twoLocationReg_0_dout_re_reg <= 16'sb0000000000000000;
        twoLocationReg_0_dout_im_reg <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          twoLocationReg_0_MEM_re_0 <= twoLocationReg_0_MEM_re_0_next;
          twoLocationReg_0_MEM_im_0 <= twoLocationReg_0_MEM_im_0_next;
          twoLocationReg_0_MEM_re_1 <= twoLocationReg_0_MEM_re_1_next;
          twoLocationReg_0_MEM_im_1 <= twoLocationReg_0_MEM_im_1_next;
          twoLocationReg_0_dout_re_reg <= twoLocationReg_0_dout_re_reg_next;
          twoLocationReg_0_dout_im_reg <= twoLocationReg_0_dout_im_reg_next;
        end
      end
    end

  always @(memIn_im_reg, memIn_re_reg, rdAddr, twoLocationReg_0_MEM_im_0,
       twoLocationReg_0_MEM_im_1, twoLocationReg_0_MEM_re_0,
       twoLocationReg_0_MEM_re_1, twoLocationReg_0_dout_im_reg,
       twoLocationReg_0_dout_re_reg, wrAddr_reg, wrEnb_reg) begin
    twoLocationReg_0_MEM_re_0_next = twoLocationReg_0_MEM_re_0;
    twoLocationReg_0_MEM_im_0_next = twoLocationReg_0_MEM_im_0;
    twoLocationReg_0_MEM_re_1_next = twoLocationReg_0_MEM_re_1;
    twoLocationReg_0_MEM_im_1_next = twoLocationReg_0_MEM_im_1;
    if (rdAddr == 1'b1) begin
      twoLocationReg_0_dout_re_reg_next = twoLocationReg_0_MEM_re_1;
      twoLocationReg_0_dout_im_reg_next = twoLocationReg_0_MEM_im_1;
    end
    else begin
      twoLocationReg_0_dout_re_reg_next = twoLocationReg_0_MEM_re_0;
      twoLocationReg_0_dout_im_reg_next = twoLocationReg_0_MEM_im_0;
    end
    if (wrEnb_reg) begin
      if (wrAddr_reg == 1'b1) begin
        twoLocationReg_0_MEM_re_1_next = memIn_re_reg;
        twoLocationReg_0_MEM_im_1_next = memIn_im_reg;
      end
      else begin
        twoLocationReg_0_MEM_re_0_next = memIn_re_reg;
        twoLocationReg_0_MEM_im_0_next = memIn_im_reg;
      end
    end
    memOut_re = twoLocationReg_0_dout_re_reg;
    memOut_im = twoLocationReg_0_dout_im_reg;
  end



  // rdAddrGenBitNaturalP
  always @(posedge clk or posedge reset)
    begin : rdAddrGenBitNaturalP_process
      if (reset == 1'b1) begin
        rdAddrGenBitNaturalP_addrReg <= 1'b0;
        rdAddrGenBitNaturalP_rdCnt <= 1'b0;
        rdAddrGenBitNaturalP_rdAddrReg <= 1'b0;
        rdAddrGenBitNaturalP_rdOddFrame <= 1'b0;
        rdAddrGenBitNaturalP_vldOutReg <= 1'b0;
        rdAddrGenBitNaturalP_rdState <= 1'b0;
        rdAddrGenBitNaturalP_FFTIdxO <= 7'b0110111;
        rdAddrGenBitNaturalP_startOutReg <= 1'b0;
        rdAddrGenBitNaturalP_endOutReg <= 1'b0;
        rdAddrGenBitNaturalP_startOutRegDly <= 1'b0;
        rdAddrGenBitNaturalP_endOutRegDly <= 1'b0;
      end
      else begin
        if (enb_1_4096_0) begin
          rdAddrGenBitNaturalP_addrReg <= rdAddrGenBitNaturalP_addrReg_next;
          rdAddrGenBitNaturalP_rdOddFrame <= rdAddrGenBitNaturalP_rdOddFrame_next;
          rdAddrGenBitNaturalP_rdAddrReg <= rdAddrGenBitNaturalP_rdAddrReg_next;
          rdAddrGenBitNaturalP_rdState <= rdAddrGenBitNaturalP_rdState_next;
          rdAddrGenBitNaturalP_vldOutReg <= rdAddrGenBitNaturalP_vldOutReg_next;
          rdAddrGenBitNaturalP_rdCnt <= rdAddrGenBitNaturalP_rdCnt_next;
          rdAddrGenBitNaturalP_FFTIdxO <= rdAddrGenBitNaturalP_FFTIdxO_next;
          rdAddrGenBitNaturalP_startOutReg <= rdAddrGenBitNaturalP_startOutReg_next;
          rdAddrGenBitNaturalP_endOutReg <= rdAddrGenBitNaturalP_endOutReg_next;
          rdAddrGenBitNaturalP_startOutRegDly <= rdAddrGenBitNaturalP_startOutRegDly_next;
          rdAddrGenBitNaturalP_endOutRegDly <= rdAddrGenBitNaturalP_endOutRegDly_next;
        end
      end
    end

  always @(memOut_im, memOut_re, rdAddrGenBitNaturalP_FFTIdxO,
       rdAddrGenBitNaturalP_addrReg, rdAddrGenBitNaturalP_endOutReg,
       rdAddrGenBitNaturalP_endOutRegDly, rdAddrGenBitNaturalP_rdAddrReg,
       rdAddrGenBitNaturalP_rdCnt, rdAddrGenBitNaturalP_rdOddFrame,
       rdAddrGenBitNaturalP_rdState, rdAddrGenBitNaturalP_startOutReg,
       rdAddrGenBitNaturalP_startOutRegDly, rdAddrGenBitNaturalP_vldOutReg,
       sampleCntDly) begin
    rdAddrGenBitNaturalP_t_0_0 = 7'b0000000;
    rdAddrGenBitNaturalP_add_temp = 2'b00;
    rdAddrGenBitNaturalP_add_temp_0 = 2'b00;
    rdAddrGenBitNaturalP_add_temp_1 = 2'b00;
    rdAddrGenBitNaturalP_t_2_0 = 2'b00;
    rdAddrGenBitNaturalP_t_3 = 2'b00;
    rdAddrGenBitNaturalP_t_1 = 2'b00;
    rdAddrGenBitNaturalP_addrReg_next = rdAddrGenBitNaturalP_addrReg;
    rdAddrGenBitNaturalP_FFTIdxO_next = rdAddrGenBitNaturalP_FFTIdxO;
    rdAddrGenBitNaturalP_rdOddFrame_next = rdAddrGenBitNaturalP_rdOddFrame;
    rdAddrGenBitNaturalP_rdState_next = rdAddrGenBitNaturalP_rdState;
    rdAddrGenBitNaturalP_vldOutReg_next = rdAddrGenBitNaturalP_vldOutReg;
    rdAddrGenBitNaturalP_rdCnt_next = rdAddrGenBitNaturalP_rdCnt;
    rdAddrGenBitNaturalP_startOutReg_next = rdAddrGenBitNaturalP_startOutReg;
    rdAddrGenBitNaturalP_endOutReg_next = rdAddrGenBitNaturalP_endOutReg;
    rdAddrGenBitNaturalP_startOutRegDly_next = rdAddrGenBitNaturalP_startOutReg;
    rdAddrGenBitNaturalP_endOutRegDly_next = rdAddrGenBitNaturalP_endOutReg;
    if (rdAddrGenBitNaturalP_rdOddFrame) begin
      rdAddrGenBitNaturalP_t_0_0 = {rdAddrGenBitNaturalP_FFTIdxO[0], rdAddrGenBitNaturalP_FFTIdxO[1], rdAddrGenBitNaturalP_FFTIdxO[2], rdAddrGenBitNaturalP_FFTIdxO[3], rdAddrGenBitNaturalP_FFTIdxO[4], rdAddrGenBitNaturalP_FFTIdxO[5], rdAddrGenBitNaturalP_FFTIdxO[6]};
      rdAddrGenBitNaturalP_rdAddrReg_next = rdAddrGenBitNaturalP_t_0_0[6] ^ rdAddrGenBitNaturalP_addrReg;
    end
    else begin
      rdAddrGenBitNaturalP_rdAddrReg_next = rdAddrGenBitNaturalP_addrReg;
    end
    case ( rdAddrGenBitNaturalP_rdState)
      1'b0 :
        begin
          rdAddrGenBitNaturalP_rdState_next = 1'b0;
          rdAddrGenBitNaturalP_endOutReg_next = 1'b0;
          rdAddrGenBitNaturalP_rdCnt_next = 1'b0;
          rdAddrGenBitNaturalP_addrReg_next = 1'b0;
          rdAddrGenBitNaturalP_vldOutReg_next = 1'b0;
          rdAddrGenBitNaturalP_startOutReg_next = 1'b0;
          rdAddrGenBitNaturalP_FFTIdxO_next = 7'b0110111;
          if (sampleCntDly == 1'b1) begin
            rdAddrGenBitNaturalP_rdState_next = 1'b1;
            rdAddrGenBitNaturalP_addrReg_next = 1'b1;
            rdAddrGenBitNaturalP_FFTIdxO_next = 7'b1110111;
            rdAddrGenBitNaturalP_startOutReg_next = 1'b1;
          end
        end
      1'b1 :
        begin
          rdAddrGenBitNaturalP_rdState_next = 1'b1;
          rdAddrGenBitNaturalP_endOutReg_next = 1'b0;
          rdAddrGenBitNaturalP_startOutReg_next = 1'b0;
          rdAddrGenBitNaturalP_vldOutReg_next = 1'b1;
          if (rdAddrGenBitNaturalP_rdCnt == 1'b1) begin
            if (sampleCntDly == 1'b1) begin
              rdAddrGenBitNaturalP_rdState_next = 1'b1;
              rdAddrGenBitNaturalP_startOutReg_next = 1'b1;
              rdAddrGenBitNaturalP_FFTIdxO_next = rdAddrGenBitNaturalP_FFTIdxO + 7'b1000000;
              rdAddrGenBitNaturalP_t_2_0 = {1'b0, rdAddrGenBitNaturalP_addrReg};
              rdAddrGenBitNaturalP_add_temp_0 = rdAddrGenBitNaturalP_t_2_0 + 2'b01;
              rdAddrGenBitNaturalP_addrReg_next = rdAddrGenBitNaturalP_add_temp_0[0];
            end
            else begin
              rdAddrGenBitNaturalP_rdState_next = 1'b0;
              rdAddrGenBitNaturalP_FFTIdxO_next = 7'b0110111;
              rdAddrGenBitNaturalP_addrReg_next = 1'b0;
            end
          end
          else begin
            rdAddrGenBitNaturalP_FFTIdxO_next = rdAddrGenBitNaturalP_FFTIdxO + 7'b1000000;
            rdAddrGenBitNaturalP_t_1 = {1'b0, rdAddrGenBitNaturalP_addrReg};
            rdAddrGenBitNaturalP_add_temp = rdAddrGenBitNaturalP_t_1 + 2'b01;
            rdAddrGenBitNaturalP_addrReg_next = rdAddrGenBitNaturalP_add_temp[0];
          end
          if (rdAddrGenBitNaturalP_rdCnt == 1'b0) begin
            rdAddrGenBitNaturalP_endOutReg_next = 1'b1;
            rdAddrGenBitNaturalP_rdOddFrame_next =  ! rdAddrGenBitNaturalP_rdOddFrame;
          end
          rdAddrGenBitNaturalP_t_3 = {1'b0, rdAddrGenBitNaturalP_rdCnt};
          rdAddrGenBitNaturalP_add_temp_1 = rdAddrGenBitNaturalP_t_3 + 2'b01;
          rdAddrGenBitNaturalP_rdCnt_next = rdAddrGenBitNaturalP_add_temp_1[0];
        end
    endcase
    rdAddr = rdAddrGenBitNaturalP_rdAddrReg;
    dMem_re56_1 = memOut_re;
    dMem_im56_1 = memOut_im;
    dMem_vld56 = rdAddrGenBitNaturalP_vldOutReg;
    startOutW = rdAddrGenBitNaturalP_startOutRegDly;
    endOutW = rdAddrGenBitNaturalP_endOutRegDly;
  end



  assign dMem_re56 = dMem_re56_1;

  assign dMem_im56 = dMem_im56_1;

endmodule  // RADIX22FFT_bitNatural_56

