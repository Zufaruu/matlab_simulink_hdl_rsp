// -------------------------------------------------------------
// 
// File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\OFDM\Tx_OFDM_Verilog\Tx_OFDM\RADIX22FFT_bitNaturalMux_41.v
// Created: 2023-06-11 16:01:43
// 
// Generated by MATLAB 9.14 and HDL Coder 4.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RADIX22FFT_bitNaturalMux_41
// Source Path: dsphdl.IFFT/RADIX22FFT_bitNaturalMux_41
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RADIX22FFT_bitNaturalMux_41
          (clk,
           reset,
           enb_1_4096_0,
           dMem_re_v_0,
           dMem_re_v_1,
           dMem_re_v_2,
           dMem_re_v_3,
           dMem_re_v_4,
           dMem_re_v_5,
           dMem_re_v_6,
           dMem_re_v_7,
           dMem_re_v_8,
           dMem_re_v_9,
           dMem_re_v_10,
           dMem_re_v_11,
           dMem_re_v_12,
           dMem_re_v_13,
           dMem_re_v_14,
           dMem_re_v_15,
           dMem_re_v_16,
           dMem_re_v_17,
           dMem_re_v_18,
           dMem_re_v_19,
           dMem_re_v_20,
           dMem_re_v_21,
           dMem_re_v_22,
           dMem_re_v_23,
           dMem_re_v_24,
           dMem_re_v_25,
           dMem_re_v_26,
           dMem_re_v_27,
           dMem_re_v_28,
           dMem_re_v_29,
           dMem_re_v_30,
           dMem_re_v_31,
           dMem_re_v_32,
           dMem_re_v_33,
           dMem_re_v_34,
           dMem_re_v_35,
           dMem_re_v_36,
           dMem_re_v_37,
           dMem_re_v_38,
           dMem_re_v_39,
           dMem_re_v_40,
           dMem_re_v_41,
           dMem_re_v_42,
           dMem_re_v_43,
           dMem_re_v_44,
           dMem_re_v_45,
           dMem_re_v_46,
           dMem_re_v_47,
           dMem_re_v_48,
           dMem_re_v_49,
           dMem_re_v_50,
           dMem_re_v_51,
           dMem_re_v_52,
           dMem_re_v_53,
           dMem_re_v_54,
           dMem_re_v_55,
           dMem_re_v_56,
           dMem_re_v_57,
           dMem_re_v_58,
           dMem_re_v_59,
           dMem_re_v_60,
           dMem_re_v_61,
           dMem_re_v_62,
           dMem_re_v_63,
           dMem_im_v_0,
           dMem_im_v_1,
           dMem_im_v_2,
           dMem_im_v_3,
           dMem_im_v_4,
           dMem_im_v_5,
           dMem_im_v_6,
           dMem_im_v_7,
           dMem_im_v_8,
           dMem_im_v_9,
           dMem_im_v_10,
           dMem_im_v_11,
           dMem_im_v_12,
           dMem_im_v_13,
           dMem_im_v_14,
           dMem_im_v_15,
           dMem_im_v_16,
           dMem_im_v_17,
           dMem_im_v_18,
           dMem_im_v_19,
           dMem_im_v_20,
           dMem_im_v_21,
           dMem_im_v_22,
           dMem_im_v_23,
           dMem_im_v_24,
           dMem_im_v_25,
           dMem_im_v_26,
           dMem_im_v_27,
           dMem_im_v_28,
           dMem_im_v_29,
           dMem_im_v_30,
           dMem_im_v_31,
           dMem_im_v_32,
           dMem_im_v_33,
           dMem_im_v_34,
           dMem_im_v_35,
           dMem_im_v_36,
           dMem_im_v_37,
           dMem_im_v_38,
           dMem_im_v_39,
           dMem_im_v_40,
           dMem_im_v_41,
           dMem_im_v_42,
           dMem_im_v_43,
           dMem_im_v_44,
           dMem_im_v_45,
           dMem_im_v_46,
           dMem_im_v_47,
           dMem_im_v_48,
           dMem_im_v_49,
           dMem_im_v_50,
           dMem_im_v_51,
           dMem_im_v_52,
           dMem_im_v_53,
           dMem_im_v_54,
           dMem_im_v_55,
           dMem_im_v_56,
           dMem_im_v_57,
           dMem_im_v_58,
           dMem_im_v_59,
           dMem_im_v_60,
           dMem_im_v_61,
           dMem_im_v_62,
           dMem_im_v_63,
           dMem_vld1,
           dMux_re41,
           dMux_im41);


  input   clk;
  input   reset;
  input   enb_1_4096_0;
  input   signed [15:0] dMem_re_v_0;  // sfix16_En14
  input   signed [15:0] dMem_re_v_1;  // sfix16_En14
  input   signed [15:0] dMem_re_v_2;  // sfix16_En14
  input   signed [15:0] dMem_re_v_3;  // sfix16_En14
  input   signed [15:0] dMem_re_v_4;  // sfix16_En14
  input   signed [15:0] dMem_re_v_5;  // sfix16_En14
  input   signed [15:0] dMem_re_v_6;  // sfix16_En14
  input   signed [15:0] dMem_re_v_7;  // sfix16_En14
  input   signed [15:0] dMem_re_v_8;  // sfix16_En14
  input   signed [15:0] dMem_re_v_9;  // sfix16_En14
  input   signed [15:0] dMem_re_v_10;  // sfix16_En14
  input   signed [15:0] dMem_re_v_11;  // sfix16_En14
  input   signed [15:0] dMem_re_v_12;  // sfix16_En14
  input   signed [15:0] dMem_re_v_13;  // sfix16_En14
  input   signed [15:0] dMem_re_v_14;  // sfix16_En14
  input   signed [15:0] dMem_re_v_15;  // sfix16_En14
  input   signed [15:0] dMem_re_v_16;  // sfix16_En14
  input   signed [15:0] dMem_re_v_17;  // sfix16_En14
  input   signed [15:0] dMem_re_v_18;  // sfix16_En14
  input   signed [15:0] dMem_re_v_19;  // sfix16_En14
  input   signed [15:0] dMem_re_v_20;  // sfix16_En14
  input   signed [15:0] dMem_re_v_21;  // sfix16_En14
  input   signed [15:0] dMem_re_v_22;  // sfix16_En14
  input   signed [15:0] dMem_re_v_23;  // sfix16_En14
  input   signed [15:0] dMem_re_v_24;  // sfix16_En14
  input   signed [15:0] dMem_re_v_25;  // sfix16_En14
  input   signed [15:0] dMem_re_v_26;  // sfix16_En14
  input   signed [15:0] dMem_re_v_27;  // sfix16_En14
  input   signed [15:0] dMem_re_v_28;  // sfix16_En14
  input   signed [15:0] dMem_re_v_29;  // sfix16_En14
  input   signed [15:0] dMem_re_v_30;  // sfix16_En14
  input   signed [15:0] dMem_re_v_31;  // sfix16_En14
  input   signed [15:0] dMem_re_v_32;  // sfix16_En14
  input   signed [15:0] dMem_re_v_33;  // sfix16_En14
  input   signed [15:0] dMem_re_v_34;  // sfix16_En14
  input   signed [15:0] dMem_re_v_35;  // sfix16_En14
  input   signed [15:0] dMem_re_v_36;  // sfix16_En14
  input   signed [15:0] dMem_re_v_37;  // sfix16_En14
  input   signed [15:0] dMem_re_v_38;  // sfix16_En14
  input   signed [15:0] dMem_re_v_39;  // sfix16_En14
  input   signed [15:0] dMem_re_v_40;  // sfix16_En14
  input   signed [15:0] dMem_re_v_41;  // sfix16_En14
  input   signed [15:0] dMem_re_v_42;  // sfix16_En14
  input   signed [15:0] dMem_re_v_43;  // sfix16_En14
  input   signed [15:0] dMem_re_v_44;  // sfix16_En14
  input   signed [15:0] dMem_re_v_45;  // sfix16_En14
  input   signed [15:0] dMem_re_v_46;  // sfix16_En14
  input   signed [15:0] dMem_re_v_47;  // sfix16_En14
  input   signed [15:0] dMem_re_v_48;  // sfix16_En14
  input   signed [15:0] dMem_re_v_49;  // sfix16_En14
  input   signed [15:0] dMem_re_v_50;  // sfix16_En14
  input   signed [15:0] dMem_re_v_51;  // sfix16_En14
  input   signed [15:0] dMem_re_v_52;  // sfix16_En14
  input   signed [15:0] dMem_re_v_53;  // sfix16_En14
  input   signed [15:0] dMem_re_v_54;  // sfix16_En14
  input   signed [15:0] dMem_re_v_55;  // sfix16_En14
  input   signed [15:0] dMem_re_v_56;  // sfix16_En14
  input   signed [15:0] dMem_re_v_57;  // sfix16_En14
  input   signed [15:0] dMem_re_v_58;  // sfix16_En14
  input   signed [15:0] dMem_re_v_59;  // sfix16_En14
  input   signed [15:0] dMem_re_v_60;  // sfix16_En14
  input   signed [15:0] dMem_re_v_61;  // sfix16_En14
  input   signed [15:0] dMem_re_v_62;  // sfix16_En14
  input   signed [15:0] dMem_re_v_63;  // sfix16_En14
  input   signed [15:0] dMem_im_v_0;  // sfix16_En14
  input   signed [15:0] dMem_im_v_1;  // sfix16_En14
  input   signed [15:0] dMem_im_v_2;  // sfix16_En14
  input   signed [15:0] dMem_im_v_3;  // sfix16_En14
  input   signed [15:0] dMem_im_v_4;  // sfix16_En14
  input   signed [15:0] dMem_im_v_5;  // sfix16_En14
  input   signed [15:0] dMem_im_v_6;  // sfix16_En14
  input   signed [15:0] dMem_im_v_7;  // sfix16_En14
  input   signed [15:0] dMem_im_v_8;  // sfix16_En14
  input   signed [15:0] dMem_im_v_9;  // sfix16_En14
  input   signed [15:0] dMem_im_v_10;  // sfix16_En14
  input   signed [15:0] dMem_im_v_11;  // sfix16_En14
  input   signed [15:0] dMem_im_v_12;  // sfix16_En14
  input   signed [15:0] dMem_im_v_13;  // sfix16_En14
  input   signed [15:0] dMem_im_v_14;  // sfix16_En14
  input   signed [15:0] dMem_im_v_15;  // sfix16_En14
  input   signed [15:0] dMem_im_v_16;  // sfix16_En14
  input   signed [15:0] dMem_im_v_17;  // sfix16_En14
  input   signed [15:0] dMem_im_v_18;  // sfix16_En14
  input   signed [15:0] dMem_im_v_19;  // sfix16_En14
  input   signed [15:0] dMem_im_v_20;  // sfix16_En14
  input   signed [15:0] dMem_im_v_21;  // sfix16_En14
  input   signed [15:0] dMem_im_v_22;  // sfix16_En14
  input   signed [15:0] dMem_im_v_23;  // sfix16_En14
  input   signed [15:0] dMem_im_v_24;  // sfix16_En14
  input   signed [15:0] dMem_im_v_25;  // sfix16_En14
  input   signed [15:0] dMem_im_v_26;  // sfix16_En14
  input   signed [15:0] dMem_im_v_27;  // sfix16_En14
  input   signed [15:0] dMem_im_v_28;  // sfix16_En14
  input   signed [15:0] dMem_im_v_29;  // sfix16_En14
  input   signed [15:0] dMem_im_v_30;  // sfix16_En14
  input   signed [15:0] dMem_im_v_31;  // sfix16_En14
  input   signed [15:0] dMem_im_v_32;  // sfix16_En14
  input   signed [15:0] dMem_im_v_33;  // sfix16_En14
  input   signed [15:0] dMem_im_v_34;  // sfix16_En14
  input   signed [15:0] dMem_im_v_35;  // sfix16_En14
  input   signed [15:0] dMem_im_v_36;  // sfix16_En14
  input   signed [15:0] dMem_im_v_37;  // sfix16_En14
  input   signed [15:0] dMem_im_v_38;  // sfix16_En14
  input   signed [15:0] dMem_im_v_39;  // sfix16_En14
  input   signed [15:0] dMem_im_v_40;  // sfix16_En14
  input   signed [15:0] dMem_im_v_41;  // sfix16_En14
  input   signed [15:0] dMem_im_v_42;  // sfix16_En14
  input   signed [15:0] dMem_im_v_43;  // sfix16_En14
  input   signed [15:0] dMem_im_v_44;  // sfix16_En14
  input   signed [15:0] dMem_im_v_45;  // sfix16_En14
  input   signed [15:0] dMem_im_v_46;  // sfix16_En14
  input   signed [15:0] dMem_im_v_47;  // sfix16_En14
  input   signed [15:0] dMem_im_v_48;  // sfix16_En14
  input   signed [15:0] dMem_im_v_49;  // sfix16_En14
  input   signed [15:0] dMem_im_v_50;  // sfix16_En14
  input   signed [15:0] dMem_im_v_51;  // sfix16_En14
  input   signed [15:0] dMem_im_v_52;  // sfix16_En14
  input   signed [15:0] dMem_im_v_53;  // sfix16_En14
  input   signed [15:0] dMem_im_v_54;  // sfix16_En14
  input   signed [15:0] dMem_im_v_55;  // sfix16_En14
  input   signed [15:0] dMem_im_v_56;  // sfix16_En14
  input   signed [15:0] dMem_im_v_57;  // sfix16_En14
  input   signed [15:0] dMem_im_v_58;  // sfix16_En14
  input   signed [15:0] dMem_im_v_59;  // sfix16_En14
  input   signed [15:0] dMem_im_v_60;  // sfix16_En14
  input   signed [15:0] dMem_im_v_61;  // sfix16_En14
  input   signed [15:0] dMem_im_v_62;  // sfix16_En14
  input   signed [15:0] dMem_im_v_63;  // sfix16_En14
  input   dMem_vld1;
  output  signed [15:0] dMux_re41;  // sfix16_En14
  output  signed [15:0] dMux_im41;  // sfix16_En14


  reg [6:0] outMuxSel_idx;  // ufix7
  reg [5:0] outMuxSel_MUXSelReg1;  // ufix6
  reg  outMuxSel_MUXSelVldReg1;
  reg  outMuxSel_xorCnt;  // ufix1
  reg [6:0] outMuxSel_idx_next;  // ufix7
  reg [5:0] outMuxSel_MUXSelReg1_next;  // ufix6
  reg  outMuxSel_MUXSelVldReg1_next;
  reg  outMuxSel_xorCnt_next;  // ufix1
  reg [5:0] MUXSel;  // ufix6
  reg  MUXSel_vld;
  reg  [0:4] intdelay_reg;  // ufix1 [5]
  wire [0:4] intdelay_reg_next;  // ufix1 [5]
  wire dMuxSelDly_vld;
  reg signed [15:0] dMem_re_reg1;  // sfix16_En14
  reg signed [15:0] dMem_re_reg2;  // sfix16_En14
  reg signed [15:0] dMem_re_reg3;  // sfix16_En14
  reg signed [15:0] dMem_re_reg4;  // sfix16_En14
  reg signed [15:0] dMem_re_reg5;  // sfix16_En14
  reg signed [15:0] dMem_re_reg6;  // sfix16_En14
  reg signed [15:0] dMem_re_reg7;  // sfix16_En14
  reg signed [15:0] dMem_re_reg8;  // sfix16_En14
  reg signed [15:0] dMem_re_reg9;  // sfix16_En14
  reg signed [15:0] dMem_re_reg10;  // sfix16_En14
  reg signed [15:0] dMem_re_reg11;  // sfix16_En14
  reg signed [15:0] dMem_re_reg12;  // sfix16_En14
  reg signed [15:0] dMem_re_reg13;  // sfix16_En14
  reg signed [15:0] dMem_re_reg14;  // sfix16_En14
  reg signed [15:0] dMem_re_reg15;  // sfix16_En14
  reg signed [15:0] dMem_re_reg16;  // sfix16_En14
  reg signed [15:0] dMem_re_reg17;  // sfix16_En14
  reg signed [15:0] dMem_re_reg18;  // sfix16_En14
  reg signed [15:0] dMem_re_reg19;  // sfix16_En14
  reg signed [15:0] dMem_re_reg20;  // sfix16_En14
  reg signed [15:0] dMem_re_reg21;  // sfix16_En14
  reg signed [15:0] dMem_re_reg22;  // sfix16_En14
  reg signed [15:0] dMem_re_reg23;  // sfix16_En14
  reg signed [15:0] dMem_re_reg24;  // sfix16_En14
  reg signed [15:0] dMem_re_reg25;  // sfix16_En14
  reg signed [15:0] dMem_re_reg26;  // sfix16_En14
  reg signed [15:0] dMem_re_reg27;  // sfix16_En14
  reg signed [15:0] dMem_re_reg28;  // sfix16_En14
  reg signed [15:0] dMem_re_reg29;  // sfix16_En14
  reg signed [15:0] dMem_re_reg30;  // sfix16_En14
  reg signed [15:0] dMem_re_reg31;  // sfix16_En14
  reg signed [15:0] dMem_re_reg32;  // sfix16_En14
  reg signed [15:0] dMem_re_reg33;  // sfix16_En14
  reg signed [15:0] dMem_re_reg34;  // sfix16_En14
  reg signed [15:0] dMem_re_reg35;  // sfix16_En14
  reg signed [15:0] dMem_re_reg36;  // sfix16_En14
  reg signed [15:0] dMem_re_reg37;  // sfix16_En14
  reg signed [15:0] dMem_re_reg38;  // sfix16_En14
  reg signed [15:0] dMem_re_reg39;  // sfix16_En14
  reg signed [15:0] dMem_re_reg40;  // sfix16_En14
  reg signed [15:0] dMem_re_reg41;  // sfix16_En14
  reg signed [15:0] dMem_re_reg42;  // sfix16_En14
  reg signed [15:0] dMem_re_reg43;  // sfix16_En14
  reg signed [15:0] dMem_re_reg44;  // sfix16_En14
  reg signed [15:0] dMem_re_reg45;  // sfix16_En14
  reg signed [15:0] dMem_re_reg46;  // sfix16_En14
  reg signed [15:0] dMem_re_reg47;  // sfix16_En14
  reg signed [15:0] dMem_re_reg48;  // sfix16_En14
  reg signed [15:0] dMem_re_reg49;  // sfix16_En14
  reg signed [15:0] dMem_re_reg50;  // sfix16_En14
  reg signed [15:0] dMem_re_reg51;  // sfix16_En14
  reg signed [15:0] dMem_re_reg52;  // sfix16_En14
  reg signed [15:0] dMem_re_reg53;  // sfix16_En14
  reg signed [15:0] dMem_re_reg54;  // sfix16_En14
  reg signed [15:0] dMem_re_reg55;  // sfix16_En14
  reg signed [15:0] dMem_re_reg56;  // sfix16_En14
  reg signed [15:0] dMem_re_reg57;  // sfix16_En14
  reg signed [15:0] dMem_re_reg58;  // sfix16_En14
  reg signed [15:0] dMem_re_reg59;  // sfix16_En14
  reg signed [15:0] dMem_re_reg60;  // sfix16_En14
  reg signed [15:0] dMem_re_reg61;  // sfix16_En14
  reg signed [15:0] dMem_re_reg62;  // sfix16_En14
  reg signed [15:0] dMem_re_reg63;  // sfix16_En14
  reg signed [15:0] dMem_re_reg64;  // sfix16_En14
  wire signed [15:0] dMux_re;  // sfix16_En14
  reg signed [15:0] intdelay_reg_1 [0:4];  // sfix16 [5]
  wire signed [15:0] intdelay_reg_next_1 [0:4];  // sfix16_En14 [5]
  wire signed [15:0] dMuxDly_re;  // sfix16_En14
  reg signed [15:0] dMux_re41_1;  // sfix16_En14
  reg signed [15:0] dMem_im_reg1;  // sfix16_En14
  reg signed [15:0] dMem_im_reg2;  // sfix16_En14
  reg signed [15:0] dMem_im_reg3;  // sfix16_En14
  reg signed [15:0] dMem_im_reg4;  // sfix16_En14
  reg signed [15:0] dMem_im_reg5;  // sfix16_En14
  reg signed [15:0] dMem_im_reg6;  // sfix16_En14
  reg signed [15:0] dMem_im_reg7;  // sfix16_En14
  reg signed [15:0] dMem_im_reg8;  // sfix16_En14
  reg signed [15:0] dMem_im_reg9;  // sfix16_En14
  reg signed [15:0] dMem_im_reg10;  // sfix16_En14
  reg signed [15:0] dMem_im_reg11;  // sfix16_En14
  reg signed [15:0] dMem_im_reg12;  // sfix16_En14
  reg signed [15:0] dMem_im_reg13;  // sfix16_En14
  reg signed [15:0] dMem_im_reg14;  // sfix16_En14
  reg signed [15:0] dMem_im_reg15;  // sfix16_En14
  reg signed [15:0] dMem_im_reg16;  // sfix16_En14
  reg signed [15:0] dMem_im_reg17;  // sfix16_En14
  reg signed [15:0] dMem_im_reg18;  // sfix16_En14
  reg signed [15:0] dMem_im_reg19;  // sfix16_En14
  reg signed [15:0] dMem_im_reg20;  // sfix16_En14
  reg signed [15:0] dMem_im_reg21;  // sfix16_En14
  reg signed [15:0] dMem_im_reg22;  // sfix16_En14
  reg signed [15:0] dMem_im_reg23;  // sfix16_En14
  reg signed [15:0] dMem_im_reg24;  // sfix16_En14
  reg signed [15:0] dMem_im_reg25;  // sfix16_En14
  reg signed [15:0] dMem_im_reg26;  // sfix16_En14
  reg signed [15:0] dMem_im_reg27;  // sfix16_En14
  reg signed [15:0] dMem_im_reg28;  // sfix16_En14
  reg signed [15:0] dMem_im_reg29;  // sfix16_En14
  reg signed [15:0] dMem_im_reg30;  // sfix16_En14
  reg signed [15:0] dMem_im_reg31;  // sfix16_En14
  reg signed [15:0] dMem_im_reg32;  // sfix16_En14
  reg signed [15:0] dMem_im_reg33;  // sfix16_En14
  reg signed [15:0] dMem_im_reg34;  // sfix16_En14
  reg signed [15:0] dMem_im_reg35;  // sfix16_En14
  reg signed [15:0] dMem_im_reg36;  // sfix16_En14
  reg signed [15:0] dMem_im_reg37;  // sfix16_En14
  reg signed [15:0] dMem_im_reg38;  // sfix16_En14
  reg signed [15:0] dMem_im_reg39;  // sfix16_En14
  reg signed [15:0] dMem_im_reg40;  // sfix16_En14
  reg signed [15:0] dMem_im_reg41;  // sfix16_En14
  reg signed [15:0] dMem_im_reg42;  // sfix16_En14
  reg signed [15:0] dMem_im_reg43;  // sfix16_En14
  reg signed [15:0] dMem_im_reg44;  // sfix16_En14
  reg signed [15:0] dMem_im_reg45;  // sfix16_En14
  reg signed [15:0] dMem_im_reg46;  // sfix16_En14
  reg signed [15:0] dMem_im_reg47;  // sfix16_En14
  reg signed [15:0] dMem_im_reg48;  // sfix16_En14
  reg signed [15:0] dMem_im_reg49;  // sfix16_En14
  reg signed [15:0] dMem_im_reg50;  // sfix16_En14
  reg signed [15:0] dMem_im_reg51;  // sfix16_En14
  reg signed [15:0] dMem_im_reg52;  // sfix16_En14
  reg signed [15:0] dMem_im_reg53;  // sfix16_En14
  reg signed [15:0] dMem_im_reg54;  // sfix16_En14
  reg signed [15:0] dMem_im_reg55;  // sfix16_En14
  reg signed [15:0] dMem_im_reg56;  // sfix16_En14
  reg signed [15:0] dMem_im_reg57;  // sfix16_En14
  reg signed [15:0] dMem_im_reg58;  // sfix16_En14
  reg signed [15:0] dMem_im_reg59;  // sfix16_En14
  reg signed [15:0] dMem_im_reg60;  // sfix16_En14
  reg signed [15:0] dMem_im_reg61;  // sfix16_En14
  reg signed [15:0] dMem_im_reg62;  // sfix16_En14
  reg signed [15:0] dMem_im_reg63;  // sfix16_En14
  reg signed [15:0] dMem_im_reg64;  // sfix16_En14
  wire signed [15:0] dMux_im;  // sfix16_En14
  reg signed [15:0] intdelay_reg_2 [0:4];  // sfix16 [5]
  wire signed [15:0] intdelay_reg_next_2 [0:4];  // sfix16_En14 [5]
  wire signed [15:0] dMuxDly_im;  // sfix16_En14
  reg signed [15:0] dMux_im41_1;  // sfix16_En14
  reg [1:0] outMuxSel_add_temp;  // ufix2
  reg  outMuxSel_t_0_0;  // ufix1
  reg [5:0] outMuxSel_t_1;  // ufix6
  reg [1:0] outMuxSel_t_2_0;  // ufix2


  // outMuxSel
  always @(posedge clk or posedge reset)
    begin : outMuxSel_process
      if (reset == 1'b1) begin
        outMuxSel_MUXSelReg1 <= 6'b000000;
        outMuxSel_MUXSelVldReg1 <= 1'b0;
        outMuxSel_idx <= 7'b0101000;
        outMuxSel_xorCnt <= 1'b0;
      end
      else begin
        if (enb_1_4096_0) begin
          outMuxSel_idx <= outMuxSel_idx_next;
          outMuxSel_MUXSelReg1 <= outMuxSel_MUXSelReg1_next;
          outMuxSel_MUXSelVldReg1 <= outMuxSel_MUXSelVldReg1_next;
          outMuxSel_xorCnt <= outMuxSel_xorCnt_next;
        end
      end
    end

  always @(dMem_vld1, outMuxSel_MUXSelReg1, outMuxSel_MUXSelVldReg1, outMuxSel_idx,
       outMuxSel_xorCnt) begin
    outMuxSel_add_temp = 2'b00;
    outMuxSel_t_2_0 = 2'b00;
    outMuxSel_idx_next = outMuxSel_idx;
    outMuxSel_xorCnt_next = outMuxSel_xorCnt;
    outMuxSel_t_0_0 = outMuxSel_xorCnt;
    outMuxSel_t_1 = {5'b0, outMuxSel_t_0_0};
    outMuxSel_MUXSelReg1_next = outMuxSel_idx[5:0] ^ outMuxSel_t_1;
    outMuxSel_MUXSelVldReg1_next = dMem_vld1;
    if (dMem_vld1) begin
      outMuxSel_idx_next = outMuxSel_idx + 7'b1000000;
      outMuxSel_t_2_0 = {1'b0, outMuxSel_xorCnt};
      outMuxSel_add_temp = outMuxSel_t_2_0 + 2'b01;
      outMuxSel_xorCnt_next = outMuxSel_add_temp[0];
    end
    MUXSel = outMuxSel_MUXSelReg1;
    MUXSel_vld = outMuxSel_MUXSelVldReg1;
  end



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        intdelay_reg[0] <= 1'b0;
        intdelay_reg[1] <= 1'b0;
        intdelay_reg[2] <= 1'b0;
        intdelay_reg[3] <= 1'b0;
        intdelay_reg[4] <= 1'b0;
      end
      else begin
        if (enb_1_4096_0) begin
          intdelay_reg[0] <= intdelay_reg_next[0];
          intdelay_reg[1] <= intdelay_reg_next[1];
          intdelay_reg[2] <= intdelay_reg_next[2];
          intdelay_reg[3] <= intdelay_reg_next[3];
          intdelay_reg[4] <= intdelay_reg_next[4];
        end
      end
    end

  assign dMuxSelDly_vld = intdelay_reg[4];
  assign intdelay_reg_next[0] = MUXSel_vld;
  assign intdelay_reg_next[1] = intdelay_reg[0];
  assign intdelay_reg_next[2] = intdelay_reg[1];
  assign intdelay_reg_next[3] = intdelay_reg[2];
  assign intdelay_reg_next[4] = intdelay_reg[3];



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        dMem_re_reg1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg1 <= dMem_re_v_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        dMem_re_reg2 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg2 <= dMem_re_v_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        dMem_re_reg3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg3 <= dMem_re_v_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        dMem_re_reg4 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg4 <= dMem_re_v_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        dMem_re_reg5 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg5 <= dMem_re_v_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        dMem_re_reg6 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg6 <= dMem_re_v_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        dMem_re_reg7 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg7 <= dMem_re_v_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        dMem_re_reg8 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg8 <= dMem_re_v_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        dMem_re_reg9 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg9 <= dMem_re_v_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        dMem_re_reg10 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg10 <= dMem_re_v_9;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        dMem_re_reg11 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg11 <= dMem_re_v_10;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        dMem_re_reg12 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg12 <= dMem_re_v_11;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        dMem_re_reg13 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg13 <= dMem_re_v_12;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        dMem_re_reg14 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg14 <= dMem_re_v_13;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        dMem_re_reg15 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg15 <= dMem_re_v_14;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        dMem_re_reg16 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg16 <= dMem_re_v_15;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        dMem_re_reg17 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg17 <= dMem_re_v_16;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_18_process
      if (reset == 1'b1) begin
        dMem_re_reg18 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg18 <= dMem_re_v_17;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_19_process
      if (reset == 1'b1) begin
        dMem_re_reg19 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg19 <= dMem_re_v_18;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_20_process
      if (reset == 1'b1) begin
        dMem_re_reg20 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg20 <= dMem_re_v_19;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_21_process
      if (reset == 1'b1) begin
        dMem_re_reg21 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg21 <= dMem_re_v_20;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_22_process
      if (reset == 1'b1) begin
        dMem_re_reg22 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg22 <= dMem_re_v_21;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_23_process
      if (reset == 1'b1) begin
        dMem_re_reg23 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg23 <= dMem_re_v_22;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_24_process
      if (reset == 1'b1) begin
        dMem_re_reg24 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg24 <= dMem_re_v_23;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_25_process
      if (reset == 1'b1) begin
        dMem_re_reg25 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg25 <= dMem_re_v_24;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_26_process
      if (reset == 1'b1) begin
        dMem_re_reg26 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg26 <= dMem_re_v_25;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_27_process
      if (reset == 1'b1) begin
        dMem_re_reg27 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg27 <= dMem_re_v_26;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_28_process
      if (reset == 1'b1) begin
        dMem_re_reg28 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg28 <= dMem_re_v_27;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_29_process
      if (reset == 1'b1) begin
        dMem_re_reg29 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg29 <= dMem_re_v_28;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_30_process
      if (reset == 1'b1) begin
        dMem_re_reg30 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg30 <= dMem_re_v_29;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_31_process
      if (reset == 1'b1) begin
        dMem_re_reg31 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg31 <= dMem_re_v_30;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_32_process
      if (reset == 1'b1) begin
        dMem_re_reg32 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg32 <= dMem_re_v_31;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_33_process
      if (reset == 1'b1) begin
        dMem_re_reg33 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg33 <= dMem_re_v_32;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_34_process
      if (reset == 1'b1) begin
        dMem_re_reg34 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg34 <= dMem_re_v_33;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_35_process
      if (reset == 1'b1) begin
        dMem_re_reg35 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg35 <= dMem_re_v_34;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_36_process
      if (reset == 1'b1) begin
        dMem_re_reg36 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg36 <= dMem_re_v_35;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_37_process
      if (reset == 1'b1) begin
        dMem_re_reg37 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg37 <= dMem_re_v_36;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_38_process
      if (reset == 1'b1) begin
        dMem_re_reg38 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg38 <= dMem_re_v_37;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_39_process
      if (reset == 1'b1) begin
        dMem_re_reg39 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg39 <= dMem_re_v_38;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_40_process
      if (reset == 1'b1) begin
        dMem_re_reg40 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg40 <= dMem_re_v_39;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_41_process
      if (reset == 1'b1) begin
        dMem_re_reg41 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg41 <= dMem_re_v_40;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_42_process
      if (reset == 1'b1) begin
        dMem_re_reg42 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg42 <= dMem_re_v_41;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_43_process
      if (reset == 1'b1) begin
        dMem_re_reg43 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg43 <= dMem_re_v_42;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_44_process
      if (reset == 1'b1) begin
        dMem_re_reg44 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg44 <= dMem_re_v_43;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_45_process
      if (reset == 1'b1) begin
        dMem_re_reg45 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg45 <= dMem_re_v_44;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_46_process
      if (reset == 1'b1) begin
        dMem_re_reg46 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg46 <= dMem_re_v_45;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_47_process
      if (reset == 1'b1) begin
        dMem_re_reg47 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg47 <= dMem_re_v_46;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_48_process
      if (reset == 1'b1) begin
        dMem_re_reg48 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg48 <= dMem_re_v_47;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_49_process
      if (reset == 1'b1) begin
        dMem_re_reg49 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg49 <= dMem_re_v_48;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_50_process
      if (reset == 1'b1) begin
        dMem_re_reg50 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg50 <= dMem_re_v_49;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_51_process
      if (reset == 1'b1) begin
        dMem_re_reg51 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg51 <= dMem_re_v_50;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_52_process
      if (reset == 1'b1) begin
        dMem_re_reg52 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg52 <= dMem_re_v_51;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_53_process
      if (reset == 1'b1) begin
        dMem_re_reg53 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg53 <= dMem_re_v_52;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_54_process
      if (reset == 1'b1) begin
        dMem_re_reg54 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg54 <= dMem_re_v_53;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_55_process
      if (reset == 1'b1) begin
        dMem_re_reg55 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg55 <= dMem_re_v_54;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_56_process
      if (reset == 1'b1) begin
        dMem_re_reg56 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg56 <= dMem_re_v_55;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_57_process
      if (reset == 1'b1) begin
        dMem_re_reg57 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg57 <= dMem_re_v_56;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_58_process
      if (reset == 1'b1) begin
        dMem_re_reg58 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg58 <= dMem_re_v_57;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_59_process
      if (reset == 1'b1) begin
        dMem_re_reg59 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg59 <= dMem_re_v_58;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_60_process
      if (reset == 1'b1) begin
        dMem_re_reg60 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg60 <= dMem_re_v_59;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_61_process
      if (reset == 1'b1) begin
        dMem_re_reg61 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg61 <= dMem_re_v_60;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_62_process
      if (reset == 1'b1) begin
        dMem_re_reg62 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg62 <= dMem_re_v_61;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_63_process
      if (reset == 1'b1) begin
        dMem_re_reg63 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg63 <= dMem_re_v_62;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_64_process
      if (reset == 1'b1) begin
        dMem_re_reg64 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_re_reg64 <= dMem_re_v_63;
        end
      end
    end



  assign dMux_re = (MUXSel == 6'b000000 ? dMem_re_reg1 :
              (MUXSel == 6'b000001 ? dMem_re_reg2 :
              (MUXSel == 6'b000010 ? dMem_re_reg3 :
              (MUXSel == 6'b000011 ? dMem_re_reg4 :
              (MUXSel == 6'b000100 ? dMem_re_reg5 :
              (MUXSel == 6'b000101 ? dMem_re_reg6 :
              (MUXSel == 6'b000110 ? dMem_re_reg7 :
              (MUXSel == 6'b000111 ? dMem_re_reg8 :
              (MUXSel == 6'b001000 ? dMem_re_reg9 :
              (MUXSel == 6'b001001 ? dMem_re_reg10 :
              (MUXSel == 6'b001010 ? dMem_re_reg11 :
              (MUXSel == 6'b001011 ? dMem_re_reg12 :
              (MUXSel == 6'b001100 ? dMem_re_reg13 :
              (MUXSel == 6'b001101 ? dMem_re_reg14 :
              (MUXSel == 6'b001110 ? dMem_re_reg15 :
              (MUXSel == 6'b001111 ? dMem_re_reg16 :
              (MUXSel == 6'b010000 ? dMem_re_reg17 :
              (MUXSel == 6'b010001 ? dMem_re_reg18 :
              (MUXSel == 6'b010010 ? dMem_re_reg19 :
              (MUXSel == 6'b010011 ? dMem_re_reg20 :
              (MUXSel == 6'b010100 ? dMem_re_reg21 :
              (MUXSel == 6'b010101 ? dMem_re_reg22 :
              (MUXSel == 6'b010110 ? dMem_re_reg23 :
              (MUXSel == 6'b010111 ? dMem_re_reg24 :
              (MUXSel == 6'b011000 ? dMem_re_reg25 :
              (MUXSel == 6'b011001 ? dMem_re_reg26 :
              (MUXSel == 6'b011010 ? dMem_re_reg27 :
              (MUXSel == 6'b011011 ? dMem_re_reg28 :
              (MUXSel == 6'b011100 ? dMem_re_reg29 :
              (MUXSel == 6'b011101 ? dMem_re_reg30 :
              (MUXSel == 6'b011110 ? dMem_re_reg31 :
              (MUXSel == 6'b011111 ? dMem_re_reg32 :
              (MUXSel == 6'b100000 ? dMem_re_reg33 :
              (MUXSel == 6'b100001 ? dMem_re_reg34 :
              (MUXSel == 6'b100010 ? dMem_re_reg35 :
              (MUXSel == 6'b100011 ? dMem_re_reg36 :
              (MUXSel == 6'b100100 ? dMem_re_reg37 :
              (MUXSel == 6'b100101 ? dMem_re_reg38 :
              (MUXSel == 6'b100110 ? dMem_re_reg39 :
              (MUXSel == 6'b100111 ? dMem_re_reg40 :
              (MUXSel == 6'b101000 ? dMem_re_reg41 :
              (MUXSel == 6'b101001 ? dMem_re_reg42 :
              (MUXSel == 6'b101010 ? dMem_re_reg43 :
              (MUXSel == 6'b101011 ? dMem_re_reg44 :
              (MUXSel == 6'b101100 ? dMem_re_reg45 :
              (MUXSel == 6'b101101 ? dMem_re_reg46 :
              (MUXSel == 6'b101110 ? dMem_re_reg47 :
              (MUXSel == 6'b101111 ? dMem_re_reg48 :
              (MUXSel == 6'b110000 ? dMem_re_reg49 :
              (MUXSel == 6'b110001 ? dMem_re_reg50 :
              (MUXSel == 6'b110010 ? dMem_re_reg51 :
              (MUXSel == 6'b110011 ? dMem_re_reg52 :
              (MUXSel == 6'b110100 ? dMem_re_reg53 :
              (MUXSel == 6'b110101 ? dMem_re_reg54 :
              (MUXSel == 6'b110110 ? dMem_re_reg55 :
              (MUXSel == 6'b110111 ? dMem_re_reg56 :
              (MUXSel == 6'b111000 ? dMem_re_reg57 :
              (MUXSel == 6'b111001 ? dMem_re_reg58 :
              (MUXSel == 6'b111010 ? dMem_re_reg59 :
              (MUXSel == 6'b111011 ? dMem_re_reg60 :
              (MUXSel == 6'b111100 ? dMem_re_reg61 :
              (MUXSel == 6'b111101 ? dMem_re_reg62 :
              (MUXSel == 6'b111110 ? dMem_re_reg63 :
              dMem_re_reg64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));



  always @(posedge clk or posedge reset)
    begin : intdelay_65_process
      if (reset == 1'b1) begin
        intdelay_reg_1[0] <= 16'sb0000000000000000;
        intdelay_reg_1[1] <= 16'sb0000000000000000;
        intdelay_reg_1[2] <= 16'sb0000000000000000;
        intdelay_reg_1[3] <= 16'sb0000000000000000;
        intdelay_reg_1[4] <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          intdelay_reg_1[0] <= intdelay_reg_next_1[0];
          intdelay_reg_1[1] <= intdelay_reg_next_1[1];
          intdelay_reg_1[2] <= intdelay_reg_next_1[2];
          intdelay_reg_1[3] <= intdelay_reg_next_1[3];
          intdelay_reg_1[4] <= intdelay_reg_next_1[4];
        end
      end
    end

  assign dMuxDly_re = intdelay_reg_1[4];
  assign intdelay_reg_next_1[0] = dMux_re;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];
  assign intdelay_reg_next_1[2] = intdelay_reg_1[1];
  assign intdelay_reg_next_1[3] = intdelay_reg_1[2];
  assign intdelay_reg_next_1[4] = intdelay_reg_1[3];



  always @(posedge clk or posedge reset)
    begin : intdelay_66_process
      if (reset == 1'b1) begin
        dMux_re41_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0 && dMuxSelDly_vld) begin
          dMux_re41_1 <= dMuxDly_re;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_67_process
      if (reset == 1'b1) begin
        dMem_im_reg1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg1 <= dMem_im_v_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_68_process
      if (reset == 1'b1) begin
        dMem_im_reg2 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg2 <= dMem_im_v_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_69_process
      if (reset == 1'b1) begin
        dMem_im_reg3 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg3 <= dMem_im_v_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_70_process
      if (reset == 1'b1) begin
        dMem_im_reg4 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg4 <= dMem_im_v_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_71_process
      if (reset == 1'b1) begin
        dMem_im_reg5 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg5 <= dMem_im_v_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_72_process
      if (reset == 1'b1) begin
        dMem_im_reg6 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg6 <= dMem_im_v_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_73_process
      if (reset == 1'b1) begin
        dMem_im_reg7 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg7 <= dMem_im_v_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_74_process
      if (reset == 1'b1) begin
        dMem_im_reg8 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg8 <= dMem_im_v_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_75_process
      if (reset == 1'b1) begin
        dMem_im_reg9 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg9 <= dMem_im_v_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_76_process
      if (reset == 1'b1) begin
        dMem_im_reg10 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg10 <= dMem_im_v_9;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_77_process
      if (reset == 1'b1) begin
        dMem_im_reg11 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg11 <= dMem_im_v_10;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_78_process
      if (reset == 1'b1) begin
        dMem_im_reg12 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg12 <= dMem_im_v_11;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_79_process
      if (reset == 1'b1) begin
        dMem_im_reg13 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg13 <= dMem_im_v_12;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_80_process
      if (reset == 1'b1) begin
        dMem_im_reg14 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg14 <= dMem_im_v_13;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_81_process
      if (reset == 1'b1) begin
        dMem_im_reg15 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg15 <= dMem_im_v_14;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_82_process
      if (reset == 1'b1) begin
        dMem_im_reg16 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg16 <= dMem_im_v_15;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_83_process
      if (reset == 1'b1) begin
        dMem_im_reg17 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg17 <= dMem_im_v_16;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_84_process
      if (reset == 1'b1) begin
        dMem_im_reg18 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg18 <= dMem_im_v_17;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_85_process
      if (reset == 1'b1) begin
        dMem_im_reg19 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg19 <= dMem_im_v_18;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_86_process
      if (reset == 1'b1) begin
        dMem_im_reg20 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg20 <= dMem_im_v_19;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_87_process
      if (reset == 1'b1) begin
        dMem_im_reg21 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg21 <= dMem_im_v_20;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_88_process
      if (reset == 1'b1) begin
        dMem_im_reg22 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg22 <= dMem_im_v_21;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_89_process
      if (reset == 1'b1) begin
        dMem_im_reg23 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg23 <= dMem_im_v_22;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_90_process
      if (reset == 1'b1) begin
        dMem_im_reg24 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg24 <= dMem_im_v_23;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_91_process
      if (reset == 1'b1) begin
        dMem_im_reg25 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg25 <= dMem_im_v_24;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_92_process
      if (reset == 1'b1) begin
        dMem_im_reg26 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg26 <= dMem_im_v_25;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_93_process
      if (reset == 1'b1) begin
        dMem_im_reg27 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg27 <= dMem_im_v_26;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_94_process
      if (reset == 1'b1) begin
        dMem_im_reg28 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg28 <= dMem_im_v_27;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_95_process
      if (reset == 1'b1) begin
        dMem_im_reg29 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg29 <= dMem_im_v_28;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_96_process
      if (reset == 1'b1) begin
        dMem_im_reg30 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg30 <= dMem_im_v_29;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_97_process
      if (reset == 1'b1) begin
        dMem_im_reg31 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg31 <= dMem_im_v_30;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_98_process
      if (reset == 1'b1) begin
        dMem_im_reg32 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg32 <= dMem_im_v_31;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_99_process
      if (reset == 1'b1) begin
        dMem_im_reg33 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg33 <= dMem_im_v_32;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_100_process
      if (reset == 1'b1) begin
        dMem_im_reg34 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg34 <= dMem_im_v_33;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_101_process
      if (reset == 1'b1) begin
        dMem_im_reg35 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg35 <= dMem_im_v_34;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_102_process
      if (reset == 1'b1) begin
        dMem_im_reg36 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg36 <= dMem_im_v_35;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_103_process
      if (reset == 1'b1) begin
        dMem_im_reg37 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg37 <= dMem_im_v_36;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_104_process
      if (reset == 1'b1) begin
        dMem_im_reg38 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg38 <= dMem_im_v_37;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_105_process
      if (reset == 1'b1) begin
        dMem_im_reg39 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg39 <= dMem_im_v_38;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_106_process
      if (reset == 1'b1) begin
        dMem_im_reg40 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg40 <= dMem_im_v_39;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_107_process
      if (reset == 1'b1) begin
        dMem_im_reg41 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg41 <= dMem_im_v_40;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_108_process
      if (reset == 1'b1) begin
        dMem_im_reg42 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg42 <= dMem_im_v_41;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_109_process
      if (reset == 1'b1) begin
        dMem_im_reg43 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg43 <= dMem_im_v_42;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_110_process
      if (reset == 1'b1) begin
        dMem_im_reg44 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg44 <= dMem_im_v_43;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_111_process
      if (reset == 1'b1) begin
        dMem_im_reg45 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg45 <= dMem_im_v_44;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_112_process
      if (reset == 1'b1) begin
        dMem_im_reg46 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg46 <= dMem_im_v_45;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_113_process
      if (reset == 1'b1) begin
        dMem_im_reg47 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg47 <= dMem_im_v_46;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_114_process
      if (reset == 1'b1) begin
        dMem_im_reg48 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg48 <= dMem_im_v_47;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_115_process
      if (reset == 1'b1) begin
        dMem_im_reg49 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg49 <= dMem_im_v_48;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_116_process
      if (reset == 1'b1) begin
        dMem_im_reg50 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg50 <= dMem_im_v_49;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_117_process
      if (reset == 1'b1) begin
        dMem_im_reg51 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg51 <= dMem_im_v_50;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_118_process
      if (reset == 1'b1) begin
        dMem_im_reg52 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg52 <= dMem_im_v_51;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_119_process
      if (reset == 1'b1) begin
        dMem_im_reg53 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg53 <= dMem_im_v_52;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_120_process
      if (reset == 1'b1) begin
        dMem_im_reg54 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg54 <= dMem_im_v_53;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_121_process
      if (reset == 1'b1) begin
        dMem_im_reg55 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg55 <= dMem_im_v_54;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_122_process
      if (reset == 1'b1) begin
        dMem_im_reg56 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg56 <= dMem_im_v_55;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_123_process
      if (reset == 1'b1) begin
        dMem_im_reg57 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg57 <= dMem_im_v_56;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_124_process
      if (reset == 1'b1) begin
        dMem_im_reg58 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg58 <= dMem_im_v_57;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_125_process
      if (reset == 1'b1) begin
        dMem_im_reg59 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg59 <= dMem_im_v_58;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_126_process
      if (reset == 1'b1) begin
        dMem_im_reg60 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg60 <= dMem_im_v_59;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_127_process
      if (reset == 1'b1) begin
        dMem_im_reg61 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg61 <= dMem_im_v_60;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_128_process
      if (reset == 1'b1) begin
        dMem_im_reg62 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg62 <= dMem_im_v_61;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_129_process
      if (reset == 1'b1) begin
        dMem_im_reg63 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg63 <= dMem_im_v_62;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_130_process
      if (reset == 1'b1) begin
        dMem_im_reg64 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          dMem_im_reg64 <= dMem_im_v_63;
        end
      end
    end



  assign dMux_im = (MUXSel == 6'b000000 ? dMem_im_reg1 :
              (MUXSel == 6'b000001 ? dMem_im_reg2 :
              (MUXSel == 6'b000010 ? dMem_im_reg3 :
              (MUXSel == 6'b000011 ? dMem_im_reg4 :
              (MUXSel == 6'b000100 ? dMem_im_reg5 :
              (MUXSel == 6'b000101 ? dMem_im_reg6 :
              (MUXSel == 6'b000110 ? dMem_im_reg7 :
              (MUXSel == 6'b000111 ? dMem_im_reg8 :
              (MUXSel == 6'b001000 ? dMem_im_reg9 :
              (MUXSel == 6'b001001 ? dMem_im_reg10 :
              (MUXSel == 6'b001010 ? dMem_im_reg11 :
              (MUXSel == 6'b001011 ? dMem_im_reg12 :
              (MUXSel == 6'b001100 ? dMem_im_reg13 :
              (MUXSel == 6'b001101 ? dMem_im_reg14 :
              (MUXSel == 6'b001110 ? dMem_im_reg15 :
              (MUXSel == 6'b001111 ? dMem_im_reg16 :
              (MUXSel == 6'b010000 ? dMem_im_reg17 :
              (MUXSel == 6'b010001 ? dMem_im_reg18 :
              (MUXSel == 6'b010010 ? dMem_im_reg19 :
              (MUXSel == 6'b010011 ? dMem_im_reg20 :
              (MUXSel == 6'b010100 ? dMem_im_reg21 :
              (MUXSel == 6'b010101 ? dMem_im_reg22 :
              (MUXSel == 6'b010110 ? dMem_im_reg23 :
              (MUXSel == 6'b010111 ? dMem_im_reg24 :
              (MUXSel == 6'b011000 ? dMem_im_reg25 :
              (MUXSel == 6'b011001 ? dMem_im_reg26 :
              (MUXSel == 6'b011010 ? dMem_im_reg27 :
              (MUXSel == 6'b011011 ? dMem_im_reg28 :
              (MUXSel == 6'b011100 ? dMem_im_reg29 :
              (MUXSel == 6'b011101 ? dMem_im_reg30 :
              (MUXSel == 6'b011110 ? dMem_im_reg31 :
              (MUXSel == 6'b011111 ? dMem_im_reg32 :
              (MUXSel == 6'b100000 ? dMem_im_reg33 :
              (MUXSel == 6'b100001 ? dMem_im_reg34 :
              (MUXSel == 6'b100010 ? dMem_im_reg35 :
              (MUXSel == 6'b100011 ? dMem_im_reg36 :
              (MUXSel == 6'b100100 ? dMem_im_reg37 :
              (MUXSel == 6'b100101 ? dMem_im_reg38 :
              (MUXSel == 6'b100110 ? dMem_im_reg39 :
              (MUXSel == 6'b100111 ? dMem_im_reg40 :
              (MUXSel == 6'b101000 ? dMem_im_reg41 :
              (MUXSel == 6'b101001 ? dMem_im_reg42 :
              (MUXSel == 6'b101010 ? dMem_im_reg43 :
              (MUXSel == 6'b101011 ? dMem_im_reg44 :
              (MUXSel == 6'b101100 ? dMem_im_reg45 :
              (MUXSel == 6'b101101 ? dMem_im_reg46 :
              (MUXSel == 6'b101110 ? dMem_im_reg47 :
              (MUXSel == 6'b101111 ? dMem_im_reg48 :
              (MUXSel == 6'b110000 ? dMem_im_reg49 :
              (MUXSel == 6'b110001 ? dMem_im_reg50 :
              (MUXSel == 6'b110010 ? dMem_im_reg51 :
              (MUXSel == 6'b110011 ? dMem_im_reg52 :
              (MUXSel == 6'b110100 ? dMem_im_reg53 :
              (MUXSel == 6'b110101 ? dMem_im_reg54 :
              (MUXSel == 6'b110110 ? dMem_im_reg55 :
              (MUXSel == 6'b110111 ? dMem_im_reg56 :
              (MUXSel == 6'b111000 ? dMem_im_reg57 :
              (MUXSel == 6'b111001 ? dMem_im_reg58 :
              (MUXSel == 6'b111010 ? dMem_im_reg59 :
              (MUXSel == 6'b111011 ? dMem_im_reg60 :
              (MUXSel == 6'b111100 ? dMem_im_reg61 :
              (MUXSel == 6'b111101 ? dMem_im_reg62 :
              (MUXSel == 6'b111110 ? dMem_im_reg63 :
              dMem_im_reg64)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));



  always @(posedge clk or posedge reset)
    begin : intdelay_131_process
      if (reset == 1'b1) begin
        intdelay_reg_2[0] <= 16'sb0000000000000000;
        intdelay_reg_2[1] <= 16'sb0000000000000000;
        intdelay_reg_2[2] <= 16'sb0000000000000000;
        intdelay_reg_2[3] <= 16'sb0000000000000000;
        intdelay_reg_2[4] <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0) begin
          intdelay_reg_2[0] <= intdelay_reg_next_2[0];
          intdelay_reg_2[1] <= intdelay_reg_next_2[1];
          intdelay_reg_2[2] <= intdelay_reg_next_2[2];
          intdelay_reg_2[3] <= intdelay_reg_next_2[3];
          intdelay_reg_2[4] <= intdelay_reg_next_2[4];
        end
      end
    end

  assign dMuxDly_im = intdelay_reg_2[4];
  assign intdelay_reg_next_2[0] = dMux_im;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];
  assign intdelay_reg_next_2[2] = intdelay_reg_2[1];
  assign intdelay_reg_next_2[3] = intdelay_reg_2[2];
  assign intdelay_reg_next_2[4] = intdelay_reg_2[3];



  always @(posedge clk or posedge reset)
    begin : intdelay_132_process
      if (reset == 1'b1) begin
        dMux_im41_1 <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_4096_0 && dMuxSelDly_vld) begin
          dMux_im41_1 <= dMuxDly_im;
        end
      end
    end



  assign dMux_re41 = dMux_re41_1;

  assign dMux_im41 = dMux_im41_1;

endmodule  // RADIX22FFT_bitNaturalMux_41

