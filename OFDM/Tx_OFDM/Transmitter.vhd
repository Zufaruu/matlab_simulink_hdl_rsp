-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\OFDM\Tx_OFDM\Transmitter.vhd
-- Created: 2023-04-09 12:21:06
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 6.66667e-06
-- Target subsystem base rate: 6.66667e-06
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        6.66667e-06
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- OFDM_Signal                   ce_out        6.66667e-06
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Transmitter
-- Source Path: Tx_OFDM/Transmitter
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Transmitter_pkg.ALL;

ENTITY Transmitter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Serial_Bits                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ce_out                            :   OUT   std_logic;
        OFDM_Signal                       :   OUT   vector_of_std_logic_vector64(0 TO 63)  -- sfix64_En29 [64]
        );
END Transmitter;


ARCHITECTURE rtl OF Transmitter IS

  -- Component Declarations
  COMPONENT Transmitter_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_15_0                      :   OUT   std_logic;
          enb_1_15_1                      :   OUT   std_logic;
          enb_1_60_0                      :   OUT   std_logic;
          enb_1_60_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Cosine_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(63 DOWNTO 0);  -- sfix64_En34
          x                               :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En15
          );
  END COMPONENT;

  COMPONENT custom_buffer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_15_0                      :   IN    std_logic;
          enb_1_15_1                      :   IN    std_logic;
          scalar_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          scalar_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          vector_re                       :   OUT   vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          vector_im                       :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En14 [64]
          );
  END COMPONENT;

  COMPONENT IFFT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_60_0                      :   IN    std_logic;
          dataIn_re                       :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          dataIn_im                       :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          dataOut_im                      :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En14 [64]
          );
  END COMPONENT;

  COMPONENT Sine_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(63 DOWNTO 0);  -- sfix64_En34
          x                               :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En15
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Transmitter_tc
    USE ENTITY work.Transmitter_tc(rtl);

  FOR ALL : Cosine_HDL_Optimized
    USE ENTITY work.Cosine_HDL_Optimized(rtl);

  FOR ALL : custom_buffer
    USE ENTITY work.custom_buffer(rtl);

  FOR ALL : IFFT
    USE ENTITY work.IFFT(rtl);

  FOR ALL : Sine_HDL_Optimized
    USE ENTITY work.Sine_HDL_Optimized(rtl);

  -- Constants
  CONSTANT alpha_table_data_re            : vector_of_signed16(0 TO 15) := 
    (to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16), to_signed(-16#6000#, 16),
     to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16), to_signed(16#6000#, 16),
     to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16), to_signed(16#2000#, 16));  -- sfix16 [16]
  CONSTANT alpha_table_data_im            : vector_of_signed16(0 TO 15) := 
    (to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16),
     to_signed(16#6000#, 16), to_signed(16#2000#, 16), to_signed(-16#6000#, 16), to_signed(-16#2000#, 16));  -- sfix16 [16]

  -- Signals
  SIGNAL enb_1_60_0                       : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_60_1                       : std_logic;
  SIGNAL enb_1_15_0                       : std_logic;
  SIGNAL enb_1_15_1                       : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL count_step                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL modValue                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL cos_sample_counter_out1          : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_from                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL count                            : signed(31 DOWNTO 0);  -- int32
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL cos_sample_interval_out1         : signed(63 DOWNTO 0);  -- sfix64_En34
  SIGNAL Cosine                           : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Cosine_signed                    : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL ctr_59_sig                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL crp_temp_enb_phase_6_0           : std_logic;
  SIGNAL Serial_Bits_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL constellationLUTaddress          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Rectangular_QAM_Modulator_Baseband_out1_re : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Rectangular_QAM_Modulator_Baseband_out1_im : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL buffer_re                        : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL buffer_im                        : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL buffer_re_signed                 : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL buffer_im_signed                 : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT2_out1_re                      : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT2_out1_im                      : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT2_out1_held_re                 : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT2_out1_held_im                 : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL IFFT1_bypass_reg_re              : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL IFFT1_bypass_reg_im              : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL IFFT1_bypass_reg_next_re         : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL IFFT1_bypass_reg_next_im         : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT2_out1_re_1                    : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT2_out1_im_1                    : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT2_out1_re_2                    : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL RT2_out1_im_2                    : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Constant_out1_1                  : std_logic;
  SIGNAL Constant_out1_2                  : std_logic;
  SIGNAL IFFT_out1_re                     : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL IFFT_out1_im                     : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL IFFT_out1_re_signed              : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL IFFT_out1_im_signed              : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT2_reg                          : vector_of_signed16(0 TO 63);  -- sfix16 [64]
  SIGNAL RT2_reg_next                     : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Complex_to_Real_Imag_out2        : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT_out1                          : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL count_step_1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL modValue_1                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL sine_sample_counter_out1         : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_from_1                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL count_1                          : signed(31 DOWNTO 0);  -- int32
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL sine_sample_interval_out1        : signed(63 DOWNTO 0);  -- sfix64_En34
  SIGNAL Sine                             : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL Sine_signed                      : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL delayMatch1_reg                  : vector_of_signed17(0 TO 58);  -- sfix17 [59]
  SIGNAL delayMatch1_reg_next             : vector_of_signed17(0 TO 58);  -- sfix17_En15 [59]
  SIGNAL Cosine_1                         : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL RT11_reg                         : vector_of_signed16(0 TO 63);  -- sfix16 [64]
  SIGNAL RT11_reg_next                    : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Complex_to_Real_Imag_out1        : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL RT1_out1                         : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Product_out1                     : vector_of_signed33(0 TO 63);  -- sfix33_En29 [64]
  SIGNAL delayMatch2_reg                  : vector_of_signed17(0 TO 58);  -- sfix17 [59]
  SIGNAL delayMatch2_reg_next             : vector_of_signed17(0 TO 58);  -- sfix17_En15 [59]
  SIGNAL Sine_1                           : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL Product1_mul_temp                : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_1              : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_2              : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_3              : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_4              : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_5              : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_6              : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_7              : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_8              : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_9              : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_10             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_11             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_12             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_13             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_14             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_15             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_16             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_17             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_18             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_19             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_20             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_21             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_22             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_23             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_24             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_25             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_26             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_27             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_28             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_29             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_30             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_31             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_32             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_33             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_34             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_35             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_36             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_37             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_38             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_39             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_40             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_41             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_42             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_43             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_44             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_45             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_46             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_47             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_48             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_49             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_50             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_51             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_52             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_53             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_54             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_55             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_56             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_57             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_58             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_59             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_60             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_61             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_62             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_mul_temp_63             : signed(32 DOWNTO 0);  -- sfix33_En29
  SIGNAL Product1_out1                    : vector_of_signed16(0 TO 63);  -- int16 [64]
  SIGNAL Sum_add_cast                     : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_1                   : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_2                   : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_3                   : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_4                   : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_5                   : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_6                   : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_7                   : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_8                   : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_9                   : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_10                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_11                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_12                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_13                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_14                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_15                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_16                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_17                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_18                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_19                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_20                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_21                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_22                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_23                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_24                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_25                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_26                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_27                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_28                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_29                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_30                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_31                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_32                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_33                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_34                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_35                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_36                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_37                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_38                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_39                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_40                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_41                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_42                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_43                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_44                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_45                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_46                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_47                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_48                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_49                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_50                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_51                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_52                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_53                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_54                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_55                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_56                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_57                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_58                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_59                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_60                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_61                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_62                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_63                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_64                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_65                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_66                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_67                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_68                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_69                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_70                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_71                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_72                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_73                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_74                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_75                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_76                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_77                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_78                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_79                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_80                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_81                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_82                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_83                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_84                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_85                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_86                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_87                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_88                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_89                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_90                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_91                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_92                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_93                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_94                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_95                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_96                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_97                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_98                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_99                  : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_100                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_101                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_102                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_103                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_104                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_105                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_106                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_107                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_108                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_109                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_110                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_111                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_112                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_113                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_114                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_115                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_116                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_117                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_118                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_119                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_120                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_121                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_122                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_123                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_124                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_125                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_126                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_add_cast_127                 : signed(63 DOWNTO 0);  -- sfix64_En29
  SIGNAL Sum_out1                         : vector_of_signed64(0 TO 63);  -- sfix64_En29 [64]

BEGIN
  -- When changing N, change the vector init size to N manually
  -- symbol_time (stime) = 0.1 ms
  -- bit_time = 0.1 / M_ary
  -- N = FFT length (total subcarrier)

  u_Transmitter_tc : Transmitter_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_15_0 => enb_1_15_0,
              enb_1_15_1 => enb_1_15_1,
              enb_1_60_0 => enb_1_60_0,
              enb_1_60_1 => enb_1_60_1
              );

  u_Cosine_HDL_Optimized : Cosine_HDL_Optimized
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              u => std_logic_vector(cos_sample_interval_out1),  -- sfix64_En34
              x => Cosine  -- sfix17_En15
              );

  u_custom_buffer : custom_buffer
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              enb_1_15_0 => enb_1_15_0,
              enb_1_15_1 => enb_1_15_1,
              scalar_re => std_logic_vector(Rectangular_QAM_Modulator_Baseband_out1_re),  -- sfix16_En13
              scalar_im => std_logic_vector(Rectangular_QAM_Modulator_Baseband_out1_im),  -- sfix16_En13
              vector_re => buffer_re,  -- sfix16_En14 [64]
              vector_im => buffer_im  -- sfix16_En14 [64]
              );

  u_IFFT : IFFT
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_60_0 => enb_1_60_0,
              dataIn_re => RT2_out1_re_2,  -- sfix16_En14 [64]
              dataIn_im => RT2_out1_im_2,  -- sfix16_En14 [64]
              validIn => Constant_out1_2,
              dataOut_re => IFFT_out1_re,  -- sfix16_En14 [64]
              dataOut_im => IFFT_out1_im  -- sfix16_En14 [64]
              );

  u_Sine_HDL_Optimized : Sine_HDL_Optimized
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              u => std_logic_vector(sine_sample_interval_out1),  -- sfix64_En34
              x => Sine  -- sfix17_En15
              );

  -- Modulo, Signed Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 150000
  count_step <= to_signed(1, 32);

  modValue <= to_signed(150000, 32);

  count_from <= cos_sample_counter_out1 - modValue;

  count <= cos_sample_counter_out1 + count_step;

  
  need_to_wrap <= '1' WHEN cos_sample_counter_out1 > to_signed(149999, 32) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  cos_sample_counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cos_sample_counter_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        cos_sample_counter_out1 <= count_value;
      END IF;
    END IF;
  END PROCESS cos_sample_counter_process;


  cos_sample_interval_out1 <= to_signed(1145324612, 32) * cos_sample_counter_out1;

  Cosine_signed <= signed(Cosine);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 59
  ctr_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ctr_59_sig <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF ctr_59_sig >= to_unsigned(16#3B#, 8) THEN 
          ctr_59_sig <= to_unsigned(16#00#, 8);
        ELSE 
          ctr_59_sig <= ctr_59_sig + to_unsigned(16#01#, 8);
        END IF;
      END IF;
    END IF;
  END PROCESS ctr_59_process;


  
  crp_temp_enb_phase_6_0 <= '1' WHEN ctr_59_sig = to_unsigned(16#06#, 8) ELSE
      '0';

  Serial_Bits_unsigned <= unsigned(Serial_Bits);

  constellationLUTaddress <= Serial_Bits_unsigned(3 DOWNTO 0);

  Rectangular_QAM_Modulator_Baseband_out1_re <= alpha_table_data_re(to_integer(constellationLUTaddress));
  Rectangular_QAM_Modulator_Baseband_out1_im <= alpha_table_data_im(to_integer(constellationLUTaddress));

  outputgen6: FOR k IN 0 TO 63 GENERATE
    buffer_re_signed(k) <= signed(buffer_re(k));
  END GENERATE;

  outputgen5: FOR k IN 0 TO 63 GENERATE
    buffer_im_signed(k) <= signed(buffer_im(k));
  END GENERATE;

  RT2_out1_state_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      RT2_out1_held_re(0) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(0) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(1) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(1) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(2) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(2) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(3) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(3) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(4) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(4) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(5) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(5) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(6) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(6) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(7) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(7) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(8) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(8) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(9) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(9) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(10) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(10) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(11) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(11) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(12) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(12) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(13) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(13) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(14) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(14) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(15) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(15) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(16) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(16) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(17) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(17) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(18) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(18) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(19) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(19) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(20) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(20) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(21) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(21) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(22) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(22) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(23) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(23) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(24) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(24) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(25) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(25) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(26) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(26) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(27) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(27) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(28) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(28) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(29) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(29) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(30) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(30) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(31) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(31) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(32) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(32) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(33) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(33) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(34) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(34) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(35) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(35) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(36) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(36) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(37) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(37) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(38) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(38) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(39) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(39) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(40) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(40) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(41) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(41) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(42) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(42) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(43) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(43) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(44) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(44) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(45) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(45) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(46) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(46) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(47) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(47) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(48) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(48) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(49) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(49) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(50) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(50) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(51) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(51) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(52) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(52) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(53) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(53) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(54) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(54) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(55) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(55) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(56) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(56) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(57) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(57) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(58) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(58) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(59) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(59) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(60) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(60) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(61) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(61) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(62) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(62) <= to_signed(16#0000#, 16);
      RT2_out1_held_re(63) <= to_signed(16#0000#, 16);
      RT2_out1_held_im(63) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        RT2_out1_held_re(0) <= RT2_out1_re(0);
        RT2_out1_held_im(0) <= RT2_out1_im(0);
        RT2_out1_held_re(1) <= RT2_out1_re(1);
        RT2_out1_held_im(1) <= RT2_out1_im(1);
        RT2_out1_held_re(2) <= RT2_out1_re(2);
        RT2_out1_held_im(2) <= RT2_out1_im(2);
        RT2_out1_held_re(3) <= RT2_out1_re(3);
        RT2_out1_held_im(3) <= RT2_out1_im(3);
        RT2_out1_held_re(4) <= RT2_out1_re(4);
        RT2_out1_held_im(4) <= RT2_out1_im(4);
        RT2_out1_held_re(5) <= RT2_out1_re(5);
        RT2_out1_held_im(5) <= RT2_out1_im(5);
        RT2_out1_held_re(6) <= RT2_out1_re(6);
        RT2_out1_held_im(6) <= RT2_out1_im(6);
        RT2_out1_held_re(7) <= RT2_out1_re(7);
        RT2_out1_held_im(7) <= RT2_out1_im(7);
        RT2_out1_held_re(8) <= RT2_out1_re(8);
        RT2_out1_held_im(8) <= RT2_out1_im(8);
        RT2_out1_held_re(9) <= RT2_out1_re(9);
        RT2_out1_held_im(9) <= RT2_out1_im(9);
        RT2_out1_held_re(10) <= RT2_out1_re(10);
        RT2_out1_held_im(10) <= RT2_out1_im(10);
        RT2_out1_held_re(11) <= RT2_out1_re(11);
        RT2_out1_held_im(11) <= RT2_out1_im(11);
        RT2_out1_held_re(12) <= RT2_out1_re(12);
        RT2_out1_held_im(12) <= RT2_out1_im(12);
        RT2_out1_held_re(13) <= RT2_out1_re(13);
        RT2_out1_held_im(13) <= RT2_out1_im(13);
        RT2_out1_held_re(14) <= RT2_out1_re(14);
        RT2_out1_held_im(14) <= RT2_out1_im(14);
        RT2_out1_held_re(15) <= RT2_out1_re(15);
        RT2_out1_held_im(15) <= RT2_out1_im(15);
        RT2_out1_held_re(16) <= RT2_out1_re(16);
        RT2_out1_held_im(16) <= RT2_out1_im(16);
        RT2_out1_held_re(17) <= RT2_out1_re(17);
        RT2_out1_held_im(17) <= RT2_out1_im(17);
        RT2_out1_held_re(18) <= RT2_out1_re(18);
        RT2_out1_held_im(18) <= RT2_out1_im(18);
        RT2_out1_held_re(19) <= RT2_out1_re(19);
        RT2_out1_held_im(19) <= RT2_out1_im(19);
        RT2_out1_held_re(20) <= RT2_out1_re(20);
        RT2_out1_held_im(20) <= RT2_out1_im(20);
        RT2_out1_held_re(21) <= RT2_out1_re(21);
        RT2_out1_held_im(21) <= RT2_out1_im(21);
        RT2_out1_held_re(22) <= RT2_out1_re(22);
        RT2_out1_held_im(22) <= RT2_out1_im(22);
        RT2_out1_held_re(23) <= RT2_out1_re(23);
        RT2_out1_held_im(23) <= RT2_out1_im(23);
        RT2_out1_held_re(24) <= RT2_out1_re(24);
        RT2_out1_held_im(24) <= RT2_out1_im(24);
        RT2_out1_held_re(25) <= RT2_out1_re(25);
        RT2_out1_held_im(25) <= RT2_out1_im(25);
        RT2_out1_held_re(26) <= RT2_out1_re(26);
        RT2_out1_held_im(26) <= RT2_out1_im(26);
        RT2_out1_held_re(27) <= RT2_out1_re(27);
        RT2_out1_held_im(27) <= RT2_out1_im(27);
        RT2_out1_held_re(28) <= RT2_out1_re(28);
        RT2_out1_held_im(28) <= RT2_out1_im(28);
        RT2_out1_held_re(29) <= RT2_out1_re(29);
        RT2_out1_held_im(29) <= RT2_out1_im(29);
        RT2_out1_held_re(30) <= RT2_out1_re(30);
        RT2_out1_held_im(30) <= RT2_out1_im(30);
        RT2_out1_held_re(31) <= RT2_out1_re(31);
        RT2_out1_held_im(31) <= RT2_out1_im(31);
        RT2_out1_held_re(32) <= RT2_out1_re(32);
        RT2_out1_held_im(32) <= RT2_out1_im(32);
        RT2_out1_held_re(33) <= RT2_out1_re(33);
        RT2_out1_held_im(33) <= RT2_out1_im(33);
        RT2_out1_held_re(34) <= RT2_out1_re(34);
        RT2_out1_held_im(34) <= RT2_out1_im(34);
        RT2_out1_held_re(35) <= RT2_out1_re(35);
        RT2_out1_held_im(35) <= RT2_out1_im(35);
        RT2_out1_held_re(36) <= RT2_out1_re(36);
        RT2_out1_held_im(36) <= RT2_out1_im(36);
        RT2_out1_held_re(37) <= RT2_out1_re(37);
        RT2_out1_held_im(37) <= RT2_out1_im(37);
        RT2_out1_held_re(38) <= RT2_out1_re(38);
        RT2_out1_held_im(38) <= RT2_out1_im(38);
        RT2_out1_held_re(39) <= RT2_out1_re(39);
        RT2_out1_held_im(39) <= RT2_out1_im(39);
        RT2_out1_held_re(40) <= RT2_out1_re(40);
        RT2_out1_held_im(40) <= RT2_out1_im(40);
        RT2_out1_held_re(41) <= RT2_out1_re(41);
        RT2_out1_held_im(41) <= RT2_out1_im(41);
        RT2_out1_held_re(42) <= RT2_out1_re(42);
        RT2_out1_held_im(42) <= RT2_out1_im(42);
        RT2_out1_held_re(43) <= RT2_out1_re(43);
        RT2_out1_held_im(43) <= RT2_out1_im(43);
        RT2_out1_held_re(44) <= RT2_out1_re(44);
        RT2_out1_held_im(44) <= RT2_out1_im(44);
        RT2_out1_held_re(45) <= RT2_out1_re(45);
        RT2_out1_held_im(45) <= RT2_out1_im(45);
        RT2_out1_held_re(46) <= RT2_out1_re(46);
        RT2_out1_held_im(46) <= RT2_out1_im(46);
        RT2_out1_held_re(47) <= RT2_out1_re(47);
        RT2_out1_held_im(47) <= RT2_out1_im(47);
        RT2_out1_held_re(48) <= RT2_out1_re(48);
        RT2_out1_held_im(48) <= RT2_out1_im(48);
        RT2_out1_held_re(49) <= RT2_out1_re(49);
        RT2_out1_held_im(49) <= RT2_out1_im(49);
        RT2_out1_held_re(50) <= RT2_out1_re(50);
        RT2_out1_held_im(50) <= RT2_out1_im(50);
        RT2_out1_held_re(51) <= RT2_out1_re(51);
        RT2_out1_held_im(51) <= RT2_out1_im(51);
        RT2_out1_held_re(52) <= RT2_out1_re(52);
        RT2_out1_held_im(52) <= RT2_out1_im(52);
        RT2_out1_held_re(53) <= RT2_out1_re(53);
        RT2_out1_held_im(53) <= RT2_out1_im(53);
        RT2_out1_held_re(54) <= RT2_out1_re(54);
        RT2_out1_held_im(54) <= RT2_out1_im(54);
        RT2_out1_held_re(55) <= RT2_out1_re(55);
        RT2_out1_held_im(55) <= RT2_out1_im(55);
        RT2_out1_held_re(56) <= RT2_out1_re(56);
        RT2_out1_held_im(56) <= RT2_out1_im(56);
        RT2_out1_held_re(57) <= RT2_out1_re(57);
        RT2_out1_held_im(57) <= RT2_out1_im(57);
        RT2_out1_held_re(58) <= RT2_out1_re(58);
        RT2_out1_held_im(58) <= RT2_out1_im(58);
        RT2_out1_held_re(59) <= RT2_out1_re(59);
        RT2_out1_held_im(59) <= RT2_out1_im(59);
        RT2_out1_held_re(60) <= RT2_out1_re(60);
        RT2_out1_held_im(60) <= RT2_out1_im(60);
        RT2_out1_held_re(61) <= RT2_out1_re(61);
        RT2_out1_held_im(61) <= RT2_out1_im(61);
        RT2_out1_held_re(62) <= RT2_out1_re(62);
        RT2_out1_held_im(62) <= RT2_out1_im(62);
        RT2_out1_held_re(63) <= RT2_out1_re(63);
        RT2_out1_held_im(63) <= RT2_out1_im(63);
      END IF;
    END IF;
  END PROCESS RT2_out1_state_process;


  
  RT2_out1_re(0) <= RT2_out1_held_re(0) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(0);
  
  RT2_out1_re(1) <= RT2_out1_held_re(1) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(1);
  
  RT2_out1_re(2) <= RT2_out1_held_re(2) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(2);
  
  RT2_out1_re(3) <= RT2_out1_held_re(3) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(3);
  
  RT2_out1_re(4) <= RT2_out1_held_re(4) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(4);
  
  RT2_out1_re(5) <= RT2_out1_held_re(5) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(5);
  
  RT2_out1_re(6) <= RT2_out1_held_re(6) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(6);
  
  RT2_out1_re(7) <= RT2_out1_held_re(7) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(7);
  
  RT2_out1_re(8) <= RT2_out1_held_re(8) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(8);
  
  RT2_out1_re(9) <= RT2_out1_held_re(9) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(9);
  
  RT2_out1_re(10) <= RT2_out1_held_re(10) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(10);
  
  RT2_out1_re(11) <= RT2_out1_held_re(11) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(11);
  
  RT2_out1_re(12) <= RT2_out1_held_re(12) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(12);
  
  RT2_out1_re(13) <= RT2_out1_held_re(13) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(13);
  
  RT2_out1_re(14) <= RT2_out1_held_re(14) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(14);
  
  RT2_out1_re(15) <= RT2_out1_held_re(15) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(15);
  
  RT2_out1_re(16) <= RT2_out1_held_re(16) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(16);
  
  RT2_out1_re(17) <= RT2_out1_held_re(17) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(17);
  
  RT2_out1_re(18) <= RT2_out1_held_re(18) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(18);
  
  RT2_out1_re(19) <= RT2_out1_held_re(19) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(19);
  
  RT2_out1_re(20) <= RT2_out1_held_re(20) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(20);
  
  RT2_out1_re(21) <= RT2_out1_held_re(21) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(21);
  
  RT2_out1_re(22) <= RT2_out1_held_re(22) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(22);
  
  RT2_out1_re(23) <= RT2_out1_held_re(23) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(23);
  
  RT2_out1_re(24) <= RT2_out1_held_re(24) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(24);
  
  RT2_out1_re(25) <= RT2_out1_held_re(25) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(25);
  
  RT2_out1_re(26) <= RT2_out1_held_re(26) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(26);
  
  RT2_out1_re(27) <= RT2_out1_held_re(27) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(27);
  
  RT2_out1_re(28) <= RT2_out1_held_re(28) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(28);
  
  RT2_out1_re(29) <= RT2_out1_held_re(29) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(29);
  
  RT2_out1_re(30) <= RT2_out1_held_re(30) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(30);
  
  RT2_out1_re(31) <= RT2_out1_held_re(31) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(31);
  
  RT2_out1_re(32) <= RT2_out1_held_re(32) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(32);
  
  RT2_out1_re(33) <= RT2_out1_held_re(33) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(33);
  
  RT2_out1_re(34) <= RT2_out1_held_re(34) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(34);
  
  RT2_out1_re(35) <= RT2_out1_held_re(35) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(35);
  
  RT2_out1_re(36) <= RT2_out1_held_re(36) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(36);
  
  RT2_out1_re(37) <= RT2_out1_held_re(37) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(37);
  
  RT2_out1_re(38) <= RT2_out1_held_re(38) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(38);
  
  RT2_out1_re(39) <= RT2_out1_held_re(39) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(39);
  
  RT2_out1_re(40) <= RT2_out1_held_re(40) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(40);
  
  RT2_out1_re(41) <= RT2_out1_held_re(41) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(41);
  
  RT2_out1_re(42) <= RT2_out1_held_re(42) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(42);
  
  RT2_out1_re(43) <= RT2_out1_held_re(43) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(43);
  
  RT2_out1_re(44) <= RT2_out1_held_re(44) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(44);
  
  RT2_out1_re(45) <= RT2_out1_held_re(45) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(45);
  
  RT2_out1_re(46) <= RT2_out1_held_re(46) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(46);
  
  RT2_out1_re(47) <= RT2_out1_held_re(47) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(47);
  
  RT2_out1_re(48) <= RT2_out1_held_re(48) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(48);
  
  RT2_out1_re(49) <= RT2_out1_held_re(49) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(49);
  
  RT2_out1_re(50) <= RT2_out1_held_re(50) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(50);
  
  RT2_out1_re(51) <= RT2_out1_held_re(51) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(51);
  
  RT2_out1_re(52) <= RT2_out1_held_re(52) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(52);
  
  RT2_out1_re(53) <= RT2_out1_held_re(53) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(53);
  
  RT2_out1_re(54) <= RT2_out1_held_re(54) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(54);
  
  RT2_out1_re(55) <= RT2_out1_held_re(55) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(55);
  
  RT2_out1_re(56) <= RT2_out1_held_re(56) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(56);
  
  RT2_out1_re(57) <= RT2_out1_held_re(57) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(57);
  
  RT2_out1_re(58) <= RT2_out1_held_re(58) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(58);
  
  RT2_out1_re(59) <= RT2_out1_held_re(59) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(59);
  
  RT2_out1_re(60) <= RT2_out1_held_re(60) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(60);
  
  RT2_out1_re(61) <= RT2_out1_held_re(61) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(61);
  
  RT2_out1_re(62) <= RT2_out1_held_re(62) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(62);
  
  RT2_out1_re(63) <= RT2_out1_held_re(63) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_re_signed(63);
  
  RT2_out1_im(0) <= RT2_out1_held_im(0) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(0);
  
  RT2_out1_im(1) <= RT2_out1_held_im(1) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(1);
  
  RT2_out1_im(2) <= RT2_out1_held_im(2) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(2);
  
  RT2_out1_im(3) <= RT2_out1_held_im(3) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(3);
  
  RT2_out1_im(4) <= RT2_out1_held_im(4) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(4);
  
  RT2_out1_im(5) <= RT2_out1_held_im(5) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(5);
  
  RT2_out1_im(6) <= RT2_out1_held_im(6) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(6);
  
  RT2_out1_im(7) <= RT2_out1_held_im(7) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(7);
  
  RT2_out1_im(8) <= RT2_out1_held_im(8) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(8);
  
  RT2_out1_im(9) <= RT2_out1_held_im(9) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(9);
  
  RT2_out1_im(10) <= RT2_out1_held_im(10) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(10);
  
  RT2_out1_im(11) <= RT2_out1_held_im(11) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(11);
  
  RT2_out1_im(12) <= RT2_out1_held_im(12) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(12);
  
  RT2_out1_im(13) <= RT2_out1_held_im(13) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(13);
  
  RT2_out1_im(14) <= RT2_out1_held_im(14) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(14);
  
  RT2_out1_im(15) <= RT2_out1_held_im(15) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(15);
  
  RT2_out1_im(16) <= RT2_out1_held_im(16) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(16);
  
  RT2_out1_im(17) <= RT2_out1_held_im(17) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(17);
  
  RT2_out1_im(18) <= RT2_out1_held_im(18) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(18);
  
  RT2_out1_im(19) <= RT2_out1_held_im(19) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(19);
  
  RT2_out1_im(20) <= RT2_out1_held_im(20) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(20);
  
  RT2_out1_im(21) <= RT2_out1_held_im(21) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(21);
  
  RT2_out1_im(22) <= RT2_out1_held_im(22) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(22);
  
  RT2_out1_im(23) <= RT2_out1_held_im(23) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(23);
  
  RT2_out1_im(24) <= RT2_out1_held_im(24) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(24);
  
  RT2_out1_im(25) <= RT2_out1_held_im(25) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(25);
  
  RT2_out1_im(26) <= RT2_out1_held_im(26) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(26);
  
  RT2_out1_im(27) <= RT2_out1_held_im(27) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(27);
  
  RT2_out1_im(28) <= RT2_out1_held_im(28) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(28);
  
  RT2_out1_im(29) <= RT2_out1_held_im(29) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(29);
  
  RT2_out1_im(30) <= RT2_out1_held_im(30) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(30);
  
  RT2_out1_im(31) <= RT2_out1_held_im(31) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(31);
  
  RT2_out1_im(32) <= RT2_out1_held_im(32) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(32);
  
  RT2_out1_im(33) <= RT2_out1_held_im(33) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(33);
  
  RT2_out1_im(34) <= RT2_out1_held_im(34) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(34);
  
  RT2_out1_im(35) <= RT2_out1_held_im(35) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(35);
  
  RT2_out1_im(36) <= RT2_out1_held_im(36) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(36);
  
  RT2_out1_im(37) <= RT2_out1_held_im(37) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(37);
  
  RT2_out1_im(38) <= RT2_out1_held_im(38) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(38);
  
  RT2_out1_im(39) <= RT2_out1_held_im(39) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(39);
  
  RT2_out1_im(40) <= RT2_out1_held_im(40) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(40);
  
  RT2_out1_im(41) <= RT2_out1_held_im(41) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(41);
  
  RT2_out1_im(42) <= RT2_out1_held_im(42) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(42);
  
  RT2_out1_im(43) <= RT2_out1_held_im(43) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(43);
  
  RT2_out1_im(44) <= RT2_out1_held_im(44) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(44);
  
  RT2_out1_im(45) <= RT2_out1_held_im(45) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(45);
  
  RT2_out1_im(46) <= RT2_out1_held_im(46) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(46);
  
  RT2_out1_im(47) <= RT2_out1_held_im(47) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(47);
  
  RT2_out1_im(48) <= RT2_out1_held_im(48) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(48);
  
  RT2_out1_im(49) <= RT2_out1_held_im(49) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(49);
  
  RT2_out1_im(50) <= RT2_out1_held_im(50) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(50);
  
  RT2_out1_im(51) <= RT2_out1_held_im(51) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(51);
  
  RT2_out1_im(52) <= RT2_out1_held_im(52) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(52);
  
  RT2_out1_im(53) <= RT2_out1_held_im(53) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(53);
  
  RT2_out1_im(54) <= RT2_out1_held_im(54) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(54);
  
  RT2_out1_im(55) <= RT2_out1_held_im(55) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(55);
  
  RT2_out1_im(56) <= RT2_out1_held_im(56) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(56);
  
  RT2_out1_im(57) <= RT2_out1_held_im(57) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(57);
  
  RT2_out1_im(58) <= RT2_out1_held_im(58) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(58);
  
  RT2_out1_im(59) <= RT2_out1_held_im(59) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(59);
  
  RT2_out1_im(60) <= RT2_out1_held_im(60) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(60);
  
  RT2_out1_im(61) <= RT2_out1_held_im(61) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(61);
  
  RT2_out1_im(62) <= RT2_out1_held_im(62) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(62);
  
  RT2_out1_im(63) <= RT2_out1_held_im(63) WHEN crp_temp_enb_phase_6_0 = '0' ELSE
      buffer_im_signed(63);

  IFFT1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      IFFT1_bypass_reg_re(0) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(0) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(1) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(1) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(2) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(2) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(3) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(3) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(4) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(4) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(5) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(5) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(6) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(6) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(7) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(7) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(8) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(8) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(9) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(9) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(10) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(10) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(11) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(11) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(12) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(12) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(13) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(13) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(14) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(14) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(15) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(15) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(16) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(16) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(17) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(17) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(18) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(18) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(19) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(19) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(20) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(20) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(21) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(21) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(22) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(22) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(23) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(23) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(24) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(24) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(25) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(25) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(26) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(26) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(27) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(27) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(28) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(28) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(29) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(29) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(30) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(30) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(31) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(31) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(32) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(32) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(33) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(33) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(34) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(34) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(35) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(35) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(36) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(36) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(37) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(37) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(38) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(38) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(39) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(39) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(40) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(40) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(41) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(41) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(42) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(42) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(43) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(43) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(44) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(44) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(45) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(45) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(46) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(46) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(47) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(47) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(48) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(48) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(49) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(49) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(50) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(50) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(51) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(51) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(52) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(52) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(53) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(53) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(54) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(54) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(55) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(55) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(56) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(56) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(57) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(57) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(58) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(58) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(59) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(59) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(60) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(60) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(61) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(61) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(62) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(62) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_re(63) <= to_signed(16#0000#, 16);
      IFFT1_bypass_reg_im(63) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_60_1 = '1' THEN
        IFFT1_bypass_reg_re(0) <= IFFT1_bypass_reg_next_re(0);
        IFFT1_bypass_reg_im(0) <= IFFT1_bypass_reg_next_im(0);
        IFFT1_bypass_reg_re(1) <= IFFT1_bypass_reg_next_re(1);
        IFFT1_bypass_reg_im(1) <= IFFT1_bypass_reg_next_im(1);
        IFFT1_bypass_reg_re(2) <= IFFT1_bypass_reg_next_re(2);
        IFFT1_bypass_reg_im(2) <= IFFT1_bypass_reg_next_im(2);
        IFFT1_bypass_reg_re(3) <= IFFT1_bypass_reg_next_re(3);
        IFFT1_bypass_reg_im(3) <= IFFT1_bypass_reg_next_im(3);
        IFFT1_bypass_reg_re(4) <= IFFT1_bypass_reg_next_re(4);
        IFFT1_bypass_reg_im(4) <= IFFT1_bypass_reg_next_im(4);
        IFFT1_bypass_reg_re(5) <= IFFT1_bypass_reg_next_re(5);
        IFFT1_bypass_reg_im(5) <= IFFT1_bypass_reg_next_im(5);
        IFFT1_bypass_reg_re(6) <= IFFT1_bypass_reg_next_re(6);
        IFFT1_bypass_reg_im(6) <= IFFT1_bypass_reg_next_im(6);
        IFFT1_bypass_reg_re(7) <= IFFT1_bypass_reg_next_re(7);
        IFFT1_bypass_reg_im(7) <= IFFT1_bypass_reg_next_im(7);
        IFFT1_bypass_reg_re(8) <= IFFT1_bypass_reg_next_re(8);
        IFFT1_bypass_reg_im(8) <= IFFT1_bypass_reg_next_im(8);
        IFFT1_bypass_reg_re(9) <= IFFT1_bypass_reg_next_re(9);
        IFFT1_bypass_reg_im(9) <= IFFT1_bypass_reg_next_im(9);
        IFFT1_bypass_reg_re(10) <= IFFT1_bypass_reg_next_re(10);
        IFFT1_bypass_reg_im(10) <= IFFT1_bypass_reg_next_im(10);
        IFFT1_bypass_reg_re(11) <= IFFT1_bypass_reg_next_re(11);
        IFFT1_bypass_reg_im(11) <= IFFT1_bypass_reg_next_im(11);
        IFFT1_bypass_reg_re(12) <= IFFT1_bypass_reg_next_re(12);
        IFFT1_bypass_reg_im(12) <= IFFT1_bypass_reg_next_im(12);
        IFFT1_bypass_reg_re(13) <= IFFT1_bypass_reg_next_re(13);
        IFFT1_bypass_reg_im(13) <= IFFT1_bypass_reg_next_im(13);
        IFFT1_bypass_reg_re(14) <= IFFT1_bypass_reg_next_re(14);
        IFFT1_bypass_reg_im(14) <= IFFT1_bypass_reg_next_im(14);
        IFFT1_bypass_reg_re(15) <= IFFT1_bypass_reg_next_re(15);
        IFFT1_bypass_reg_im(15) <= IFFT1_bypass_reg_next_im(15);
        IFFT1_bypass_reg_re(16) <= IFFT1_bypass_reg_next_re(16);
        IFFT1_bypass_reg_im(16) <= IFFT1_bypass_reg_next_im(16);
        IFFT1_bypass_reg_re(17) <= IFFT1_bypass_reg_next_re(17);
        IFFT1_bypass_reg_im(17) <= IFFT1_bypass_reg_next_im(17);
        IFFT1_bypass_reg_re(18) <= IFFT1_bypass_reg_next_re(18);
        IFFT1_bypass_reg_im(18) <= IFFT1_bypass_reg_next_im(18);
        IFFT1_bypass_reg_re(19) <= IFFT1_bypass_reg_next_re(19);
        IFFT1_bypass_reg_im(19) <= IFFT1_bypass_reg_next_im(19);
        IFFT1_bypass_reg_re(20) <= IFFT1_bypass_reg_next_re(20);
        IFFT1_bypass_reg_im(20) <= IFFT1_bypass_reg_next_im(20);
        IFFT1_bypass_reg_re(21) <= IFFT1_bypass_reg_next_re(21);
        IFFT1_bypass_reg_im(21) <= IFFT1_bypass_reg_next_im(21);
        IFFT1_bypass_reg_re(22) <= IFFT1_bypass_reg_next_re(22);
        IFFT1_bypass_reg_im(22) <= IFFT1_bypass_reg_next_im(22);
        IFFT1_bypass_reg_re(23) <= IFFT1_bypass_reg_next_re(23);
        IFFT1_bypass_reg_im(23) <= IFFT1_bypass_reg_next_im(23);
        IFFT1_bypass_reg_re(24) <= IFFT1_bypass_reg_next_re(24);
        IFFT1_bypass_reg_im(24) <= IFFT1_bypass_reg_next_im(24);
        IFFT1_bypass_reg_re(25) <= IFFT1_bypass_reg_next_re(25);
        IFFT1_bypass_reg_im(25) <= IFFT1_bypass_reg_next_im(25);
        IFFT1_bypass_reg_re(26) <= IFFT1_bypass_reg_next_re(26);
        IFFT1_bypass_reg_im(26) <= IFFT1_bypass_reg_next_im(26);
        IFFT1_bypass_reg_re(27) <= IFFT1_bypass_reg_next_re(27);
        IFFT1_bypass_reg_im(27) <= IFFT1_bypass_reg_next_im(27);
        IFFT1_bypass_reg_re(28) <= IFFT1_bypass_reg_next_re(28);
        IFFT1_bypass_reg_im(28) <= IFFT1_bypass_reg_next_im(28);
        IFFT1_bypass_reg_re(29) <= IFFT1_bypass_reg_next_re(29);
        IFFT1_bypass_reg_im(29) <= IFFT1_bypass_reg_next_im(29);
        IFFT1_bypass_reg_re(30) <= IFFT1_bypass_reg_next_re(30);
        IFFT1_bypass_reg_im(30) <= IFFT1_bypass_reg_next_im(30);
        IFFT1_bypass_reg_re(31) <= IFFT1_bypass_reg_next_re(31);
        IFFT1_bypass_reg_im(31) <= IFFT1_bypass_reg_next_im(31);
        IFFT1_bypass_reg_re(32) <= IFFT1_bypass_reg_next_re(32);
        IFFT1_bypass_reg_im(32) <= IFFT1_bypass_reg_next_im(32);
        IFFT1_bypass_reg_re(33) <= IFFT1_bypass_reg_next_re(33);
        IFFT1_bypass_reg_im(33) <= IFFT1_bypass_reg_next_im(33);
        IFFT1_bypass_reg_re(34) <= IFFT1_bypass_reg_next_re(34);
        IFFT1_bypass_reg_im(34) <= IFFT1_bypass_reg_next_im(34);
        IFFT1_bypass_reg_re(35) <= IFFT1_bypass_reg_next_re(35);
        IFFT1_bypass_reg_im(35) <= IFFT1_bypass_reg_next_im(35);
        IFFT1_bypass_reg_re(36) <= IFFT1_bypass_reg_next_re(36);
        IFFT1_bypass_reg_im(36) <= IFFT1_bypass_reg_next_im(36);
        IFFT1_bypass_reg_re(37) <= IFFT1_bypass_reg_next_re(37);
        IFFT1_bypass_reg_im(37) <= IFFT1_bypass_reg_next_im(37);
        IFFT1_bypass_reg_re(38) <= IFFT1_bypass_reg_next_re(38);
        IFFT1_bypass_reg_im(38) <= IFFT1_bypass_reg_next_im(38);
        IFFT1_bypass_reg_re(39) <= IFFT1_bypass_reg_next_re(39);
        IFFT1_bypass_reg_im(39) <= IFFT1_bypass_reg_next_im(39);
        IFFT1_bypass_reg_re(40) <= IFFT1_bypass_reg_next_re(40);
        IFFT1_bypass_reg_im(40) <= IFFT1_bypass_reg_next_im(40);
        IFFT1_bypass_reg_re(41) <= IFFT1_bypass_reg_next_re(41);
        IFFT1_bypass_reg_im(41) <= IFFT1_bypass_reg_next_im(41);
        IFFT1_bypass_reg_re(42) <= IFFT1_bypass_reg_next_re(42);
        IFFT1_bypass_reg_im(42) <= IFFT1_bypass_reg_next_im(42);
        IFFT1_bypass_reg_re(43) <= IFFT1_bypass_reg_next_re(43);
        IFFT1_bypass_reg_im(43) <= IFFT1_bypass_reg_next_im(43);
        IFFT1_bypass_reg_re(44) <= IFFT1_bypass_reg_next_re(44);
        IFFT1_bypass_reg_im(44) <= IFFT1_bypass_reg_next_im(44);
        IFFT1_bypass_reg_re(45) <= IFFT1_bypass_reg_next_re(45);
        IFFT1_bypass_reg_im(45) <= IFFT1_bypass_reg_next_im(45);
        IFFT1_bypass_reg_re(46) <= IFFT1_bypass_reg_next_re(46);
        IFFT1_bypass_reg_im(46) <= IFFT1_bypass_reg_next_im(46);
        IFFT1_bypass_reg_re(47) <= IFFT1_bypass_reg_next_re(47);
        IFFT1_bypass_reg_im(47) <= IFFT1_bypass_reg_next_im(47);
        IFFT1_bypass_reg_re(48) <= IFFT1_bypass_reg_next_re(48);
        IFFT1_bypass_reg_im(48) <= IFFT1_bypass_reg_next_im(48);
        IFFT1_bypass_reg_re(49) <= IFFT1_bypass_reg_next_re(49);
        IFFT1_bypass_reg_im(49) <= IFFT1_bypass_reg_next_im(49);
        IFFT1_bypass_reg_re(50) <= IFFT1_bypass_reg_next_re(50);
        IFFT1_bypass_reg_im(50) <= IFFT1_bypass_reg_next_im(50);
        IFFT1_bypass_reg_re(51) <= IFFT1_bypass_reg_next_re(51);
        IFFT1_bypass_reg_im(51) <= IFFT1_bypass_reg_next_im(51);
        IFFT1_bypass_reg_re(52) <= IFFT1_bypass_reg_next_re(52);
        IFFT1_bypass_reg_im(52) <= IFFT1_bypass_reg_next_im(52);
        IFFT1_bypass_reg_re(53) <= IFFT1_bypass_reg_next_re(53);
        IFFT1_bypass_reg_im(53) <= IFFT1_bypass_reg_next_im(53);
        IFFT1_bypass_reg_re(54) <= IFFT1_bypass_reg_next_re(54);
        IFFT1_bypass_reg_im(54) <= IFFT1_bypass_reg_next_im(54);
        IFFT1_bypass_reg_re(55) <= IFFT1_bypass_reg_next_re(55);
        IFFT1_bypass_reg_im(55) <= IFFT1_bypass_reg_next_im(55);
        IFFT1_bypass_reg_re(56) <= IFFT1_bypass_reg_next_re(56);
        IFFT1_bypass_reg_im(56) <= IFFT1_bypass_reg_next_im(56);
        IFFT1_bypass_reg_re(57) <= IFFT1_bypass_reg_next_re(57);
        IFFT1_bypass_reg_im(57) <= IFFT1_bypass_reg_next_im(57);
        IFFT1_bypass_reg_re(58) <= IFFT1_bypass_reg_next_re(58);
        IFFT1_bypass_reg_im(58) <= IFFT1_bypass_reg_next_im(58);
        IFFT1_bypass_reg_re(59) <= IFFT1_bypass_reg_next_re(59);
        IFFT1_bypass_reg_im(59) <= IFFT1_bypass_reg_next_im(59);
        IFFT1_bypass_reg_re(60) <= IFFT1_bypass_reg_next_re(60);
        IFFT1_bypass_reg_im(60) <= IFFT1_bypass_reg_next_im(60);
        IFFT1_bypass_reg_re(61) <= IFFT1_bypass_reg_next_re(61);
        IFFT1_bypass_reg_im(61) <= IFFT1_bypass_reg_next_im(61);
        IFFT1_bypass_reg_re(62) <= IFFT1_bypass_reg_next_re(62);
        IFFT1_bypass_reg_im(62) <= IFFT1_bypass_reg_next_im(62);
        IFFT1_bypass_reg_re(63) <= IFFT1_bypass_reg_next_re(63);
        IFFT1_bypass_reg_im(63) <= IFFT1_bypass_reg_next_im(63);
      END IF;
    END IF;
  END PROCESS IFFT1_bypass_process;

  
  RT2_out1_re_1(0) <= RT2_out1_re(0) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(0);
  
  RT2_out1_re_1(1) <= RT2_out1_re(1) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(1);
  
  RT2_out1_re_1(2) <= RT2_out1_re(2) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(2);
  
  RT2_out1_re_1(3) <= RT2_out1_re(3) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(3);
  
  RT2_out1_re_1(4) <= RT2_out1_re(4) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(4);
  
  RT2_out1_re_1(5) <= RT2_out1_re(5) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(5);
  
  RT2_out1_re_1(6) <= RT2_out1_re(6) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(6);
  
  RT2_out1_re_1(7) <= RT2_out1_re(7) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(7);
  
  RT2_out1_re_1(8) <= RT2_out1_re(8) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(8);
  
  RT2_out1_re_1(9) <= RT2_out1_re(9) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(9);
  
  RT2_out1_re_1(10) <= RT2_out1_re(10) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(10);
  
  RT2_out1_re_1(11) <= RT2_out1_re(11) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(11);
  
  RT2_out1_re_1(12) <= RT2_out1_re(12) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(12);
  
  RT2_out1_re_1(13) <= RT2_out1_re(13) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(13);
  
  RT2_out1_re_1(14) <= RT2_out1_re(14) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(14);
  
  RT2_out1_re_1(15) <= RT2_out1_re(15) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(15);
  
  RT2_out1_re_1(16) <= RT2_out1_re(16) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(16);
  
  RT2_out1_re_1(17) <= RT2_out1_re(17) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(17);
  
  RT2_out1_re_1(18) <= RT2_out1_re(18) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(18);
  
  RT2_out1_re_1(19) <= RT2_out1_re(19) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(19);
  
  RT2_out1_re_1(20) <= RT2_out1_re(20) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(20);
  
  RT2_out1_re_1(21) <= RT2_out1_re(21) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(21);
  
  RT2_out1_re_1(22) <= RT2_out1_re(22) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(22);
  
  RT2_out1_re_1(23) <= RT2_out1_re(23) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(23);
  
  RT2_out1_re_1(24) <= RT2_out1_re(24) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(24);
  
  RT2_out1_re_1(25) <= RT2_out1_re(25) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(25);
  
  RT2_out1_re_1(26) <= RT2_out1_re(26) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(26);
  
  RT2_out1_re_1(27) <= RT2_out1_re(27) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(27);
  
  RT2_out1_re_1(28) <= RT2_out1_re(28) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(28);
  
  RT2_out1_re_1(29) <= RT2_out1_re(29) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(29);
  
  RT2_out1_re_1(30) <= RT2_out1_re(30) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(30);
  
  RT2_out1_re_1(31) <= RT2_out1_re(31) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(31);
  
  RT2_out1_re_1(32) <= RT2_out1_re(32) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(32);
  
  RT2_out1_re_1(33) <= RT2_out1_re(33) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(33);
  
  RT2_out1_re_1(34) <= RT2_out1_re(34) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(34);
  
  RT2_out1_re_1(35) <= RT2_out1_re(35) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(35);
  
  RT2_out1_re_1(36) <= RT2_out1_re(36) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(36);
  
  RT2_out1_re_1(37) <= RT2_out1_re(37) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(37);
  
  RT2_out1_re_1(38) <= RT2_out1_re(38) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(38);
  
  RT2_out1_re_1(39) <= RT2_out1_re(39) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(39);
  
  RT2_out1_re_1(40) <= RT2_out1_re(40) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(40);
  
  RT2_out1_re_1(41) <= RT2_out1_re(41) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(41);
  
  RT2_out1_re_1(42) <= RT2_out1_re(42) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(42);
  
  RT2_out1_re_1(43) <= RT2_out1_re(43) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(43);
  
  RT2_out1_re_1(44) <= RT2_out1_re(44) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(44);
  
  RT2_out1_re_1(45) <= RT2_out1_re(45) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(45);
  
  RT2_out1_re_1(46) <= RT2_out1_re(46) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(46);
  
  RT2_out1_re_1(47) <= RT2_out1_re(47) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(47);
  
  RT2_out1_re_1(48) <= RT2_out1_re(48) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(48);
  
  RT2_out1_re_1(49) <= RT2_out1_re(49) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(49);
  
  RT2_out1_re_1(50) <= RT2_out1_re(50) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(50);
  
  RT2_out1_re_1(51) <= RT2_out1_re(51) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(51);
  
  RT2_out1_re_1(52) <= RT2_out1_re(52) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(52);
  
  RT2_out1_re_1(53) <= RT2_out1_re(53) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(53);
  
  RT2_out1_re_1(54) <= RT2_out1_re(54) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(54);
  
  RT2_out1_re_1(55) <= RT2_out1_re(55) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(55);
  
  RT2_out1_re_1(56) <= RT2_out1_re(56) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(56);
  
  RT2_out1_re_1(57) <= RT2_out1_re(57) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(57);
  
  RT2_out1_re_1(58) <= RT2_out1_re(58) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(58);
  
  RT2_out1_re_1(59) <= RT2_out1_re(59) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(59);
  
  RT2_out1_re_1(60) <= RT2_out1_re(60) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(60);
  
  RT2_out1_re_1(61) <= RT2_out1_re(61) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(61);
  
  RT2_out1_re_1(62) <= RT2_out1_re(62) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(62);
  
  RT2_out1_re_1(63) <= RT2_out1_re(63) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_re(63);
  
  RT2_out1_im_1(0) <= RT2_out1_im(0) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(0);
  
  RT2_out1_im_1(1) <= RT2_out1_im(1) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(1);
  
  RT2_out1_im_1(2) <= RT2_out1_im(2) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(2);
  
  RT2_out1_im_1(3) <= RT2_out1_im(3) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(3);
  
  RT2_out1_im_1(4) <= RT2_out1_im(4) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(4);
  
  RT2_out1_im_1(5) <= RT2_out1_im(5) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(5);
  
  RT2_out1_im_1(6) <= RT2_out1_im(6) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(6);
  
  RT2_out1_im_1(7) <= RT2_out1_im(7) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(7);
  
  RT2_out1_im_1(8) <= RT2_out1_im(8) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(8);
  
  RT2_out1_im_1(9) <= RT2_out1_im(9) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(9);
  
  RT2_out1_im_1(10) <= RT2_out1_im(10) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(10);
  
  RT2_out1_im_1(11) <= RT2_out1_im(11) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(11);
  
  RT2_out1_im_1(12) <= RT2_out1_im(12) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(12);
  
  RT2_out1_im_1(13) <= RT2_out1_im(13) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(13);
  
  RT2_out1_im_1(14) <= RT2_out1_im(14) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(14);
  
  RT2_out1_im_1(15) <= RT2_out1_im(15) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(15);
  
  RT2_out1_im_1(16) <= RT2_out1_im(16) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(16);
  
  RT2_out1_im_1(17) <= RT2_out1_im(17) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(17);
  
  RT2_out1_im_1(18) <= RT2_out1_im(18) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(18);
  
  RT2_out1_im_1(19) <= RT2_out1_im(19) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(19);
  
  RT2_out1_im_1(20) <= RT2_out1_im(20) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(20);
  
  RT2_out1_im_1(21) <= RT2_out1_im(21) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(21);
  
  RT2_out1_im_1(22) <= RT2_out1_im(22) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(22);
  
  RT2_out1_im_1(23) <= RT2_out1_im(23) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(23);
  
  RT2_out1_im_1(24) <= RT2_out1_im(24) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(24);
  
  RT2_out1_im_1(25) <= RT2_out1_im(25) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(25);
  
  RT2_out1_im_1(26) <= RT2_out1_im(26) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(26);
  
  RT2_out1_im_1(27) <= RT2_out1_im(27) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(27);
  
  RT2_out1_im_1(28) <= RT2_out1_im(28) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(28);
  
  RT2_out1_im_1(29) <= RT2_out1_im(29) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(29);
  
  RT2_out1_im_1(30) <= RT2_out1_im(30) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(30);
  
  RT2_out1_im_1(31) <= RT2_out1_im(31) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(31);
  
  RT2_out1_im_1(32) <= RT2_out1_im(32) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(32);
  
  RT2_out1_im_1(33) <= RT2_out1_im(33) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(33);
  
  RT2_out1_im_1(34) <= RT2_out1_im(34) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(34);
  
  RT2_out1_im_1(35) <= RT2_out1_im(35) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(35);
  
  RT2_out1_im_1(36) <= RT2_out1_im(36) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(36);
  
  RT2_out1_im_1(37) <= RT2_out1_im(37) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(37);
  
  RT2_out1_im_1(38) <= RT2_out1_im(38) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(38);
  
  RT2_out1_im_1(39) <= RT2_out1_im(39) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(39);
  
  RT2_out1_im_1(40) <= RT2_out1_im(40) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(40);
  
  RT2_out1_im_1(41) <= RT2_out1_im(41) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(41);
  
  RT2_out1_im_1(42) <= RT2_out1_im(42) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(42);
  
  RT2_out1_im_1(43) <= RT2_out1_im(43) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(43);
  
  RT2_out1_im_1(44) <= RT2_out1_im(44) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(44);
  
  RT2_out1_im_1(45) <= RT2_out1_im(45) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(45);
  
  RT2_out1_im_1(46) <= RT2_out1_im(46) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(46);
  
  RT2_out1_im_1(47) <= RT2_out1_im(47) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(47);
  
  RT2_out1_im_1(48) <= RT2_out1_im(48) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(48);
  
  RT2_out1_im_1(49) <= RT2_out1_im(49) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(49);
  
  RT2_out1_im_1(50) <= RT2_out1_im(50) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(50);
  
  RT2_out1_im_1(51) <= RT2_out1_im(51) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(51);
  
  RT2_out1_im_1(52) <= RT2_out1_im(52) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(52);
  
  RT2_out1_im_1(53) <= RT2_out1_im(53) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(53);
  
  RT2_out1_im_1(54) <= RT2_out1_im(54) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(54);
  
  RT2_out1_im_1(55) <= RT2_out1_im(55) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(55);
  
  RT2_out1_im_1(56) <= RT2_out1_im(56) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(56);
  
  RT2_out1_im_1(57) <= RT2_out1_im(57) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(57);
  
  RT2_out1_im_1(58) <= RT2_out1_im(58) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(58);
  
  RT2_out1_im_1(59) <= RT2_out1_im(59) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(59);
  
  RT2_out1_im_1(60) <= RT2_out1_im(60) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(60);
  
  RT2_out1_im_1(61) <= RT2_out1_im(61) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(61);
  
  RT2_out1_im_1(62) <= RT2_out1_im(62) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(62);
  
  RT2_out1_im_1(63) <= RT2_out1_im(63) WHEN enb_1_60_1 = '1' ELSE
      IFFT1_bypass_reg_im(63);
  IFFT1_bypass_reg_next_re(0) <= RT2_out1_re(0);
  IFFT1_bypass_reg_next_im(0) <= RT2_out1_im(0);
  IFFT1_bypass_reg_next_re(1) <= RT2_out1_re(1);
  IFFT1_bypass_reg_next_im(1) <= RT2_out1_im(1);
  IFFT1_bypass_reg_next_re(2) <= RT2_out1_re(2);
  IFFT1_bypass_reg_next_im(2) <= RT2_out1_im(2);
  IFFT1_bypass_reg_next_re(3) <= RT2_out1_re(3);
  IFFT1_bypass_reg_next_im(3) <= RT2_out1_im(3);
  IFFT1_bypass_reg_next_re(4) <= RT2_out1_re(4);
  IFFT1_bypass_reg_next_im(4) <= RT2_out1_im(4);
  IFFT1_bypass_reg_next_re(5) <= RT2_out1_re(5);
  IFFT1_bypass_reg_next_im(5) <= RT2_out1_im(5);
  IFFT1_bypass_reg_next_re(6) <= RT2_out1_re(6);
  IFFT1_bypass_reg_next_im(6) <= RT2_out1_im(6);
  IFFT1_bypass_reg_next_re(7) <= RT2_out1_re(7);
  IFFT1_bypass_reg_next_im(7) <= RT2_out1_im(7);
  IFFT1_bypass_reg_next_re(8) <= RT2_out1_re(8);
  IFFT1_bypass_reg_next_im(8) <= RT2_out1_im(8);
  IFFT1_bypass_reg_next_re(9) <= RT2_out1_re(9);
  IFFT1_bypass_reg_next_im(9) <= RT2_out1_im(9);
  IFFT1_bypass_reg_next_re(10) <= RT2_out1_re(10);
  IFFT1_bypass_reg_next_im(10) <= RT2_out1_im(10);
  IFFT1_bypass_reg_next_re(11) <= RT2_out1_re(11);
  IFFT1_bypass_reg_next_im(11) <= RT2_out1_im(11);
  IFFT1_bypass_reg_next_re(12) <= RT2_out1_re(12);
  IFFT1_bypass_reg_next_im(12) <= RT2_out1_im(12);
  IFFT1_bypass_reg_next_re(13) <= RT2_out1_re(13);
  IFFT1_bypass_reg_next_im(13) <= RT2_out1_im(13);
  IFFT1_bypass_reg_next_re(14) <= RT2_out1_re(14);
  IFFT1_bypass_reg_next_im(14) <= RT2_out1_im(14);
  IFFT1_bypass_reg_next_re(15) <= RT2_out1_re(15);
  IFFT1_bypass_reg_next_im(15) <= RT2_out1_im(15);
  IFFT1_bypass_reg_next_re(16) <= RT2_out1_re(16);
  IFFT1_bypass_reg_next_im(16) <= RT2_out1_im(16);
  IFFT1_bypass_reg_next_re(17) <= RT2_out1_re(17);
  IFFT1_bypass_reg_next_im(17) <= RT2_out1_im(17);
  IFFT1_bypass_reg_next_re(18) <= RT2_out1_re(18);
  IFFT1_bypass_reg_next_im(18) <= RT2_out1_im(18);
  IFFT1_bypass_reg_next_re(19) <= RT2_out1_re(19);
  IFFT1_bypass_reg_next_im(19) <= RT2_out1_im(19);
  IFFT1_bypass_reg_next_re(20) <= RT2_out1_re(20);
  IFFT1_bypass_reg_next_im(20) <= RT2_out1_im(20);
  IFFT1_bypass_reg_next_re(21) <= RT2_out1_re(21);
  IFFT1_bypass_reg_next_im(21) <= RT2_out1_im(21);
  IFFT1_bypass_reg_next_re(22) <= RT2_out1_re(22);
  IFFT1_bypass_reg_next_im(22) <= RT2_out1_im(22);
  IFFT1_bypass_reg_next_re(23) <= RT2_out1_re(23);
  IFFT1_bypass_reg_next_im(23) <= RT2_out1_im(23);
  IFFT1_bypass_reg_next_re(24) <= RT2_out1_re(24);
  IFFT1_bypass_reg_next_im(24) <= RT2_out1_im(24);
  IFFT1_bypass_reg_next_re(25) <= RT2_out1_re(25);
  IFFT1_bypass_reg_next_im(25) <= RT2_out1_im(25);
  IFFT1_bypass_reg_next_re(26) <= RT2_out1_re(26);
  IFFT1_bypass_reg_next_im(26) <= RT2_out1_im(26);
  IFFT1_bypass_reg_next_re(27) <= RT2_out1_re(27);
  IFFT1_bypass_reg_next_im(27) <= RT2_out1_im(27);
  IFFT1_bypass_reg_next_re(28) <= RT2_out1_re(28);
  IFFT1_bypass_reg_next_im(28) <= RT2_out1_im(28);
  IFFT1_bypass_reg_next_re(29) <= RT2_out1_re(29);
  IFFT1_bypass_reg_next_im(29) <= RT2_out1_im(29);
  IFFT1_bypass_reg_next_re(30) <= RT2_out1_re(30);
  IFFT1_bypass_reg_next_im(30) <= RT2_out1_im(30);
  IFFT1_bypass_reg_next_re(31) <= RT2_out1_re(31);
  IFFT1_bypass_reg_next_im(31) <= RT2_out1_im(31);
  IFFT1_bypass_reg_next_re(32) <= RT2_out1_re(32);
  IFFT1_bypass_reg_next_im(32) <= RT2_out1_im(32);
  IFFT1_bypass_reg_next_re(33) <= RT2_out1_re(33);
  IFFT1_bypass_reg_next_im(33) <= RT2_out1_im(33);
  IFFT1_bypass_reg_next_re(34) <= RT2_out1_re(34);
  IFFT1_bypass_reg_next_im(34) <= RT2_out1_im(34);
  IFFT1_bypass_reg_next_re(35) <= RT2_out1_re(35);
  IFFT1_bypass_reg_next_im(35) <= RT2_out1_im(35);
  IFFT1_bypass_reg_next_re(36) <= RT2_out1_re(36);
  IFFT1_bypass_reg_next_im(36) <= RT2_out1_im(36);
  IFFT1_bypass_reg_next_re(37) <= RT2_out1_re(37);
  IFFT1_bypass_reg_next_im(37) <= RT2_out1_im(37);
  IFFT1_bypass_reg_next_re(38) <= RT2_out1_re(38);
  IFFT1_bypass_reg_next_im(38) <= RT2_out1_im(38);
  IFFT1_bypass_reg_next_re(39) <= RT2_out1_re(39);
  IFFT1_bypass_reg_next_im(39) <= RT2_out1_im(39);
  IFFT1_bypass_reg_next_re(40) <= RT2_out1_re(40);
  IFFT1_bypass_reg_next_im(40) <= RT2_out1_im(40);
  IFFT1_bypass_reg_next_re(41) <= RT2_out1_re(41);
  IFFT1_bypass_reg_next_im(41) <= RT2_out1_im(41);
  IFFT1_bypass_reg_next_re(42) <= RT2_out1_re(42);
  IFFT1_bypass_reg_next_im(42) <= RT2_out1_im(42);
  IFFT1_bypass_reg_next_re(43) <= RT2_out1_re(43);
  IFFT1_bypass_reg_next_im(43) <= RT2_out1_im(43);
  IFFT1_bypass_reg_next_re(44) <= RT2_out1_re(44);
  IFFT1_bypass_reg_next_im(44) <= RT2_out1_im(44);
  IFFT1_bypass_reg_next_re(45) <= RT2_out1_re(45);
  IFFT1_bypass_reg_next_im(45) <= RT2_out1_im(45);
  IFFT1_bypass_reg_next_re(46) <= RT2_out1_re(46);
  IFFT1_bypass_reg_next_im(46) <= RT2_out1_im(46);
  IFFT1_bypass_reg_next_re(47) <= RT2_out1_re(47);
  IFFT1_bypass_reg_next_im(47) <= RT2_out1_im(47);
  IFFT1_bypass_reg_next_re(48) <= RT2_out1_re(48);
  IFFT1_bypass_reg_next_im(48) <= RT2_out1_im(48);
  IFFT1_bypass_reg_next_re(49) <= RT2_out1_re(49);
  IFFT1_bypass_reg_next_im(49) <= RT2_out1_im(49);
  IFFT1_bypass_reg_next_re(50) <= RT2_out1_re(50);
  IFFT1_bypass_reg_next_im(50) <= RT2_out1_im(50);
  IFFT1_bypass_reg_next_re(51) <= RT2_out1_re(51);
  IFFT1_bypass_reg_next_im(51) <= RT2_out1_im(51);
  IFFT1_bypass_reg_next_re(52) <= RT2_out1_re(52);
  IFFT1_bypass_reg_next_im(52) <= RT2_out1_im(52);
  IFFT1_bypass_reg_next_re(53) <= RT2_out1_re(53);
  IFFT1_bypass_reg_next_im(53) <= RT2_out1_im(53);
  IFFT1_bypass_reg_next_re(54) <= RT2_out1_re(54);
  IFFT1_bypass_reg_next_im(54) <= RT2_out1_im(54);
  IFFT1_bypass_reg_next_re(55) <= RT2_out1_re(55);
  IFFT1_bypass_reg_next_im(55) <= RT2_out1_im(55);
  IFFT1_bypass_reg_next_re(56) <= RT2_out1_re(56);
  IFFT1_bypass_reg_next_im(56) <= RT2_out1_im(56);
  IFFT1_bypass_reg_next_re(57) <= RT2_out1_re(57);
  IFFT1_bypass_reg_next_im(57) <= RT2_out1_im(57);
  IFFT1_bypass_reg_next_re(58) <= RT2_out1_re(58);
  IFFT1_bypass_reg_next_im(58) <= RT2_out1_im(58);
  IFFT1_bypass_reg_next_re(59) <= RT2_out1_re(59);
  IFFT1_bypass_reg_next_im(59) <= RT2_out1_im(59);
  IFFT1_bypass_reg_next_re(60) <= RT2_out1_re(60);
  IFFT1_bypass_reg_next_im(60) <= RT2_out1_im(60);
  IFFT1_bypass_reg_next_re(61) <= RT2_out1_re(61);
  IFFT1_bypass_reg_next_im(61) <= RT2_out1_im(61);
  IFFT1_bypass_reg_next_re(62) <= RT2_out1_re(62);
  IFFT1_bypass_reg_next_im(62) <= RT2_out1_im(62);
  IFFT1_bypass_reg_next_re(63) <= RT2_out1_re(63);
  IFFT1_bypass_reg_next_im(63) <= RT2_out1_im(63);

  outputgen4: FOR k IN 0 TO 63 GENERATE
    RT2_out1_re_2(k) <= std_logic_vector(RT2_out1_re_1(k));
  END GENERATE;

  outputgen3: FOR k IN 0 TO 63 GENERATE
    RT2_out1_im_2(k) <= std_logic_vector(RT2_out1_im_1(k));
  END GENERATE;

  Constant_out1 <= '1';

  IFFT2_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_60_1 = '1' THEN
        Constant_out1_1 <= Constant_out1;
      END IF;
    END IF;
  END PROCESS IFFT2_output_process;


  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant_out1_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_60_0 = '1' THEN
        Constant_out1_2 <= Constant_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  outputgen2: FOR k IN 0 TO 63 GENERATE
    IFFT_out1_re_signed(k) <= signed(IFFT_out1_re(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 63 GENERATE
    IFFT_out1_im_signed(k) <= signed(IFFT_out1_im(k));
  END GENERATE;

  RT2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      RT2_reg(0) <= to_signed(16#0000#, 16);
      RT2_reg(1) <= to_signed(16#0000#, 16);
      RT2_reg(2) <= to_signed(16#0000#, 16);
      RT2_reg(3) <= to_signed(16#0000#, 16);
      RT2_reg(4) <= to_signed(16#0000#, 16);
      RT2_reg(5) <= to_signed(16#0000#, 16);
      RT2_reg(6) <= to_signed(16#0000#, 16);
      RT2_reg(7) <= to_signed(16#0000#, 16);
      RT2_reg(8) <= to_signed(16#0000#, 16);
      RT2_reg(9) <= to_signed(16#0000#, 16);
      RT2_reg(10) <= to_signed(16#0000#, 16);
      RT2_reg(11) <= to_signed(16#0000#, 16);
      RT2_reg(12) <= to_signed(16#0000#, 16);
      RT2_reg(13) <= to_signed(16#0000#, 16);
      RT2_reg(14) <= to_signed(16#0000#, 16);
      RT2_reg(15) <= to_signed(16#0000#, 16);
      RT2_reg(16) <= to_signed(16#0000#, 16);
      RT2_reg(17) <= to_signed(16#0000#, 16);
      RT2_reg(18) <= to_signed(16#0000#, 16);
      RT2_reg(19) <= to_signed(16#0000#, 16);
      RT2_reg(20) <= to_signed(16#0000#, 16);
      RT2_reg(21) <= to_signed(16#0000#, 16);
      RT2_reg(22) <= to_signed(16#0000#, 16);
      RT2_reg(23) <= to_signed(16#0000#, 16);
      RT2_reg(24) <= to_signed(16#0000#, 16);
      RT2_reg(25) <= to_signed(16#0000#, 16);
      RT2_reg(26) <= to_signed(16#0000#, 16);
      RT2_reg(27) <= to_signed(16#0000#, 16);
      RT2_reg(28) <= to_signed(16#0000#, 16);
      RT2_reg(29) <= to_signed(16#0000#, 16);
      RT2_reg(30) <= to_signed(16#0000#, 16);
      RT2_reg(31) <= to_signed(16#0000#, 16);
      RT2_reg(32) <= to_signed(16#0000#, 16);
      RT2_reg(33) <= to_signed(16#0000#, 16);
      RT2_reg(34) <= to_signed(16#0000#, 16);
      RT2_reg(35) <= to_signed(16#0000#, 16);
      RT2_reg(36) <= to_signed(16#0000#, 16);
      RT2_reg(37) <= to_signed(16#0000#, 16);
      RT2_reg(38) <= to_signed(16#0000#, 16);
      RT2_reg(39) <= to_signed(16#0000#, 16);
      RT2_reg(40) <= to_signed(16#0000#, 16);
      RT2_reg(41) <= to_signed(16#0000#, 16);
      RT2_reg(42) <= to_signed(16#0000#, 16);
      RT2_reg(43) <= to_signed(16#0000#, 16);
      RT2_reg(44) <= to_signed(16#0000#, 16);
      RT2_reg(45) <= to_signed(16#0000#, 16);
      RT2_reg(46) <= to_signed(16#0000#, 16);
      RT2_reg(47) <= to_signed(16#0000#, 16);
      RT2_reg(48) <= to_signed(16#0000#, 16);
      RT2_reg(49) <= to_signed(16#0000#, 16);
      RT2_reg(50) <= to_signed(16#0000#, 16);
      RT2_reg(51) <= to_signed(16#0000#, 16);
      RT2_reg(52) <= to_signed(16#0000#, 16);
      RT2_reg(53) <= to_signed(16#0000#, 16);
      RT2_reg(54) <= to_signed(16#0000#, 16);
      RT2_reg(55) <= to_signed(16#0000#, 16);
      RT2_reg(56) <= to_signed(16#0000#, 16);
      RT2_reg(57) <= to_signed(16#0000#, 16);
      RT2_reg(58) <= to_signed(16#0000#, 16);
      RT2_reg(59) <= to_signed(16#0000#, 16);
      RT2_reg(60) <= to_signed(16#0000#, 16);
      RT2_reg(61) <= to_signed(16#0000#, 16);
      RT2_reg(62) <= to_signed(16#0000#, 16);
      RT2_reg(63) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_60_0 = '1' THEN
        RT2_reg(0) <= RT2_reg_next(0);
        RT2_reg(1) <= RT2_reg_next(1);
        RT2_reg(2) <= RT2_reg_next(2);
        RT2_reg(3) <= RT2_reg_next(3);
        RT2_reg(4) <= RT2_reg_next(4);
        RT2_reg(5) <= RT2_reg_next(5);
        RT2_reg(6) <= RT2_reg_next(6);
        RT2_reg(7) <= RT2_reg_next(7);
        RT2_reg(8) <= RT2_reg_next(8);
        RT2_reg(9) <= RT2_reg_next(9);
        RT2_reg(10) <= RT2_reg_next(10);
        RT2_reg(11) <= RT2_reg_next(11);
        RT2_reg(12) <= RT2_reg_next(12);
        RT2_reg(13) <= RT2_reg_next(13);
        RT2_reg(14) <= RT2_reg_next(14);
        RT2_reg(15) <= RT2_reg_next(15);
        RT2_reg(16) <= RT2_reg_next(16);
        RT2_reg(17) <= RT2_reg_next(17);
        RT2_reg(18) <= RT2_reg_next(18);
        RT2_reg(19) <= RT2_reg_next(19);
        RT2_reg(20) <= RT2_reg_next(20);
        RT2_reg(21) <= RT2_reg_next(21);
        RT2_reg(22) <= RT2_reg_next(22);
        RT2_reg(23) <= RT2_reg_next(23);
        RT2_reg(24) <= RT2_reg_next(24);
        RT2_reg(25) <= RT2_reg_next(25);
        RT2_reg(26) <= RT2_reg_next(26);
        RT2_reg(27) <= RT2_reg_next(27);
        RT2_reg(28) <= RT2_reg_next(28);
        RT2_reg(29) <= RT2_reg_next(29);
        RT2_reg(30) <= RT2_reg_next(30);
        RT2_reg(31) <= RT2_reg_next(31);
        RT2_reg(32) <= RT2_reg_next(32);
        RT2_reg(33) <= RT2_reg_next(33);
        RT2_reg(34) <= RT2_reg_next(34);
        RT2_reg(35) <= RT2_reg_next(35);
        RT2_reg(36) <= RT2_reg_next(36);
        RT2_reg(37) <= RT2_reg_next(37);
        RT2_reg(38) <= RT2_reg_next(38);
        RT2_reg(39) <= RT2_reg_next(39);
        RT2_reg(40) <= RT2_reg_next(40);
        RT2_reg(41) <= RT2_reg_next(41);
        RT2_reg(42) <= RT2_reg_next(42);
        RT2_reg(43) <= RT2_reg_next(43);
        RT2_reg(44) <= RT2_reg_next(44);
        RT2_reg(45) <= RT2_reg_next(45);
        RT2_reg(46) <= RT2_reg_next(46);
        RT2_reg(47) <= RT2_reg_next(47);
        RT2_reg(48) <= RT2_reg_next(48);
        RT2_reg(49) <= RT2_reg_next(49);
        RT2_reg(50) <= RT2_reg_next(50);
        RT2_reg(51) <= RT2_reg_next(51);
        RT2_reg(52) <= RT2_reg_next(52);
        RT2_reg(53) <= RT2_reg_next(53);
        RT2_reg(54) <= RT2_reg_next(54);
        RT2_reg(55) <= RT2_reg_next(55);
        RT2_reg(56) <= RT2_reg_next(56);
        RT2_reg(57) <= RT2_reg_next(57);
        RT2_reg(58) <= RT2_reg_next(58);
        RT2_reg(59) <= RT2_reg_next(59);
        RT2_reg(60) <= RT2_reg_next(60);
        RT2_reg(61) <= RT2_reg_next(61);
        RT2_reg(62) <= RT2_reg_next(62);
        RT2_reg(63) <= RT2_reg_next(63);
      END IF;
    END IF;
  END PROCESS RT2_process;

  Complex_to_Real_Imag_out2(0) <= RT2_reg(0);
  Complex_to_Real_Imag_out2(1) <= RT2_reg(1);
  Complex_to_Real_Imag_out2(2) <= RT2_reg(2);
  Complex_to_Real_Imag_out2(3) <= RT2_reg(3);
  Complex_to_Real_Imag_out2(4) <= RT2_reg(4);
  Complex_to_Real_Imag_out2(5) <= RT2_reg(5);
  Complex_to_Real_Imag_out2(6) <= RT2_reg(6);
  Complex_to_Real_Imag_out2(7) <= RT2_reg(7);
  Complex_to_Real_Imag_out2(8) <= RT2_reg(8);
  Complex_to_Real_Imag_out2(9) <= RT2_reg(9);
  Complex_to_Real_Imag_out2(10) <= RT2_reg(10);
  Complex_to_Real_Imag_out2(11) <= RT2_reg(11);
  Complex_to_Real_Imag_out2(12) <= RT2_reg(12);
  Complex_to_Real_Imag_out2(13) <= RT2_reg(13);
  Complex_to_Real_Imag_out2(14) <= RT2_reg(14);
  Complex_to_Real_Imag_out2(15) <= RT2_reg(15);
  Complex_to_Real_Imag_out2(16) <= RT2_reg(16);
  Complex_to_Real_Imag_out2(17) <= RT2_reg(17);
  Complex_to_Real_Imag_out2(18) <= RT2_reg(18);
  Complex_to_Real_Imag_out2(19) <= RT2_reg(19);
  Complex_to_Real_Imag_out2(20) <= RT2_reg(20);
  Complex_to_Real_Imag_out2(21) <= RT2_reg(21);
  Complex_to_Real_Imag_out2(22) <= RT2_reg(22);
  Complex_to_Real_Imag_out2(23) <= RT2_reg(23);
  Complex_to_Real_Imag_out2(24) <= RT2_reg(24);
  Complex_to_Real_Imag_out2(25) <= RT2_reg(25);
  Complex_to_Real_Imag_out2(26) <= RT2_reg(26);
  Complex_to_Real_Imag_out2(27) <= RT2_reg(27);
  Complex_to_Real_Imag_out2(28) <= RT2_reg(28);
  Complex_to_Real_Imag_out2(29) <= RT2_reg(29);
  Complex_to_Real_Imag_out2(30) <= RT2_reg(30);
  Complex_to_Real_Imag_out2(31) <= RT2_reg(31);
  Complex_to_Real_Imag_out2(32) <= RT2_reg(32);
  Complex_to_Real_Imag_out2(33) <= RT2_reg(33);
  Complex_to_Real_Imag_out2(34) <= RT2_reg(34);
  Complex_to_Real_Imag_out2(35) <= RT2_reg(35);
  Complex_to_Real_Imag_out2(36) <= RT2_reg(36);
  Complex_to_Real_Imag_out2(37) <= RT2_reg(37);
  Complex_to_Real_Imag_out2(38) <= RT2_reg(38);
  Complex_to_Real_Imag_out2(39) <= RT2_reg(39);
  Complex_to_Real_Imag_out2(40) <= RT2_reg(40);
  Complex_to_Real_Imag_out2(41) <= RT2_reg(41);
  Complex_to_Real_Imag_out2(42) <= RT2_reg(42);
  Complex_to_Real_Imag_out2(43) <= RT2_reg(43);
  Complex_to_Real_Imag_out2(44) <= RT2_reg(44);
  Complex_to_Real_Imag_out2(45) <= RT2_reg(45);
  Complex_to_Real_Imag_out2(46) <= RT2_reg(46);
  Complex_to_Real_Imag_out2(47) <= RT2_reg(47);
  Complex_to_Real_Imag_out2(48) <= RT2_reg(48);
  Complex_to_Real_Imag_out2(49) <= RT2_reg(49);
  Complex_to_Real_Imag_out2(50) <= RT2_reg(50);
  Complex_to_Real_Imag_out2(51) <= RT2_reg(51);
  Complex_to_Real_Imag_out2(52) <= RT2_reg(52);
  Complex_to_Real_Imag_out2(53) <= RT2_reg(53);
  Complex_to_Real_Imag_out2(54) <= RT2_reg(54);
  Complex_to_Real_Imag_out2(55) <= RT2_reg(55);
  Complex_to_Real_Imag_out2(56) <= RT2_reg(56);
  Complex_to_Real_Imag_out2(57) <= RT2_reg(57);
  Complex_to_Real_Imag_out2(58) <= RT2_reg(58);
  Complex_to_Real_Imag_out2(59) <= RT2_reg(59);
  Complex_to_Real_Imag_out2(60) <= RT2_reg(60);
  Complex_to_Real_Imag_out2(61) <= RT2_reg(61);
  Complex_to_Real_Imag_out2(62) <= RT2_reg(62);
  Complex_to_Real_Imag_out2(63) <= RT2_reg(63);
  RT2_reg_next(0) <= IFFT_out1_im_signed(0);
  RT2_reg_next(1) <= IFFT_out1_im_signed(1);
  RT2_reg_next(2) <= IFFT_out1_im_signed(2);
  RT2_reg_next(3) <= IFFT_out1_im_signed(3);
  RT2_reg_next(4) <= IFFT_out1_im_signed(4);
  RT2_reg_next(5) <= IFFT_out1_im_signed(5);
  RT2_reg_next(6) <= IFFT_out1_im_signed(6);
  RT2_reg_next(7) <= IFFT_out1_im_signed(7);
  RT2_reg_next(8) <= IFFT_out1_im_signed(8);
  RT2_reg_next(9) <= IFFT_out1_im_signed(9);
  RT2_reg_next(10) <= IFFT_out1_im_signed(10);
  RT2_reg_next(11) <= IFFT_out1_im_signed(11);
  RT2_reg_next(12) <= IFFT_out1_im_signed(12);
  RT2_reg_next(13) <= IFFT_out1_im_signed(13);
  RT2_reg_next(14) <= IFFT_out1_im_signed(14);
  RT2_reg_next(15) <= IFFT_out1_im_signed(15);
  RT2_reg_next(16) <= IFFT_out1_im_signed(16);
  RT2_reg_next(17) <= IFFT_out1_im_signed(17);
  RT2_reg_next(18) <= IFFT_out1_im_signed(18);
  RT2_reg_next(19) <= IFFT_out1_im_signed(19);
  RT2_reg_next(20) <= IFFT_out1_im_signed(20);
  RT2_reg_next(21) <= IFFT_out1_im_signed(21);
  RT2_reg_next(22) <= IFFT_out1_im_signed(22);
  RT2_reg_next(23) <= IFFT_out1_im_signed(23);
  RT2_reg_next(24) <= IFFT_out1_im_signed(24);
  RT2_reg_next(25) <= IFFT_out1_im_signed(25);
  RT2_reg_next(26) <= IFFT_out1_im_signed(26);
  RT2_reg_next(27) <= IFFT_out1_im_signed(27);
  RT2_reg_next(28) <= IFFT_out1_im_signed(28);
  RT2_reg_next(29) <= IFFT_out1_im_signed(29);
  RT2_reg_next(30) <= IFFT_out1_im_signed(30);
  RT2_reg_next(31) <= IFFT_out1_im_signed(31);
  RT2_reg_next(32) <= IFFT_out1_im_signed(32);
  RT2_reg_next(33) <= IFFT_out1_im_signed(33);
  RT2_reg_next(34) <= IFFT_out1_im_signed(34);
  RT2_reg_next(35) <= IFFT_out1_im_signed(35);
  RT2_reg_next(36) <= IFFT_out1_im_signed(36);
  RT2_reg_next(37) <= IFFT_out1_im_signed(37);
  RT2_reg_next(38) <= IFFT_out1_im_signed(38);
  RT2_reg_next(39) <= IFFT_out1_im_signed(39);
  RT2_reg_next(40) <= IFFT_out1_im_signed(40);
  RT2_reg_next(41) <= IFFT_out1_im_signed(41);
  RT2_reg_next(42) <= IFFT_out1_im_signed(42);
  RT2_reg_next(43) <= IFFT_out1_im_signed(43);
  RT2_reg_next(44) <= IFFT_out1_im_signed(44);
  RT2_reg_next(45) <= IFFT_out1_im_signed(45);
  RT2_reg_next(46) <= IFFT_out1_im_signed(46);
  RT2_reg_next(47) <= IFFT_out1_im_signed(47);
  RT2_reg_next(48) <= IFFT_out1_im_signed(48);
  RT2_reg_next(49) <= IFFT_out1_im_signed(49);
  RT2_reg_next(50) <= IFFT_out1_im_signed(50);
  RT2_reg_next(51) <= IFFT_out1_im_signed(51);
  RT2_reg_next(52) <= IFFT_out1_im_signed(52);
  RT2_reg_next(53) <= IFFT_out1_im_signed(53);
  RT2_reg_next(54) <= IFFT_out1_im_signed(54);
  RT2_reg_next(55) <= IFFT_out1_im_signed(55);
  RT2_reg_next(56) <= IFFT_out1_im_signed(56);
  RT2_reg_next(57) <= IFFT_out1_im_signed(57);
  RT2_reg_next(58) <= IFFT_out1_im_signed(58);
  RT2_reg_next(59) <= IFFT_out1_im_signed(59);
  RT2_reg_next(60) <= IFFT_out1_im_signed(60);
  RT2_reg_next(61) <= IFFT_out1_im_signed(61);
  RT2_reg_next(62) <= IFFT_out1_im_signed(62);
  RT2_reg_next(63) <= IFFT_out1_im_signed(63);

  RT_out1 <= Complex_to_Real_Imag_out2;

  -- Modulo, Signed Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 150000
  count_step_1 <= to_signed(1, 32);

  modValue_1 <= to_signed(150000, 32);

  count_from_1 <= sine_sample_counter_out1 - modValue_1;

  count_1 <= sine_sample_counter_out1 + count_step_1;

  
  need_to_wrap_1 <= '1' WHEN sine_sample_counter_out1 > to_signed(149999, 32) ELSE
      '0';

  
  count_value_1 <= count_1 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  sine_sample_counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sine_sample_counter_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sine_sample_counter_out1 <= count_value_1;
      END IF;
    END IF;
  END PROCESS sine_sample_counter_process;


  sine_sample_interval_out1 <= to_signed(1145324612, 32) * sine_sample_counter_out1;

  Sine_signed <= signed(Sine);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= to_signed(16#00000#, 17);
      delayMatch1_reg(1) <= to_signed(16#00000#, 17);
      delayMatch1_reg(2) <= to_signed(16#00000#, 17);
      delayMatch1_reg(3) <= to_signed(16#00000#, 17);
      delayMatch1_reg(4) <= to_signed(16#00000#, 17);
      delayMatch1_reg(5) <= to_signed(16#00000#, 17);
      delayMatch1_reg(6) <= to_signed(16#00000#, 17);
      delayMatch1_reg(7) <= to_signed(16#00000#, 17);
      delayMatch1_reg(8) <= to_signed(16#00000#, 17);
      delayMatch1_reg(9) <= to_signed(16#00000#, 17);
      delayMatch1_reg(10) <= to_signed(16#00000#, 17);
      delayMatch1_reg(11) <= to_signed(16#00000#, 17);
      delayMatch1_reg(12) <= to_signed(16#00000#, 17);
      delayMatch1_reg(13) <= to_signed(16#00000#, 17);
      delayMatch1_reg(14) <= to_signed(16#00000#, 17);
      delayMatch1_reg(15) <= to_signed(16#00000#, 17);
      delayMatch1_reg(16) <= to_signed(16#00000#, 17);
      delayMatch1_reg(17) <= to_signed(16#00000#, 17);
      delayMatch1_reg(18) <= to_signed(16#00000#, 17);
      delayMatch1_reg(19) <= to_signed(16#00000#, 17);
      delayMatch1_reg(20) <= to_signed(16#00000#, 17);
      delayMatch1_reg(21) <= to_signed(16#00000#, 17);
      delayMatch1_reg(22) <= to_signed(16#00000#, 17);
      delayMatch1_reg(23) <= to_signed(16#00000#, 17);
      delayMatch1_reg(24) <= to_signed(16#00000#, 17);
      delayMatch1_reg(25) <= to_signed(16#00000#, 17);
      delayMatch1_reg(26) <= to_signed(16#00000#, 17);
      delayMatch1_reg(27) <= to_signed(16#00000#, 17);
      delayMatch1_reg(28) <= to_signed(16#00000#, 17);
      delayMatch1_reg(29) <= to_signed(16#00000#, 17);
      delayMatch1_reg(30) <= to_signed(16#00000#, 17);
      delayMatch1_reg(31) <= to_signed(16#00000#, 17);
      delayMatch1_reg(32) <= to_signed(16#00000#, 17);
      delayMatch1_reg(33) <= to_signed(16#00000#, 17);
      delayMatch1_reg(34) <= to_signed(16#00000#, 17);
      delayMatch1_reg(35) <= to_signed(16#00000#, 17);
      delayMatch1_reg(36) <= to_signed(16#00000#, 17);
      delayMatch1_reg(37) <= to_signed(16#00000#, 17);
      delayMatch1_reg(38) <= to_signed(16#00000#, 17);
      delayMatch1_reg(39) <= to_signed(16#00000#, 17);
      delayMatch1_reg(40) <= to_signed(16#00000#, 17);
      delayMatch1_reg(41) <= to_signed(16#00000#, 17);
      delayMatch1_reg(42) <= to_signed(16#00000#, 17);
      delayMatch1_reg(43) <= to_signed(16#00000#, 17);
      delayMatch1_reg(44) <= to_signed(16#00000#, 17);
      delayMatch1_reg(45) <= to_signed(16#00000#, 17);
      delayMatch1_reg(46) <= to_signed(16#00000#, 17);
      delayMatch1_reg(47) <= to_signed(16#00000#, 17);
      delayMatch1_reg(48) <= to_signed(16#00000#, 17);
      delayMatch1_reg(49) <= to_signed(16#00000#, 17);
      delayMatch1_reg(50) <= to_signed(16#00000#, 17);
      delayMatch1_reg(51) <= to_signed(16#00000#, 17);
      delayMatch1_reg(52) <= to_signed(16#00000#, 17);
      delayMatch1_reg(53) <= to_signed(16#00000#, 17);
      delayMatch1_reg(54) <= to_signed(16#00000#, 17);
      delayMatch1_reg(55) <= to_signed(16#00000#, 17);
      delayMatch1_reg(56) <= to_signed(16#00000#, 17);
      delayMatch1_reg(57) <= to_signed(16#00000#, 17);
      delayMatch1_reg(58) <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
        delayMatch1_reg(5) <= delayMatch1_reg_next(5);
        delayMatch1_reg(6) <= delayMatch1_reg_next(6);
        delayMatch1_reg(7) <= delayMatch1_reg_next(7);
        delayMatch1_reg(8) <= delayMatch1_reg_next(8);
        delayMatch1_reg(9) <= delayMatch1_reg_next(9);
        delayMatch1_reg(10) <= delayMatch1_reg_next(10);
        delayMatch1_reg(11) <= delayMatch1_reg_next(11);
        delayMatch1_reg(12) <= delayMatch1_reg_next(12);
        delayMatch1_reg(13) <= delayMatch1_reg_next(13);
        delayMatch1_reg(14) <= delayMatch1_reg_next(14);
        delayMatch1_reg(15) <= delayMatch1_reg_next(15);
        delayMatch1_reg(16) <= delayMatch1_reg_next(16);
        delayMatch1_reg(17) <= delayMatch1_reg_next(17);
        delayMatch1_reg(18) <= delayMatch1_reg_next(18);
        delayMatch1_reg(19) <= delayMatch1_reg_next(19);
        delayMatch1_reg(20) <= delayMatch1_reg_next(20);
        delayMatch1_reg(21) <= delayMatch1_reg_next(21);
        delayMatch1_reg(22) <= delayMatch1_reg_next(22);
        delayMatch1_reg(23) <= delayMatch1_reg_next(23);
        delayMatch1_reg(24) <= delayMatch1_reg_next(24);
        delayMatch1_reg(25) <= delayMatch1_reg_next(25);
        delayMatch1_reg(26) <= delayMatch1_reg_next(26);
        delayMatch1_reg(27) <= delayMatch1_reg_next(27);
        delayMatch1_reg(28) <= delayMatch1_reg_next(28);
        delayMatch1_reg(29) <= delayMatch1_reg_next(29);
        delayMatch1_reg(30) <= delayMatch1_reg_next(30);
        delayMatch1_reg(31) <= delayMatch1_reg_next(31);
        delayMatch1_reg(32) <= delayMatch1_reg_next(32);
        delayMatch1_reg(33) <= delayMatch1_reg_next(33);
        delayMatch1_reg(34) <= delayMatch1_reg_next(34);
        delayMatch1_reg(35) <= delayMatch1_reg_next(35);
        delayMatch1_reg(36) <= delayMatch1_reg_next(36);
        delayMatch1_reg(37) <= delayMatch1_reg_next(37);
        delayMatch1_reg(38) <= delayMatch1_reg_next(38);
        delayMatch1_reg(39) <= delayMatch1_reg_next(39);
        delayMatch1_reg(40) <= delayMatch1_reg_next(40);
        delayMatch1_reg(41) <= delayMatch1_reg_next(41);
        delayMatch1_reg(42) <= delayMatch1_reg_next(42);
        delayMatch1_reg(43) <= delayMatch1_reg_next(43);
        delayMatch1_reg(44) <= delayMatch1_reg_next(44);
        delayMatch1_reg(45) <= delayMatch1_reg_next(45);
        delayMatch1_reg(46) <= delayMatch1_reg_next(46);
        delayMatch1_reg(47) <= delayMatch1_reg_next(47);
        delayMatch1_reg(48) <= delayMatch1_reg_next(48);
        delayMatch1_reg(49) <= delayMatch1_reg_next(49);
        delayMatch1_reg(50) <= delayMatch1_reg_next(50);
        delayMatch1_reg(51) <= delayMatch1_reg_next(51);
        delayMatch1_reg(52) <= delayMatch1_reg_next(52);
        delayMatch1_reg(53) <= delayMatch1_reg_next(53);
        delayMatch1_reg(54) <= delayMatch1_reg_next(54);
        delayMatch1_reg(55) <= delayMatch1_reg_next(55);
        delayMatch1_reg(56) <= delayMatch1_reg_next(56);
        delayMatch1_reg(57) <= delayMatch1_reg_next(57);
        delayMatch1_reg(58) <= delayMatch1_reg_next(58);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Cosine_1 <= delayMatch1_reg(58);
  delayMatch1_reg_next(0) <= Cosine_signed;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);
  delayMatch1_reg_next(6) <= delayMatch1_reg(5);
  delayMatch1_reg_next(7) <= delayMatch1_reg(6);
  delayMatch1_reg_next(8) <= delayMatch1_reg(7);
  delayMatch1_reg_next(9) <= delayMatch1_reg(8);
  delayMatch1_reg_next(10) <= delayMatch1_reg(9);
  delayMatch1_reg_next(11) <= delayMatch1_reg(10);
  delayMatch1_reg_next(12) <= delayMatch1_reg(11);
  delayMatch1_reg_next(13) <= delayMatch1_reg(12);
  delayMatch1_reg_next(14) <= delayMatch1_reg(13);
  delayMatch1_reg_next(15) <= delayMatch1_reg(14);
  delayMatch1_reg_next(16) <= delayMatch1_reg(15);
  delayMatch1_reg_next(17) <= delayMatch1_reg(16);
  delayMatch1_reg_next(18) <= delayMatch1_reg(17);
  delayMatch1_reg_next(19) <= delayMatch1_reg(18);
  delayMatch1_reg_next(20) <= delayMatch1_reg(19);
  delayMatch1_reg_next(21) <= delayMatch1_reg(20);
  delayMatch1_reg_next(22) <= delayMatch1_reg(21);
  delayMatch1_reg_next(23) <= delayMatch1_reg(22);
  delayMatch1_reg_next(24) <= delayMatch1_reg(23);
  delayMatch1_reg_next(25) <= delayMatch1_reg(24);
  delayMatch1_reg_next(26) <= delayMatch1_reg(25);
  delayMatch1_reg_next(27) <= delayMatch1_reg(26);
  delayMatch1_reg_next(28) <= delayMatch1_reg(27);
  delayMatch1_reg_next(29) <= delayMatch1_reg(28);
  delayMatch1_reg_next(30) <= delayMatch1_reg(29);
  delayMatch1_reg_next(31) <= delayMatch1_reg(30);
  delayMatch1_reg_next(32) <= delayMatch1_reg(31);
  delayMatch1_reg_next(33) <= delayMatch1_reg(32);
  delayMatch1_reg_next(34) <= delayMatch1_reg(33);
  delayMatch1_reg_next(35) <= delayMatch1_reg(34);
  delayMatch1_reg_next(36) <= delayMatch1_reg(35);
  delayMatch1_reg_next(37) <= delayMatch1_reg(36);
  delayMatch1_reg_next(38) <= delayMatch1_reg(37);
  delayMatch1_reg_next(39) <= delayMatch1_reg(38);
  delayMatch1_reg_next(40) <= delayMatch1_reg(39);
  delayMatch1_reg_next(41) <= delayMatch1_reg(40);
  delayMatch1_reg_next(42) <= delayMatch1_reg(41);
  delayMatch1_reg_next(43) <= delayMatch1_reg(42);
  delayMatch1_reg_next(44) <= delayMatch1_reg(43);
  delayMatch1_reg_next(45) <= delayMatch1_reg(44);
  delayMatch1_reg_next(46) <= delayMatch1_reg(45);
  delayMatch1_reg_next(47) <= delayMatch1_reg(46);
  delayMatch1_reg_next(48) <= delayMatch1_reg(47);
  delayMatch1_reg_next(49) <= delayMatch1_reg(48);
  delayMatch1_reg_next(50) <= delayMatch1_reg(49);
  delayMatch1_reg_next(51) <= delayMatch1_reg(50);
  delayMatch1_reg_next(52) <= delayMatch1_reg(51);
  delayMatch1_reg_next(53) <= delayMatch1_reg(52);
  delayMatch1_reg_next(54) <= delayMatch1_reg(53);
  delayMatch1_reg_next(55) <= delayMatch1_reg(54);
  delayMatch1_reg_next(56) <= delayMatch1_reg(55);
  delayMatch1_reg_next(57) <= delayMatch1_reg(56);
  delayMatch1_reg_next(58) <= delayMatch1_reg(57);

  RT11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      RT11_reg(0) <= to_signed(16#0000#, 16);
      RT11_reg(1) <= to_signed(16#0000#, 16);
      RT11_reg(2) <= to_signed(16#0000#, 16);
      RT11_reg(3) <= to_signed(16#0000#, 16);
      RT11_reg(4) <= to_signed(16#0000#, 16);
      RT11_reg(5) <= to_signed(16#0000#, 16);
      RT11_reg(6) <= to_signed(16#0000#, 16);
      RT11_reg(7) <= to_signed(16#0000#, 16);
      RT11_reg(8) <= to_signed(16#0000#, 16);
      RT11_reg(9) <= to_signed(16#0000#, 16);
      RT11_reg(10) <= to_signed(16#0000#, 16);
      RT11_reg(11) <= to_signed(16#0000#, 16);
      RT11_reg(12) <= to_signed(16#0000#, 16);
      RT11_reg(13) <= to_signed(16#0000#, 16);
      RT11_reg(14) <= to_signed(16#0000#, 16);
      RT11_reg(15) <= to_signed(16#0000#, 16);
      RT11_reg(16) <= to_signed(16#0000#, 16);
      RT11_reg(17) <= to_signed(16#0000#, 16);
      RT11_reg(18) <= to_signed(16#0000#, 16);
      RT11_reg(19) <= to_signed(16#0000#, 16);
      RT11_reg(20) <= to_signed(16#0000#, 16);
      RT11_reg(21) <= to_signed(16#0000#, 16);
      RT11_reg(22) <= to_signed(16#0000#, 16);
      RT11_reg(23) <= to_signed(16#0000#, 16);
      RT11_reg(24) <= to_signed(16#0000#, 16);
      RT11_reg(25) <= to_signed(16#0000#, 16);
      RT11_reg(26) <= to_signed(16#0000#, 16);
      RT11_reg(27) <= to_signed(16#0000#, 16);
      RT11_reg(28) <= to_signed(16#0000#, 16);
      RT11_reg(29) <= to_signed(16#0000#, 16);
      RT11_reg(30) <= to_signed(16#0000#, 16);
      RT11_reg(31) <= to_signed(16#0000#, 16);
      RT11_reg(32) <= to_signed(16#0000#, 16);
      RT11_reg(33) <= to_signed(16#0000#, 16);
      RT11_reg(34) <= to_signed(16#0000#, 16);
      RT11_reg(35) <= to_signed(16#0000#, 16);
      RT11_reg(36) <= to_signed(16#0000#, 16);
      RT11_reg(37) <= to_signed(16#0000#, 16);
      RT11_reg(38) <= to_signed(16#0000#, 16);
      RT11_reg(39) <= to_signed(16#0000#, 16);
      RT11_reg(40) <= to_signed(16#0000#, 16);
      RT11_reg(41) <= to_signed(16#0000#, 16);
      RT11_reg(42) <= to_signed(16#0000#, 16);
      RT11_reg(43) <= to_signed(16#0000#, 16);
      RT11_reg(44) <= to_signed(16#0000#, 16);
      RT11_reg(45) <= to_signed(16#0000#, 16);
      RT11_reg(46) <= to_signed(16#0000#, 16);
      RT11_reg(47) <= to_signed(16#0000#, 16);
      RT11_reg(48) <= to_signed(16#0000#, 16);
      RT11_reg(49) <= to_signed(16#0000#, 16);
      RT11_reg(50) <= to_signed(16#0000#, 16);
      RT11_reg(51) <= to_signed(16#0000#, 16);
      RT11_reg(52) <= to_signed(16#0000#, 16);
      RT11_reg(53) <= to_signed(16#0000#, 16);
      RT11_reg(54) <= to_signed(16#0000#, 16);
      RT11_reg(55) <= to_signed(16#0000#, 16);
      RT11_reg(56) <= to_signed(16#0000#, 16);
      RT11_reg(57) <= to_signed(16#0000#, 16);
      RT11_reg(58) <= to_signed(16#0000#, 16);
      RT11_reg(59) <= to_signed(16#0000#, 16);
      RT11_reg(60) <= to_signed(16#0000#, 16);
      RT11_reg(61) <= to_signed(16#0000#, 16);
      RT11_reg(62) <= to_signed(16#0000#, 16);
      RT11_reg(63) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_60_0 = '1' THEN
        RT11_reg(0) <= RT11_reg_next(0);
        RT11_reg(1) <= RT11_reg_next(1);
        RT11_reg(2) <= RT11_reg_next(2);
        RT11_reg(3) <= RT11_reg_next(3);
        RT11_reg(4) <= RT11_reg_next(4);
        RT11_reg(5) <= RT11_reg_next(5);
        RT11_reg(6) <= RT11_reg_next(6);
        RT11_reg(7) <= RT11_reg_next(7);
        RT11_reg(8) <= RT11_reg_next(8);
        RT11_reg(9) <= RT11_reg_next(9);
        RT11_reg(10) <= RT11_reg_next(10);
        RT11_reg(11) <= RT11_reg_next(11);
        RT11_reg(12) <= RT11_reg_next(12);
        RT11_reg(13) <= RT11_reg_next(13);
        RT11_reg(14) <= RT11_reg_next(14);
        RT11_reg(15) <= RT11_reg_next(15);
        RT11_reg(16) <= RT11_reg_next(16);
        RT11_reg(17) <= RT11_reg_next(17);
        RT11_reg(18) <= RT11_reg_next(18);
        RT11_reg(19) <= RT11_reg_next(19);
        RT11_reg(20) <= RT11_reg_next(20);
        RT11_reg(21) <= RT11_reg_next(21);
        RT11_reg(22) <= RT11_reg_next(22);
        RT11_reg(23) <= RT11_reg_next(23);
        RT11_reg(24) <= RT11_reg_next(24);
        RT11_reg(25) <= RT11_reg_next(25);
        RT11_reg(26) <= RT11_reg_next(26);
        RT11_reg(27) <= RT11_reg_next(27);
        RT11_reg(28) <= RT11_reg_next(28);
        RT11_reg(29) <= RT11_reg_next(29);
        RT11_reg(30) <= RT11_reg_next(30);
        RT11_reg(31) <= RT11_reg_next(31);
        RT11_reg(32) <= RT11_reg_next(32);
        RT11_reg(33) <= RT11_reg_next(33);
        RT11_reg(34) <= RT11_reg_next(34);
        RT11_reg(35) <= RT11_reg_next(35);
        RT11_reg(36) <= RT11_reg_next(36);
        RT11_reg(37) <= RT11_reg_next(37);
        RT11_reg(38) <= RT11_reg_next(38);
        RT11_reg(39) <= RT11_reg_next(39);
        RT11_reg(40) <= RT11_reg_next(40);
        RT11_reg(41) <= RT11_reg_next(41);
        RT11_reg(42) <= RT11_reg_next(42);
        RT11_reg(43) <= RT11_reg_next(43);
        RT11_reg(44) <= RT11_reg_next(44);
        RT11_reg(45) <= RT11_reg_next(45);
        RT11_reg(46) <= RT11_reg_next(46);
        RT11_reg(47) <= RT11_reg_next(47);
        RT11_reg(48) <= RT11_reg_next(48);
        RT11_reg(49) <= RT11_reg_next(49);
        RT11_reg(50) <= RT11_reg_next(50);
        RT11_reg(51) <= RT11_reg_next(51);
        RT11_reg(52) <= RT11_reg_next(52);
        RT11_reg(53) <= RT11_reg_next(53);
        RT11_reg(54) <= RT11_reg_next(54);
        RT11_reg(55) <= RT11_reg_next(55);
        RT11_reg(56) <= RT11_reg_next(56);
        RT11_reg(57) <= RT11_reg_next(57);
        RT11_reg(58) <= RT11_reg_next(58);
        RT11_reg(59) <= RT11_reg_next(59);
        RT11_reg(60) <= RT11_reg_next(60);
        RT11_reg(61) <= RT11_reg_next(61);
        RT11_reg(62) <= RT11_reg_next(62);
        RT11_reg(63) <= RT11_reg_next(63);
      END IF;
    END IF;
  END PROCESS RT11_process;

  Complex_to_Real_Imag_out1(0) <= RT11_reg(0);
  Complex_to_Real_Imag_out1(1) <= RT11_reg(1);
  Complex_to_Real_Imag_out1(2) <= RT11_reg(2);
  Complex_to_Real_Imag_out1(3) <= RT11_reg(3);
  Complex_to_Real_Imag_out1(4) <= RT11_reg(4);
  Complex_to_Real_Imag_out1(5) <= RT11_reg(5);
  Complex_to_Real_Imag_out1(6) <= RT11_reg(6);
  Complex_to_Real_Imag_out1(7) <= RT11_reg(7);
  Complex_to_Real_Imag_out1(8) <= RT11_reg(8);
  Complex_to_Real_Imag_out1(9) <= RT11_reg(9);
  Complex_to_Real_Imag_out1(10) <= RT11_reg(10);
  Complex_to_Real_Imag_out1(11) <= RT11_reg(11);
  Complex_to_Real_Imag_out1(12) <= RT11_reg(12);
  Complex_to_Real_Imag_out1(13) <= RT11_reg(13);
  Complex_to_Real_Imag_out1(14) <= RT11_reg(14);
  Complex_to_Real_Imag_out1(15) <= RT11_reg(15);
  Complex_to_Real_Imag_out1(16) <= RT11_reg(16);
  Complex_to_Real_Imag_out1(17) <= RT11_reg(17);
  Complex_to_Real_Imag_out1(18) <= RT11_reg(18);
  Complex_to_Real_Imag_out1(19) <= RT11_reg(19);
  Complex_to_Real_Imag_out1(20) <= RT11_reg(20);
  Complex_to_Real_Imag_out1(21) <= RT11_reg(21);
  Complex_to_Real_Imag_out1(22) <= RT11_reg(22);
  Complex_to_Real_Imag_out1(23) <= RT11_reg(23);
  Complex_to_Real_Imag_out1(24) <= RT11_reg(24);
  Complex_to_Real_Imag_out1(25) <= RT11_reg(25);
  Complex_to_Real_Imag_out1(26) <= RT11_reg(26);
  Complex_to_Real_Imag_out1(27) <= RT11_reg(27);
  Complex_to_Real_Imag_out1(28) <= RT11_reg(28);
  Complex_to_Real_Imag_out1(29) <= RT11_reg(29);
  Complex_to_Real_Imag_out1(30) <= RT11_reg(30);
  Complex_to_Real_Imag_out1(31) <= RT11_reg(31);
  Complex_to_Real_Imag_out1(32) <= RT11_reg(32);
  Complex_to_Real_Imag_out1(33) <= RT11_reg(33);
  Complex_to_Real_Imag_out1(34) <= RT11_reg(34);
  Complex_to_Real_Imag_out1(35) <= RT11_reg(35);
  Complex_to_Real_Imag_out1(36) <= RT11_reg(36);
  Complex_to_Real_Imag_out1(37) <= RT11_reg(37);
  Complex_to_Real_Imag_out1(38) <= RT11_reg(38);
  Complex_to_Real_Imag_out1(39) <= RT11_reg(39);
  Complex_to_Real_Imag_out1(40) <= RT11_reg(40);
  Complex_to_Real_Imag_out1(41) <= RT11_reg(41);
  Complex_to_Real_Imag_out1(42) <= RT11_reg(42);
  Complex_to_Real_Imag_out1(43) <= RT11_reg(43);
  Complex_to_Real_Imag_out1(44) <= RT11_reg(44);
  Complex_to_Real_Imag_out1(45) <= RT11_reg(45);
  Complex_to_Real_Imag_out1(46) <= RT11_reg(46);
  Complex_to_Real_Imag_out1(47) <= RT11_reg(47);
  Complex_to_Real_Imag_out1(48) <= RT11_reg(48);
  Complex_to_Real_Imag_out1(49) <= RT11_reg(49);
  Complex_to_Real_Imag_out1(50) <= RT11_reg(50);
  Complex_to_Real_Imag_out1(51) <= RT11_reg(51);
  Complex_to_Real_Imag_out1(52) <= RT11_reg(52);
  Complex_to_Real_Imag_out1(53) <= RT11_reg(53);
  Complex_to_Real_Imag_out1(54) <= RT11_reg(54);
  Complex_to_Real_Imag_out1(55) <= RT11_reg(55);
  Complex_to_Real_Imag_out1(56) <= RT11_reg(56);
  Complex_to_Real_Imag_out1(57) <= RT11_reg(57);
  Complex_to_Real_Imag_out1(58) <= RT11_reg(58);
  Complex_to_Real_Imag_out1(59) <= RT11_reg(59);
  Complex_to_Real_Imag_out1(60) <= RT11_reg(60);
  Complex_to_Real_Imag_out1(61) <= RT11_reg(61);
  Complex_to_Real_Imag_out1(62) <= RT11_reg(62);
  Complex_to_Real_Imag_out1(63) <= RT11_reg(63);
  RT11_reg_next(0) <= IFFT_out1_re_signed(0);
  RT11_reg_next(1) <= IFFT_out1_re_signed(1);
  RT11_reg_next(2) <= IFFT_out1_re_signed(2);
  RT11_reg_next(3) <= IFFT_out1_re_signed(3);
  RT11_reg_next(4) <= IFFT_out1_re_signed(4);
  RT11_reg_next(5) <= IFFT_out1_re_signed(5);
  RT11_reg_next(6) <= IFFT_out1_re_signed(6);
  RT11_reg_next(7) <= IFFT_out1_re_signed(7);
  RT11_reg_next(8) <= IFFT_out1_re_signed(8);
  RT11_reg_next(9) <= IFFT_out1_re_signed(9);
  RT11_reg_next(10) <= IFFT_out1_re_signed(10);
  RT11_reg_next(11) <= IFFT_out1_re_signed(11);
  RT11_reg_next(12) <= IFFT_out1_re_signed(12);
  RT11_reg_next(13) <= IFFT_out1_re_signed(13);
  RT11_reg_next(14) <= IFFT_out1_re_signed(14);
  RT11_reg_next(15) <= IFFT_out1_re_signed(15);
  RT11_reg_next(16) <= IFFT_out1_re_signed(16);
  RT11_reg_next(17) <= IFFT_out1_re_signed(17);
  RT11_reg_next(18) <= IFFT_out1_re_signed(18);
  RT11_reg_next(19) <= IFFT_out1_re_signed(19);
  RT11_reg_next(20) <= IFFT_out1_re_signed(20);
  RT11_reg_next(21) <= IFFT_out1_re_signed(21);
  RT11_reg_next(22) <= IFFT_out1_re_signed(22);
  RT11_reg_next(23) <= IFFT_out1_re_signed(23);
  RT11_reg_next(24) <= IFFT_out1_re_signed(24);
  RT11_reg_next(25) <= IFFT_out1_re_signed(25);
  RT11_reg_next(26) <= IFFT_out1_re_signed(26);
  RT11_reg_next(27) <= IFFT_out1_re_signed(27);
  RT11_reg_next(28) <= IFFT_out1_re_signed(28);
  RT11_reg_next(29) <= IFFT_out1_re_signed(29);
  RT11_reg_next(30) <= IFFT_out1_re_signed(30);
  RT11_reg_next(31) <= IFFT_out1_re_signed(31);
  RT11_reg_next(32) <= IFFT_out1_re_signed(32);
  RT11_reg_next(33) <= IFFT_out1_re_signed(33);
  RT11_reg_next(34) <= IFFT_out1_re_signed(34);
  RT11_reg_next(35) <= IFFT_out1_re_signed(35);
  RT11_reg_next(36) <= IFFT_out1_re_signed(36);
  RT11_reg_next(37) <= IFFT_out1_re_signed(37);
  RT11_reg_next(38) <= IFFT_out1_re_signed(38);
  RT11_reg_next(39) <= IFFT_out1_re_signed(39);
  RT11_reg_next(40) <= IFFT_out1_re_signed(40);
  RT11_reg_next(41) <= IFFT_out1_re_signed(41);
  RT11_reg_next(42) <= IFFT_out1_re_signed(42);
  RT11_reg_next(43) <= IFFT_out1_re_signed(43);
  RT11_reg_next(44) <= IFFT_out1_re_signed(44);
  RT11_reg_next(45) <= IFFT_out1_re_signed(45);
  RT11_reg_next(46) <= IFFT_out1_re_signed(46);
  RT11_reg_next(47) <= IFFT_out1_re_signed(47);
  RT11_reg_next(48) <= IFFT_out1_re_signed(48);
  RT11_reg_next(49) <= IFFT_out1_re_signed(49);
  RT11_reg_next(50) <= IFFT_out1_re_signed(50);
  RT11_reg_next(51) <= IFFT_out1_re_signed(51);
  RT11_reg_next(52) <= IFFT_out1_re_signed(52);
  RT11_reg_next(53) <= IFFT_out1_re_signed(53);
  RT11_reg_next(54) <= IFFT_out1_re_signed(54);
  RT11_reg_next(55) <= IFFT_out1_re_signed(55);
  RT11_reg_next(56) <= IFFT_out1_re_signed(56);
  RT11_reg_next(57) <= IFFT_out1_re_signed(57);
  RT11_reg_next(58) <= IFFT_out1_re_signed(58);
  RT11_reg_next(59) <= IFFT_out1_re_signed(59);
  RT11_reg_next(60) <= IFFT_out1_re_signed(60);
  RT11_reg_next(61) <= IFFT_out1_re_signed(61);
  RT11_reg_next(62) <= IFFT_out1_re_signed(62);
  RT11_reg_next(63) <= IFFT_out1_re_signed(63);

  RT1_out1 <= Complex_to_Real_Imag_out1;

  Product_out1(0) <= Cosine_1 * RT1_out1(0);
  Product_out1(1) <= Cosine_1 * RT1_out1(1);
  Product_out1(2) <= Cosine_1 * RT1_out1(2);
  Product_out1(3) <= Cosine_1 * RT1_out1(3);
  Product_out1(4) <= Cosine_1 * RT1_out1(4);
  Product_out1(5) <= Cosine_1 * RT1_out1(5);
  Product_out1(6) <= Cosine_1 * RT1_out1(6);
  Product_out1(7) <= Cosine_1 * RT1_out1(7);
  Product_out1(8) <= Cosine_1 * RT1_out1(8);
  Product_out1(9) <= Cosine_1 * RT1_out1(9);
  Product_out1(10) <= Cosine_1 * RT1_out1(10);
  Product_out1(11) <= Cosine_1 * RT1_out1(11);
  Product_out1(12) <= Cosine_1 * RT1_out1(12);
  Product_out1(13) <= Cosine_1 * RT1_out1(13);
  Product_out1(14) <= Cosine_1 * RT1_out1(14);
  Product_out1(15) <= Cosine_1 * RT1_out1(15);
  Product_out1(16) <= Cosine_1 * RT1_out1(16);
  Product_out1(17) <= Cosine_1 * RT1_out1(17);
  Product_out1(18) <= Cosine_1 * RT1_out1(18);
  Product_out1(19) <= Cosine_1 * RT1_out1(19);
  Product_out1(20) <= Cosine_1 * RT1_out1(20);
  Product_out1(21) <= Cosine_1 * RT1_out1(21);
  Product_out1(22) <= Cosine_1 * RT1_out1(22);
  Product_out1(23) <= Cosine_1 * RT1_out1(23);
  Product_out1(24) <= Cosine_1 * RT1_out1(24);
  Product_out1(25) <= Cosine_1 * RT1_out1(25);
  Product_out1(26) <= Cosine_1 * RT1_out1(26);
  Product_out1(27) <= Cosine_1 * RT1_out1(27);
  Product_out1(28) <= Cosine_1 * RT1_out1(28);
  Product_out1(29) <= Cosine_1 * RT1_out1(29);
  Product_out1(30) <= Cosine_1 * RT1_out1(30);
  Product_out1(31) <= Cosine_1 * RT1_out1(31);
  Product_out1(32) <= Cosine_1 * RT1_out1(32);
  Product_out1(33) <= Cosine_1 * RT1_out1(33);
  Product_out1(34) <= Cosine_1 * RT1_out1(34);
  Product_out1(35) <= Cosine_1 * RT1_out1(35);
  Product_out1(36) <= Cosine_1 * RT1_out1(36);
  Product_out1(37) <= Cosine_1 * RT1_out1(37);
  Product_out1(38) <= Cosine_1 * RT1_out1(38);
  Product_out1(39) <= Cosine_1 * RT1_out1(39);
  Product_out1(40) <= Cosine_1 * RT1_out1(40);
  Product_out1(41) <= Cosine_1 * RT1_out1(41);
  Product_out1(42) <= Cosine_1 * RT1_out1(42);
  Product_out1(43) <= Cosine_1 * RT1_out1(43);
  Product_out1(44) <= Cosine_1 * RT1_out1(44);
  Product_out1(45) <= Cosine_1 * RT1_out1(45);
  Product_out1(46) <= Cosine_1 * RT1_out1(46);
  Product_out1(47) <= Cosine_1 * RT1_out1(47);
  Product_out1(48) <= Cosine_1 * RT1_out1(48);
  Product_out1(49) <= Cosine_1 * RT1_out1(49);
  Product_out1(50) <= Cosine_1 * RT1_out1(50);
  Product_out1(51) <= Cosine_1 * RT1_out1(51);
  Product_out1(52) <= Cosine_1 * RT1_out1(52);
  Product_out1(53) <= Cosine_1 * RT1_out1(53);
  Product_out1(54) <= Cosine_1 * RT1_out1(54);
  Product_out1(55) <= Cosine_1 * RT1_out1(55);
  Product_out1(56) <= Cosine_1 * RT1_out1(56);
  Product_out1(57) <= Cosine_1 * RT1_out1(57);
  Product_out1(58) <= Cosine_1 * RT1_out1(58);
  Product_out1(59) <= Cosine_1 * RT1_out1(59);
  Product_out1(60) <= Cosine_1 * RT1_out1(60);
  Product_out1(61) <= Cosine_1 * RT1_out1(61);
  Product_out1(62) <= Cosine_1 * RT1_out1(62);
  Product_out1(63) <= Cosine_1 * RT1_out1(63);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg(0) <= to_signed(16#00000#, 17);
      delayMatch2_reg(1) <= to_signed(16#00000#, 17);
      delayMatch2_reg(2) <= to_signed(16#00000#, 17);
      delayMatch2_reg(3) <= to_signed(16#00000#, 17);
      delayMatch2_reg(4) <= to_signed(16#00000#, 17);
      delayMatch2_reg(5) <= to_signed(16#00000#, 17);
      delayMatch2_reg(6) <= to_signed(16#00000#, 17);
      delayMatch2_reg(7) <= to_signed(16#00000#, 17);
      delayMatch2_reg(8) <= to_signed(16#00000#, 17);
      delayMatch2_reg(9) <= to_signed(16#00000#, 17);
      delayMatch2_reg(10) <= to_signed(16#00000#, 17);
      delayMatch2_reg(11) <= to_signed(16#00000#, 17);
      delayMatch2_reg(12) <= to_signed(16#00000#, 17);
      delayMatch2_reg(13) <= to_signed(16#00000#, 17);
      delayMatch2_reg(14) <= to_signed(16#00000#, 17);
      delayMatch2_reg(15) <= to_signed(16#00000#, 17);
      delayMatch2_reg(16) <= to_signed(16#00000#, 17);
      delayMatch2_reg(17) <= to_signed(16#00000#, 17);
      delayMatch2_reg(18) <= to_signed(16#00000#, 17);
      delayMatch2_reg(19) <= to_signed(16#00000#, 17);
      delayMatch2_reg(20) <= to_signed(16#00000#, 17);
      delayMatch2_reg(21) <= to_signed(16#00000#, 17);
      delayMatch2_reg(22) <= to_signed(16#00000#, 17);
      delayMatch2_reg(23) <= to_signed(16#00000#, 17);
      delayMatch2_reg(24) <= to_signed(16#00000#, 17);
      delayMatch2_reg(25) <= to_signed(16#00000#, 17);
      delayMatch2_reg(26) <= to_signed(16#00000#, 17);
      delayMatch2_reg(27) <= to_signed(16#00000#, 17);
      delayMatch2_reg(28) <= to_signed(16#00000#, 17);
      delayMatch2_reg(29) <= to_signed(16#00000#, 17);
      delayMatch2_reg(30) <= to_signed(16#00000#, 17);
      delayMatch2_reg(31) <= to_signed(16#00000#, 17);
      delayMatch2_reg(32) <= to_signed(16#00000#, 17);
      delayMatch2_reg(33) <= to_signed(16#00000#, 17);
      delayMatch2_reg(34) <= to_signed(16#00000#, 17);
      delayMatch2_reg(35) <= to_signed(16#00000#, 17);
      delayMatch2_reg(36) <= to_signed(16#00000#, 17);
      delayMatch2_reg(37) <= to_signed(16#00000#, 17);
      delayMatch2_reg(38) <= to_signed(16#00000#, 17);
      delayMatch2_reg(39) <= to_signed(16#00000#, 17);
      delayMatch2_reg(40) <= to_signed(16#00000#, 17);
      delayMatch2_reg(41) <= to_signed(16#00000#, 17);
      delayMatch2_reg(42) <= to_signed(16#00000#, 17);
      delayMatch2_reg(43) <= to_signed(16#00000#, 17);
      delayMatch2_reg(44) <= to_signed(16#00000#, 17);
      delayMatch2_reg(45) <= to_signed(16#00000#, 17);
      delayMatch2_reg(46) <= to_signed(16#00000#, 17);
      delayMatch2_reg(47) <= to_signed(16#00000#, 17);
      delayMatch2_reg(48) <= to_signed(16#00000#, 17);
      delayMatch2_reg(49) <= to_signed(16#00000#, 17);
      delayMatch2_reg(50) <= to_signed(16#00000#, 17);
      delayMatch2_reg(51) <= to_signed(16#00000#, 17);
      delayMatch2_reg(52) <= to_signed(16#00000#, 17);
      delayMatch2_reg(53) <= to_signed(16#00000#, 17);
      delayMatch2_reg(54) <= to_signed(16#00000#, 17);
      delayMatch2_reg(55) <= to_signed(16#00000#, 17);
      delayMatch2_reg(56) <= to_signed(16#00000#, 17);
      delayMatch2_reg(57) <= to_signed(16#00000#, 17);
      delayMatch2_reg(58) <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
        delayMatch2_reg(6) <= delayMatch2_reg_next(6);
        delayMatch2_reg(7) <= delayMatch2_reg_next(7);
        delayMatch2_reg(8) <= delayMatch2_reg_next(8);
        delayMatch2_reg(9) <= delayMatch2_reg_next(9);
        delayMatch2_reg(10) <= delayMatch2_reg_next(10);
        delayMatch2_reg(11) <= delayMatch2_reg_next(11);
        delayMatch2_reg(12) <= delayMatch2_reg_next(12);
        delayMatch2_reg(13) <= delayMatch2_reg_next(13);
        delayMatch2_reg(14) <= delayMatch2_reg_next(14);
        delayMatch2_reg(15) <= delayMatch2_reg_next(15);
        delayMatch2_reg(16) <= delayMatch2_reg_next(16);
        delayMatch2_reg(17) <= delayMatch2_reg_next(17);
        delayMatch2_reg(18) <= delayMatch2_reg_next(18);
        delayMatch2_reg(19) <= delayMatch2_reg_next(19);
        delayMatch2_reg(20) <= delayMatch2_reg_next(20);
        delayMatch2_reg(21) <= delayMatch2_reg_next(21);
        delayMatch2_reg(22) <= delayMatch2_reg_next(22);
        delayMatch2_reg(23) <= delayMatch2_reg_next(23);
        delayMatch2_reg(24) <= delayMatch2_reg_next(24);
        delayMatch2_reg(25) <= delayMatch2_reg_next(25);
        delayMatch2_reg(26) <= delayMatch2_reg_next(26);
        delayMatch2_reg(27) <= delayMatch2_reg_next(27);
        delayMatch2_reg(28) <= delayMatch2_reg_next(28);
        delayMatch2_reg(29) <= delayMatch2_reg_next(29);
        delayMatch2_reg(30) <= delayMatch2_reg_next(30);
        delayMatch2_reg(31) <= delayMatch2_reg_next(31);
        delayMatch2_reg(32) <= delayMatch2_reg_next(32);
        delayMatch2_reg(33) <= delayMatch2_reg_next(33);
        delayMatch2_reg(34) <= delayMatch2_reg_next(34);
        delayMatch2_reg(35) <= delayMatch2_reg_next(35);
        delayMatch2_reg(36) <= delayMatch2_reg_next(36);
        delayMatch2_reg(37) <= delayMatch2_reg_next(37);
        delayMatch2_reg(38) <= delayMatch2_reg_next(38);
        delayMatch2_reg(39) <= delayMatch2_reg_next(39);
        delayMatch2_reg(40) <= delayMatch2_reg_next(40);
        delayMatch2_reg(41) <= delayMatch2_reg_next(41);
        delayMatch2_reg(42) <= delayMatch2_reg_next(42);
        delayMatch2_reg(43) <= delayMatch2_reg_next(43);
        delayMatch2_reg(44) <= delayMatch2_reg_next(44);
        delayMatch2_reg(45) <= delayMatch2_reg_next(45);
        delayMatch2_reg(46) <= delayMatch2_reg_next(46);
        delayMatch2_reg(47) <= delayMatch2_reg_next(47);
        delayMatch2_reg(48) <= delayMatch2_reg_next(48);
        delayMatch2_reg(49) <= delayMatch2_reg_next(49);
        delayMatch2_reg(50) <= delayMatch2_reg_next(50);
        delayMatch2_reg(51) <= delayMatch2_reg_next(51);
        delayMatch2_reg(52) <= delayMatch2_reg_next(52);
        delayMatch2_reg(53) <= delayMatch2_reg_next(53);
        delayMatch2_reg(54) <= delayMatch2_reg_next(54);
        delayMatch2_reg(55) <= delayMatch2_reg_next(55);
        delayMatch2_reg(56) <= delayMatch2_reg_next(56);
        delayMatch2_reg(57) <= delayMatch2_reg_next(57);
        delayMatch2_reg(58) <= delayMatch2_reg_next(58);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Sine_1 <= delayMatch2_reg(58);
  delayMatch2_reg_next(0) <= Sine_signed;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);
  delayMatch2_reg_next(6) <= delayMatch2_reg(5);
  delayMatch2_reg_next(7) <= delayMatch2_reg(6);
  delayMatch2_reg_next(8) <= delayMatch2_reg(7);
  delayMatch2_reg_next(9) <= delayMatch2_reg(8);
  delayMatch2_reg_next(10) <= delayMatch2_reg(9);
  delayMatch2_reg_next(11) <= delayMatch2_reg(10);
  delayMatch2_reg_next(12) <= delayMatch2_reg(11);
  delayMatch2_reg_next(13) <= delayMatch2_reg(12);
  delayMatch2_reg_next(14) <= delayMatch2_reg(13);
  delayMatch2_reg_next(15) <= delayMatch2_reg(14);
  delayMatch2_reg_next(16) <= delayMatch2_reg(15);
  delayMatch2_reg_next(17) <= delayMatch2_reg(16);
  delayMatch2_reg_next(18) <= delayMatch2_reg(17);
  delayMatch2_reg_next(19) <= delayMatch2_reg(18);
  delayMatch2_reg_next(20) <= delayMatch2_reg(19);
  delayMatch2_reg_next(21) <= delayMatch2_reg(20);
  delayMatch2_reg_next(22) <= delayMatch2_reg(21);
  delayMatch2_reg_next(23) <= delayMatch2_reg(22);
  delayMatch2_reg_next(24) <= delayMatch2_reg(23);
  delayMatch2_reg_next(25) <= delayMatch2_reg(24);
  delayMatch2_reg_next(26) <= delayMatch2_reg(25);
  delayMatch2_reg_next(27) <= delayMatch2_reg(26);
  delayMatch2_reg_next(28) <= delayMatch2_reg(27);
  delayMatch2_reg_next(29) <= delayMatch2_reg(28);
  delayMatch2_reg_next(30) <= delayMatch2_reg(29);
  delayMatch2_reg_next(31) <= delayMatch2_reg(30);
  delayMatch2_reg_next(32) <= delayMatch2_reg(31);
  delayMatch2_reg_next(33) <= delayMatch2_reg(32);
  delayMatch2_reg_next(34) <= delayMatch2_reg(33);
  delayMatch2_reg_next(35) <= delayMatch2_reg(34);
  delayMatch2_reg_next(36) <= delayMatch2_reg(35);
  delayMatch2_reg_next(37) <= delayMatch2_reg(36);
  delayMatch2_reg_next(38) <= delayMatch2_reg(37);
  delayMatch2_reg_next(39) <= delayMatch2_reg(38);
  delayMatch2_reg_next(40) <= delayMatch2_reg(39);
  delayMatch2_reg_next(41) <= delayMatch2_reg(40);
  delayMatch2_reg_next(42) <= delayMatch2_reg(41);
  delayMatch2_reg_next(43) <= delayMatch2_reg(42);
  delayMatch2_reg_next(44) <= delayMatch2_reg(43);
  delayMatch2_reg_next(45) <= delayMatch2_reg(44);
  delayMatch2_reg_next(46) <= delayMatch2_reg(45);
  delayMatch2_reg_next(47) <= delayMatch2_reg(46);
  delayMatch2_reg_next(48) <= delayMatch2_reg(47);
  delayMatch2_reg_next(49) <= delayMatch2_reg(48);
  delayMatch2_reg_next(50) <= delayMatch2_reg(49);
  delayMatch2_reg_next(51) <= delayMatch2_reg(50);
  delayMatch2_reg_next(52) <= delayMatch2_reg(51);
  delayMatch2_reg_next(53) <= delayMatch2_reg(52);
  delayMatch2_reg_next(54) <= delayMatch2_reg(53);
  delayMatch2_reg_next(55) <= delayMatch2_reg(54);
  delayMatch2_reg_next(56) <= delayMatch2_reg(55);
  delayMatch2_reg_next(57) <= delayMatch2_reg(56);
  delayMatch2_reg_next(58) <= delayMatch2_reg(57);

  Product1_mul_temp <= RT_out1(0) * Sine_1;
  Product1_out1(0) <= resize(Product1_mul_temp(32 DOWNTO 29), 16);
  Product1_mul_temp_1 <= RT_out1(1) * Sine_1;
  Product1_out1(1) <= resize(Product1_mul_temp_1(32 DOWNTO 29), 16);
  Product1_mul_temp_2 <= RT_out1(2) * Sine_1;
  Product1_out1(2) <= resize(Product1_mul_temp_2(32 DOWNTO 29), 16);
  Product1_mul_temp_3 <= RT_out1(3) * Sine_1;
  Product1_out1(3) <= resize(Product1_mul_temp_3(32 DOWNTO 29), 16);
  Product1_mul_temp_4 <= RT_out1(4) * Sine_1;
  Product1_out1(4) <= resize(Product1_mul_temp_4(32 DOWNTO 29), 16);
  Product1_mul_temp_5 <= RT_out1(5) * Sine_1;
  Product1_out1(5) <= resize(Product1_mul_temp_5(32 DOWNTO 29), 16);
  Product1_mul_temp_6 <= RT_out1(6) * Sine_1;
  Product1_out1(6) <= resize(Product1_mul_temp_6(32 DOWNTO 29), 16);
  Product1_mul_temp_7 <= RT_out1(7) * Sine_1;
  Product1_out1(7) <= resize(Product1_mul_temp_7(32 DOWNTO 29), 16);
  Product1_mul_temp_8 <= RT_out1(8) * Sine_1;
  Product1_out1(8) <= resize(Product1_mul_temp_8(32 DOWNTO 29), 16);
  Product1_mul_temp_9 <= RT_out1(9) * Sine_1;
  Product1_out1(9) <= resize(Product1_mul_temp_9(32 DOWNTO 29), 16);
  Product1_mul_temp_10 <= RT_out1(10) * Sine_1;
  Product1_out1(10) <= resize(Product1_mul_temp_10(32 DOWNTO 29), 16);
  Product1_mul_temp_11 <= RT_out1(11) * Sine_1;
  Product1_out1(11) <= resize(Product1_mul_temp_11(32 DOWNTO 29), 16);
  Product1_mul_temp_12 <= RT_out1(12) * Sine_1;
  Product1_out1(12) <= resize(Product1_mul_temp_12(32 DOWNTO 29), 16);
  Product1_mul_temp_13 <= RT_out1(13) * Sine_1;
  Product1_out1(13) <= resize(Product1_mul_temp_13(32 DOWNTO 29), 16);
  Product1_mul_temp_14 <= RT_out1(14) * Sine_1;
  Product1_out1(14) <= resize(Product1_mul_temp_14(32 DOWNTO 29), 16);
  Product1_mul_temp_15 <= RT_out1(15) * Sine_1;
  Product1_out1(15) <= resize(Product1_mul_temp_15(32 DOWNTO 29), 16);
  Product1_mul_temp_16 <= RT_out1(16) * Sine_1;
  Product1_out1(16) <= resize(Product1_mul_temp_16(32 DOWNTO 29), 16);
  Product1_mul_temp_17 <= RT_out1(17) * Sine_1;
  Product1_out1(17) <= resize(Product1_mul_temp_17(32 DOWNTO 29), 16);
  Product1_mul_temp_18 <= RT_out1(18) * Sine_1;
  Product1_out1(18) <= resize(Product1_mul_temp_18(32 DOWNTO 29), 16);
  Product1_mul_temp_19 <= RT_out1(19) * Sine_1;
  Product1_out1(19) <= resize(Product1_mul_temp_19(32 DOWNTO 29), 16);
  Product1_mul_temp_20 <= RT_out1(20) * Sine_1;
  Product1_out1(20) <= resize(Product1_mul_temp_20(32 DOWNTO 29), 16);
  Product1_mul_temp_21 <= RT_out1(21) * Sine_1;
  Product1_out1(21) <= resize(Product1_mul_temp_21(32 DOWNTO 29), 16);
  Product1_mul_temp_22 <= RT_out1(22) * Sine_1;
  Product1_out1(22) <= resize(Product1_mul_temp_22(32 DOWNTO 29), 16);
  Product1_mul_temp_23 <= RT_out1(23) * Sine_1;
  Product1_out1(23) <= resize(Product1_mul_temp_23(32 DOWNTO 29), 16);
  Product1_mul_temp_24 <= RT_out1(24) * Sine_1;
  Product1_out1(24) <= resize(Product1_mul_temp_24(32 DOWNTO 29), 16);
  Product1_mul_temp_25 <= RT_out1(25) * Sine_1;
  Product1_out1(25) <= resize(Product1_mul_temp_25(32 DOWNTO 29), 16);
  Product1_mul_temp_26 <= RT_out1(26) * Sine_1;
  Product1_out1(26) <= resize(Product1_mul_temp_26(32 DOWNTO 29), 16);
  Product1_mul_temp_27 <= RT_out1(27) * Sine_1;
  Product1_out1(27) <= resize(Product1_mul_temp_27(32 DOWNTO 29), 16);
  Product1_mul_temp_28 <= RT_out1(28) * Sine_1;
  Product1_out1(28) <= resize(Product1_mul_temp_28(32 DOWNTO 29), 16);
  Product1_mul_temp_29 <= RT_out1(29) * Sine_1;
  Product1_out1(29) <= resize(Product1_mul_temp_29(32 DOWNTO 29), 16);
  Product1_mul_temp_30 <= RT_out1(30) * Sine_1;
  Product1_out1(30) <= resize(Product1_mul_temp_30(32 DOWNTO 29), 16);
  Product1_mul_temp_31 <= RT_out1(31) * Sine_1;
  Product1_out1(31) <= resize(Product1_mul_temp_31(32 DOWNTO 29), 16);
  Product1_mul_temp_32 <= RT_out1(32) * Sine_1;
  Product1_out1(32) <= resize(Product1_mul_temp_32(32 DOWNTO 29), 16);
  Product1_mul_temp_33 <= RT_out1(33) * Sine_1;
  Product1_out1(33) <= resize(Product1_mul_temp_33(32 DOWNTO 29), 16);
  Product1_mul_temp_34 <= RT_out1(34) * Sine_1;
  Product1_out1(34) <= resize(Product1_mul_temp_34(32 DOWNTO 29), 16);
  Product1_mul_temp_35 <= RT_out1(35) * Sine_1;
  Product1_out1(35) <= resize(Product1_mul_temp_35(32 DOWNTO 29), 16);
  Product1_mul_temp_36 <= RT_out1(36) * Sine_1;
  Product1_out1(36) <= resize(Product1_mul_temp_36(32 DOWNTO 29), 16);
  Product1_mul_temp_37 <= RT_out1(37) * Sine_1;
  Product1_out1(37) <= resize(Product1_mul_temp_37(32 DOWNTO 29), 16);
  Product1_mul_temp_38 <= RT_out1(38) * Sine_1;
  Product1_out1(38) <= resize(Product1_mul_temp_38(32 DOWNTO 29), 16);
  Product1_mul_temp_39 <= RT_out1(39) * Sine_1;
  Product1_out1(39) <= resize(Product1_mul_temp_39(32 DOWNTO 29), 16);
  Product1_mul_temp_40 <= RT_out1(40) * Sine_1;
  Product1_out1(40) <= resize(Product1_mul_temp_40(32 DOWNTO 29), 16);
  Product1_mul_temp_41 <= RT_out1(41) * Sine_1;
  Product1_out1(41) <= resize(Product1_mul_temp_41(32 DOWNTO 29), 16);
  Product1_mul_temp_42 <= RT_out1(42) * Sine_1;
  Product1_out1(42) <= resize(Product1_mul_temp_42(32 DOWNTO 29), 16);
  Product1_mul_temp_43 <= RT_out1(43) * Sine_1;
  Product1_out1(43) <= resize(Product1_mul_temp_43(32 DOWNTO 29), 16);
  Product1_mul_temp_44 <= RT_out1(44) * Sine_1;
  Product1_out1(44) <= resize(Product1_mul_temp_44(32 DOWNTO 29), 16);
  Product1_mul_temp_45 <= RT_out1(45) * Sine_1;
  Product1_out1(45) <= resize(Product1_mul_temp_45(32 DOWNTO 29), 16);
  Product1_mul_temp_46 <= RT_out1(46) * Sine_1;
  Product1_out1(46) <= resize(Product1_mul_temp_46(32 DOWNTO 29), 16);
  Product1_mul_temp_47 <= RT_out1(47) * Sine_1;
  Product1_out1(47) <= resize(Product1_mul_temp_47(32 DOWNTO 29), 16);
  Product1_mul_temp_48 <= RT_out1(48) * Sine_1;
  Product1_out1(48) <= resize(Product1_mul_temp_48(32 DOWNTO 29), 16);
  Product1_mul_temp_49 <= RT_out1(49) * Sine_1;
  Product1_out1(49) <= resize(Product1_mul_temp_49(32 DOWNTO 29), 16);
  Product1_mul_temp_50 <= RT_out1(50) * Sine_1;
  Product1_out1(50) <= resize(Product1_mul_temp_50(32 DOWNTO 29), 16);
  Product1_mul_temp_51 <= RT_out1(51) * Sine_1;
  Product1_out1(51) <= resize(Product1_mul_temp_51(32 DOWNTO 29), 16);
  Product1_mul_temp_52 <= RT_out1(52) * Sine_1;
  Product1_out1(52) <= resize(Product1_mul_temp_52(32 DOWNTO 29), 16);
  Product1_mul_temp_53 <= RT_out1(53) * Sine_1;
  Product1_out1(53) <= resize(Product1_mul_temp_53(32 DOWNTO 29), 16);
  Product1_mul_temp_54 <= RT_out1(54) * Sine_1;
  Product1_out1(54) <= resize(Product1_mul_temp_54(32 DOWNTO 29), 16);
  Product1_mul_temp_55 <= RT_out1(55) * Sine_1;
  Product1_out1(55) <= resize(Product1_mul_temp_55(32 DOWNTO 29), 16);
  Product1_mul_temp_56 <= RT_out1(56) * Sine_1;
  Product1_out1(56) <= resize(Product1_mul_temp_56(32 DOWNTO 29), 16);
  Product1_mul_temp_57 <= RT_out1(57) * Sine_1;
  Product1_out1(57) <= resize(Product1_mul_temp_57(32 DOWNTO 29), 16);
  Product1_mul_temp_58 <= RT_out1(58) * Sine_1;
  Product1_out1(58) <= resize(Product1_mul_temp_58(32 DOWNTO 29), 16);
  Product1_mul_temp_59 <= RT_out1(59) * Sine_1;
  Product1_out1(59) <= resize(Product1_mul_temp_59(32 DOWNTO 29), 16);
  Product1_mul_temp_60 <= RT_out1(60) * Sine_1;
  Product1_out1(60) <= resize(Product1_mul_temp_60(32 DOWNTO 29), 16);
  Product1_mul_temp_61 <= RT_out1(61) * Sine_1;
  Product1_out1(61) <= resize(Product1_mul_temp_61(32 DOWNTO 29), 16);
  Product1_mul_temp_62 <= RT_out1(62) * Sine_1;
  Product1_out1(62) <= resize(Product1_mul_temp_62(32 DOWNTO 29), 16);
  Product1_mul_temp_63 <= RT_out1(63) * Sine_1;
  Product1_out1(63) <= resize(Product1_mul_temp_63(32 DOWNTO 29), 16);

  Sum_add_cast <= resize(Product_out1(0), 64);
  Sum_add_cast_1 <= resize(Product1_out1(0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(0) <= Sum_add_cast + Sum_add_cast_1;
  Sum_add_cast_2 <= resize(Product_out1(1), 64);
  Sum_add_cast_3 <= resize(Product1_out1(1) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(1) <= Sum_add_cast_2 + Sum_add_cast_3;
  Sum_add_cast_4 <= resize(Product_out1(2), 64);
  Sum_add_cast_5 <= resize(Product1_out1(2) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(2) <= Sum_add_cast_4 + Sum_add_cast_5;
  Sum_add_cast_6 <= resize(Product_out1(3), 64);
  Sum_add_cast_7 <= resize(Product1_out1(3) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(3) <= Sum_add_cast_6 + Sum_add_cast_7;
  Sum_add_cast_8 <= resize(Product_out1(4), 64);
  Sum_add_cast_9 <= resize(Product1_out1(4) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(4) <= Sum_add_cast_8 + Sum_add_cast_9;
  Sum_add_cast_10 <= resize(Product_out1(5), 64);
  Sum_add_cast_11 <= resize(Product1_out1(5) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(5) <= Sum_add_cast_10 + Sum_add_cast_11;
  Sum_add_cast_12 <= resize(Product_out1(6), 64);
  Sum_add_cast_13 <= resize(Product1_out1(6) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(6) <= Sum_add_cast_12 + Sum_add_cast_13;
  Sum_add_cast_14 <= resize(Product_out1(7), 64);
  Sum_add_cast_15 <= resize(Product1_out1(7) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(7) <= Sum_add_cast_14 + Sum_add_cast_15;
  Sum_add_cast_16 <= resize(Product_out1(8), 64);
  Sum_add_cast_17 <= resize(Product1_out1(8) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(8) <= Sum_add_cast_16 + Sum_add_cast_17;
  Sum_add_cast_18 <= resize(Product_out1(9), 64);
  Sum_add_cast_19 <= resize(Product1_out1(9) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(9) <= Sum_add_cast_18 + Sum_add_cast_19;
  Sum_add_cast_20 <= resize(Product_out1(10), 64);
  Sum_add_cast_21 <= resize(Product1_out1(10) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(10) <= Sum_add_cast_20 + Sum_add_cast_21;
  Sum_add_cast_22 <= resize(Product_out1(11), 64);
  Sum_add_cast_23 <= resize(Product1_out1(11) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(11) <= Sum_add_cast_22 + Sum_add_cast_23;
  Sum_add_cast_24 <= resize(Product_out1(12), 64);
  Sum_add_cast_25 <= resize(Product1_out1(12) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(12) <= Sum_add_cast_24 + Sum_add_cast_25;
  Sum_add_cast_26 <= resize(Product_out1(13), 64);
  Sum_add_cast_27 <= resize(Product1_out1(13) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(13) <= Sum_add_cast_26 + Sum_add_cast_27;
  Sum_add_cast_28 <= resize(Product_out1(14), 64);
  Sum_add_cast_29 <= resize(Product1_out1(14) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(14) <= Sum_add_cast_28 + Sum_add_cast_29;
  Sum_add_cast_30 <= resize(Product_out1(15), 64);
  Sum_add_cast_31 <= resize(Product1_out1(15) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(15) <= Sum_add_cast_30 + Sum_add_cast_31;
  Sum_add_cast_32 <= resize(Product_out1(16), 64);
  Sum_add_cast_33 <= resize(Product1_out1(16) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(16) <= Sum_add_cast_32 + Sum_add_cast_33;
  Sum_add_cast_34 <= resize(Product_out1(17), 64);
  Sum_add_cast_35 <= resize(Product1_out1(17) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(17) <= Sum_add_cast_34 + Sum_add_cast_35;
  Sum_add_cast_36 <= resize(Product_out1(18), 64);
  Sum_add_cast_37 <= resize(Product1_out1(18) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(18) <= Sum_add_cast_36 + Sum_add_cast_37;
  Sum_add_cast_38 <= resize(Product_out1(19), 64);
  Sum_add_cast_39 <= resize(Product1_out1(19) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(19) <= Sum_add_cast_38 + Sum_add_cast_39;
  Sum_add_cast_40 <= resize(Product_out1(20), 64);
  Sum_add_cast_41 <= resize(Product1_out1(20) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(20) <= Sum_add_cast_40 + Sum_add_cast_41;
  Sum_add_cast_42 <= resize(Product_out1(21), 64);
  Sum_add_cast_43 <= resize(Product1_out1(21) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(21) <= Sum_add_cast_42 + Sum_add_cast_43;
  Sum_add_cast_44 <= resize(Product_out1(22), 64);
  Sum_add_cast_45 <= resize(Product1_out1(22) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(22) <= Sum_add_cast_44 + Sum_add_cast_45;
  Sum_add_cast_46 <= resize(Product_out1(23), 64);
  Sum_add_cast_47 <= resize(Product1_out1(23) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(23) <= Sum_add_cast_46 + Sum_add_cast_47;
  Sum_add_cast_48 <= resize(Product_out1(24), 64);
  Sum_add_cast_49 <= resize(Product1_out1(24) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(24) <= Sum_add_cast_48 + Sum_add_cast_49;
  Sum_add_cast_50 <= resize(Product_out1(25), 64);
  Sum_add_cast_51 <= resize(Product1_out1(25) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(25) <= Sum_add_cast_50 + Sum_add_cast_51;
  Sum_add_cast_52 <= resize(Product_out1(26), 64);
  Sum_add_cast_53 <= resize(Product1_out1(26) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(26) <= Sum_add_cast_52 + Sum_add_cast_53;
  Sum_add_cast_54 <= resize(Product_out1(27), 64);
  Sum_add_cast_55 <= resize(Product1_out1(27) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(27) <= Sum_add_cast_54 + Sum_add_cast_55;
  Sum_add_cast_56 <= resize(Product_out1(28), 64);
  Sum_add_cast_57 <= resize(Product1_out1(28) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(28) <= Sum_add_cast_56 + Sum_add_cast_57;
  Sum_add_cast_58 <= resize(Product_out1(29), 64);
  Sum_add_cast_59 <= resize(Product1_out1(29) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(29) <= Sum_add_cast_58 + Sum_add_cast_59;
  Sum_add_cast_60 <= resize(Product_out1(30), 64);
  Sum_add_cast_61 <= resize(Product1_out1(30) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(30) <= Sum_add_cast_60 + Sum_add_cast_61;
  Sum_add_cast_62 <= resize(Product_out1(31), 64);
  Sum_add_cast_63 <= resize(Product1_out1(31) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(31) <= Sum_add_cast_62 + Sum_add_cast_63;
  Sum_add_cast_64 <= resize(Product_out1(32), 64);
  Sum_add_cast_65 <= resize(Product1_out1(32) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(32) <= Sum_add_cast_64 + Sum_add_cast_65;
  Sum_add_cast_66 <= resize(Product_out1(33), 64);
  Sum_add_cast_67 <= resize(Product1_out1(33) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(33) <= Sum_add_cast_66 + Sum_add_cast_67;
  Sum_add_cast_68 <= resize(Product_out1(34), 64);
  Sum_add_cast_69 <= resize(Product1_out1(34) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(34) <= Sum_add_cast_68 + Sum_add_cast_69;
  Sum_add_cast_70 <= resize(Product_out1(35), 64);
  Sum_add_cast_71 <= resize(Product1_out1(35) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(35) <= Sum_add_cast_70 + Sum_add_cast_71;
  Sum_add_cast_72 <= resize(Product_out1(36), 64);
  Sum_add_cast_73 <= resize(Product1_out1(36) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(36) <= Sum_add_cast_72 + Sum_add_cast_73;
  Sum_add_cast_74 <= resize(Product_out1(37), 64);
  Sum_add_cast_75 <= resize(Product1_out1(37) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(37) <= Sum_add_cast_74 + Sum_add_cast_75;
  Sum_add_cast_76 <= resize(Product_out1(38), 64);
  Sum_add_cast_77 <= resize(Product1_out1(38) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(38) <= Sum_add_cast_76 + Sum_add_cast_77;
  Sum_add_cast_78 <= resize(Product_out1(39), 64);
  Sum_add_cast_79 <= resize(Product1_out1(39) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(39) <= Sum_add_cast_78 + Sum_add_cast_79;
  Sum_add_cast_80 <= resize(Product_out1(40), 64);
  Sum_add_cast_81 <= resize(Product1_out1(40) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(40) <= Sum_add_cast_80 + Sum_add_cast_81;
  Sum_add_cast_82 <= resize(Product_out1(41), 64);
  Sum_add_cast_83 <= resize(Product1_out1(41) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(41) <= Sum_add_cast_82 + Sum_add_cast_83;
  Sum_add_cast_84 <= resize(Product_out1(42), 64);
  Sum_add_cast_85 <= resize(Product1_out1(42) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(42) <= Sum_add_cast_84 + Sum_add_cast_85;
  Sum_add_cast_86 <= resize(Product_out1(43), 64);
  Sum_add_cast_87 <= resize(Product1_out1(43) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(43) <= Sum_add_cast_86 + Sum_add_cast_87;
  Sum_add_cast_88 <= resize(Product_out1(44), 64);
  Sum_add_cast_89 <= resize(Product1_out1(44) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(44) <= Sum_add_cast_88 + Sum_add_cast_89;
  Sum_add_cast_90 <= resize(Product_out1(45), 64);
  Sum_add_cast_91 <= resize(Product1_out1(45) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(45) <= Sum_add_cast_90 + Sum_add_cast_91;
  Sum_add_cast_92 <= resize(Product_out1(46), 64);
  Sum_add_cast_93 <= resize(Product1_out1(46) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(46) <= Sum_add_cast_92 + Sum_add_cast_93;
  Sum_add_cast_94 <= resize(Product_out1(47), 64);
  Sum_add_cast_95 <= resize(Product1_out1(47) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(47) <= Sum_add_cast_94 + Sum_add_cast_95;
  Sum_add_cast_96 <= resize(Product_out1(48), 64);
  Sum_add_cast_97 <= resize(Product1_out1(48) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(48) <= Sum_add_cast_96 + Sum_add_cast_97;
  Sum_add_cast_98 <= resize(Product_out1(49), 64);
  Sum_add_cast_99 <= resize(Product1_out1(49) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(49) <= Sum_add_cast_98 + Sum_add_cast_99;
  Sum_add_cast_100 <= resize(Product_out1(50), 64);
  Sum_add_cast_101 <= resize(Product1_out1(50) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(50) <= Sum_add_cast_100 + Sum_add_cast_101;
  Sum_add_cast_102 <= resize(Product_out1(51), 64);
  Sum_add_cast_103 <= resize(Product1_out1(51) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(51) <= Sum_add_cast_102 + Sum_add_cast_103;
  Sum_add_cast_104 <= resize(Product_out1(52), 64);
  Sum_add_cast_105 <= resize(Product1_out1(52) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(52) <= Sum_add_cast_104 + Sum_add_cast_105;
  Sum_add_cast_106 <= resize(Product_out1(53), 64);
  Sum_add_cast_107 <= resize(Product1_out1(53) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(53) <= Sum_add_cast_106 + Sum_add_cast_107;
  Sum_add_cast_108 <= resize(Product_out1(54), 64);
  Sum_add_cast_109 <= resize(Product1_out1(54) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(54) <= Sum_add_cast_108 + Sum_add_cast_109;
  Sum_add_cast_110 <= resize(Product_out1(55), 64);
  Sum_add_cast_111 <= resize(Product1_out1(55) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(55) <= Sum_add_cast_110 + Sum_add_cast_111;
  Sum_add_cast_112 <= resize(Product_out1(56), 64);
  Sum_add_cast_113 <= resize(Product1_out1(56) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(56) <= Sum_add_cast_112 + Sum_add_cast_113;
  Sum_add_cast_114 <= resize(Product_out1(57), 64);
  Sum_add_cast_115 <= resize(Product1_out1(57) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(57) <= Sum_add_cast_114 + Sum_add_cast_115;
  Sum_add_cast_116 <= resize(Product_out1(58), 64);
  Sum_add_cast_117 <= resize(Product1_out1(58) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(58) <= Sum_add_cast_116 + Sum_add_cast_117;
  Sum_add_cast_118 <= resize(Product_out1(59), 64);
  Sum_add_cast_119 <= resize(Product1_out1(59) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(59) <= Sum_add_cast_118 + Sum_add_cast_119;
  Sum_add_cast_120 <= resize(Product_out1(60), 64);
  Sum_add_cast_121 <= resize(Product1_out1(60) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(60) <= Sum_add_cast_120 + Sum_add_cast_121;
  Sum_add_cast_122 <= resize(Product_out1(61), 64);
  Sum_add_cast_123 <= resize(Product1_out1(61) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(61) <= Sum_add_cast_122 + Sum_add_cast_123;
  Sum_add_cast_124 <= resize(Product_out1(62), 64);
  Sum_add_cast_125 <= resize(Product1_out1(62) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(62) <= Sum_add_cast_124 + Sum_add_cast_125;
  Sum_add_cast_126 <= resize(Product_out1(63), 64);
  Sum_add_cast_127 <= resize(Product1_out1(63) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);
  Sum_out1(63) <= Sum_add_cast_126 + Sum_add_cast_127;

  outputgen: FOR k IN 0 TO 63 GENERATE
    OFDM_Signal(k) <= std_logic_vector(Sum_out1(k));
  END GENERATE;

  ce_out <= enb_1_1_1;

END rtl;

