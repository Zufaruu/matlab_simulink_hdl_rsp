-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\acer\OneDrive\Documents\ITS CAK V2\Magang\BRIN\Progress\Matlab Simulink\HDL Coder\proyek\OFDM\Tx_OFDM\custom_buffer.vhd
-- Created: 2023-04-09 12:21:03
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: custom_buffer
-- Source Path: Tx_OFDM/Transmitter/custom buffer
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Transmitter_pkg.ALL;

ENTITY custom_buffer IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_15_0                        :   IN    std_logic;
        enb_1_15_1                        :   IN    std_logic;
        scalar_re                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        scalar_im                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
        vector_re                         :   OUT   vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
        vector_im                         :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En14 [64]
        );
END custom_buffer;


ARCHITECTURE rtl OF custom_buffer IS

  -- Component Declarations
  COMPONENT vector_initialization
    PORT( y_re                            :   OUT   vector_of_std_logic_vector64(0 TO 63);  -- double [64]
          y_im                            :   OUT   vector_of_std_logic_vector64(0 TO 63)  -- double [64]
          );
  END COMPONENT;

  COMPONENT nfp_convert_double_to_fixed_16_En14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT vector_feedback
    PORT( vector_before_re                :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          vector_before_im                :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          y_re                            :   OUT   vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          y_im                            :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En14 [64]
          );
  END COMPONENT;

  COMPONENT buffer_rsvd
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          value_re                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          value_im                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En13
          vector_zero_re                  :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          vector_zero_im                  :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          vector_before_re                :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          vector_before_im                :   IN    vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          counter                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          buffer_re                       :   OUT   vector_of_std_logic_vector16(0 TO 63);  -- sfix16_En14 [64]
          buffer_im                       :   OUT   vector_of_std_logic_vector16(0 TO 63)  -- sfix16_En14 [64]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : vector_initialization
    USE ENTITY work.vector_initialization(rtl);

  FOR ALL : nfp_convert_double_to_fixed_16_En14
    USE ENTITY work.nfp_convert_double_to_fixed_16_En14(rtl);

  FOR ALL : vector_feedback
    USE ENTITY work.vector_feedback(rtl);

  FOR ALL : buffer_rsvd
    USE ENTITY work.buffer_rsvd(rtl);

  -- Signals
  SIGNAL y_re                             : vector_of_std_logic_vector64(0 TO 63);  -- ufix64 [64]
  SIGNAL y_im                             : vector_of_std_logic_vector64(0 TO 63);  -- ufix64 [64]
  SIGNAL scalar_re_1                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL scalar_im_1                      : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Data_Type_Conversion_out1_re     : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL Data_Type_Conversion_out1_im     : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL HDL_Counter_ctrl_const_out       : std_logic;
  SIGNAL HDL_Counter_ctrl_delay_out       : std_logic;
  SIGNAL HDL_Counter_ctrl_delay_out_1     : std_logic;
  SIGNAL HDL_Counter_Initial_Val_out      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_step                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_from                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HDL_Counter_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_value_1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HDL_Counter_bypass_reg           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL HDL_Counter_out                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HDL_Counter_out_1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out1_im                    : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_out1_im_1                  : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_out1_im_2                  : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL buffer_im                        : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL buffer_im_signed                 : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL buffer_re                        : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL buffer_re_signed                 : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL buffer_re_1                      : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL buffer_im_1                      : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_bypass_reg_re              : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_bypass_reg_im              : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_bypass_reg_next_re         : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_bypass_reg_next_im         : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_out1_re                    : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_out1_re_1                  : vector_of_signed16(0 TO 63);  -- sfix16_En14 [64]
  SIGNAL Delay_out1_re_2                  : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL y_re_1                           : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]
  SIGNAL y_im_1                           : vector_of_std_logic_vector16(0 TO 63);  -- ufix16 [64]

BEGIN
  -- When changing N, change the vector init size to N manually

  u_vector_initialization : vector_initialization
    PORT MAP( y_re => y_re,  -- double [64]
              y_im => y_im  -- double [64]
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(0),  -- double
              nfp_out => Data_Type_Conversion_out1_re(0)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_1 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(1),  -- double
              nfp_out => Data_Type_Conversion_out1_re(1)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_2 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(2),  -- double
              nfp_out => Data_Type_Conversion_out1_re(2)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_3 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(3),  -- double
              nfp_out => Data_Type_Conversion_out1_re(3)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_4 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(4),  -- double
              nfp_out => Data_Type_Conversion_out1_re(4)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_5 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(5),  -- double
              nfp_out => Data_Type_Conversion_out1_re(5)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_6 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(6),  -- double
              nfp_out => Data_Type_Conversion_out1_re(6)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_7 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(7),  -- double
              nfp_out => Data_Type_Conversion_out1_re(7)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_8 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(8),  -- double
              nfp_out => Data_Type_Conversion_out1_re(8)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_9 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(9),  -- double
              nfp_out => Data_Type_Conversion_out1_re(9)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_10 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(10),  -- double
              nfp_out => Data_Type_Conversion_out1_re(10)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_11 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(11),  -- double
              nfp_out => Data_Type_Conversion_out1_re(11)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_12 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(12),  -- double
              nfp_out => Data_Type_Conversion_out1_re(12)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_13 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(13),  -- double
              nfp_out => Data_Type_Conversion_out1_re(13)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_14 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(14),  -- double
              nfp_out => Data_Type_Conversion_out1_re(14)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_15 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(15),  -- double
              nfp_out => Data_Type_Conversion_out1_re(15)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_16 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(16),  -- double
              nfp_out => Data_Type_Conversion_out1_re(16)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_17 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(17),  -- double
              nfp_out => Data_Type_Conversion_out1_re(17)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_18 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(18),  -- double
              nfp_out => Data_Type_Conversion_out1_re(18)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_19 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(19),  -- double
              nfp_out => Data_Type_Conversion_out1_re(19)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_20 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(20),  -- double
              nfp_out => Data_Type_Conversion_out1_re(20)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_21 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(21),  -- double
              nfp_out => Data_Type_Conversion_out1_re(21)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_22 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(22),  -- double
              nfp_out => Data_Type_Conversion_out1_re(22)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_23 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(23),  -- double
              nfp_out => Data_Type_Conversion_out1_re(23)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_24 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(24),  -- double
              nfp_out => Data_Type_Conversion_out1_re(24)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_25 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(25),  -- double
              nfp_out => Data_Type_Conversion_out1_re(25)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_26 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(26),  -- double
              nfp_out => Data_Type_Conversion_out1_re(26)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_27 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(27),  -- double
              nfp_out => Data_Type_Conversion_out1_re(27)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_28 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(28),  -- double
              nfp_out => Data_Type_Conversion_out1_re(28)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_29 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(29),  -- double
              nfp_out => Data_Type_Conversion_out1_re(29)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_30 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(30),  -- double
              nfp_out => Data_Type_Conversion_out1_re(30)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_31 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(31),  -- double
              nfp_out => Data_Type_Conversion_out1_re(31)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_32 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(32),  -- double
              nfp_out => Data_Type_Conversion_out1_re(32)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_33 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(33),  -- double
              nfp_out => Data_Type_Conversion_out1_re(33)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_34 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(34),  -- double
              nfp_out => Data_Type_Conversion_out1_re(34)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_35 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(35),  -- double
              nfp_out => Data_Type_Conversion_out1_re(35)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_36 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(36),  -- double
              nfp_out => Data_Type_Conversion_out1_re(36)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_37 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(37),  -- double
              nfp_out => Data_Type_Conversion_out1_re(37)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_38 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(38),  -- double
              nfp_out => Data_Type_Conversion_out1_re(38)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_39 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(39),  -- double
              nfp_out => Data_Type_Conversion_out1_re(39)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_40 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(40),  -- double
              nfp_out => Data_Type_Conversion_out1_re(40)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_41 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(41),  -- double
              nfp_out => Data_Type_Conversion_out1_re(41)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_42 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(42),  -- double
              nfp_out => Data_Type_Conversion_out1_re(42)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_43 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(43),  -- double
              nfp_out => Data_Type_Conversion_out1_re(43)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_44 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(44),  -- double
              nfp_out => Data_Type_Conversion_out1_re(44)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_45 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(45),  -- double
              nfp_out => Data_Type_Conversion_out1_re(45)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_46 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(46),  -- double
              nfp_out => Data_Type_Conversion_out1_re(46)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_47 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(47),  -- double
              nfp_out => Data_Type_Conversion_out1_re(47)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_48 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(48),  -- double
              nfp_out => Data_Type_Conversion_out1_re(48)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_49 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(49),  -- double
              nfp_out => Data_Type_Conversion_out1_re(49)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_50 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(50),  -- double
              nfp_out => Data_Type_Conversion_out1_re(50)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_51 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(51),  -- double
              nfp_out => Data_Type_Conversion_out1_re(51)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_52 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(52),  -- double
              nfp_out => Data_Type_Conversion_out1_re(52)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_53 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(53),  -- double
              nfp_out => Data_Type_Conversion_out1_re(53)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_54 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(54),  -- double
              nfp_out => Data_Type_Conversion_out1_re(54)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_55 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(55),  -- double
              nfp_out => Data_Type_Conversion_out1_re(55)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_56 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(56),  -- double
              nfp_out => Data_Type_Conversion_out1_re(56)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_57 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(57),  -- double
              nfp_out => Data_Type_Conversion_out1_re(57)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_58 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(58),  -- double
              nfp_out => Data_Type_Conversion_out1_re(58)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_59 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(59),  -- double
              nfp_out => Data_Type_Conversion_out1_re(59)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_60 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(60),  -- double
              nfp_out => Data_Type_Conversion_out1_re(60)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_61 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(61),  -- double
              nfp_out => Data_Type_Conversion_out1_re(61)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_62 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(62),  -- double
              nfp_out => Data_Type_Conversion_out1_re(62)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_63 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(0),  -- double
              nfp_out => Data_Type_Conversion_out1_im(0)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_64 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(1),  -- double
              nfp_out => Data_Type_Conversion_out1_im(1)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_65 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(2),  -- double
              nfp_out => Data_Type_Conversion_out1_im(2)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_66 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(3),  -- double
              nfp_out => Data_Type_Conversion_out1_im(3)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_67 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(4),  -- double
              nfp_out => Data_Type_Conversion_out1_im(4)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_68 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(5),  -- double
              nfp_out => Data_Type_Conversion_out1_im(5)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_69 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(6),  -- double
              nfp_out => Data_Type_Conversion_out1_im(6)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_70 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(7),  -- double
              nfp_out => Data_Type_Conversion_out1_im(7)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_71 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(8),  -- double
              nfp_out => Data_Type_Conversion_out1_im(8)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_72 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(9),  -- double
              nfp_out => Data_Type_Conversion_out1_im(9)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_73 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(10),  -- double
              nfp_out => Data_Type_Conversion_out1_im(10)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_74 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(11),  -- double
              nfp_out => Data_Type_Conversion_out1_im(11)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_75 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(12),  -- double
              nfp_out => Data_Type_Conversion_out1_im(12)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_76 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(13),  -- double
              nfp_out => Data_Type_Conversion_out1_im(13)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_77 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(14),  -- double
              nfp_out => Data_Type_Conversion_out1_im(14)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_78 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(15),  -- double
              nfp_out => Data_Type_Conversion_out1_im(15)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_79 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(16),  -- double
              nfp_out => Data_Type_Conversion_out1_im(16)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_80 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(17),  -- double
              nfp_out => Data_Type_Conversion_out1_im(17)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_81 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(18),  -- double
              nfp_out => Data_Type_Conversion_out1_im(18)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_82 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(19),  -- double
              nfp_out => Data_Type_Conversion_out1_im(19)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_83 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(20),  -- double
              nfp_out => Data_Type_Conversion_out1_im(20)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_84 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(21),  -- double
              nfp_out => Data_Type_Conversion_out1_im(21)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_85 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(22),  -- double
              nfp_out => Data_Type_Conversion_out1_im(22)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_86 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(23),  -- double
              nfp_out => Data_Type_Conversion_out1_im(23)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_87 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(24),  -- double
              nfp_out => Data_Type_Conversion_out1_im(24)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_88 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(25),  -- double
              nfp_out => Data_Type_Conversion_out1_im(25)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_89 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(26),  -- double
              nfp_out => Data_Type_Conversion_out1_im(26)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_90 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(27),  -- double
              nfp_out => Data_Type_Conversion_out1_im(27)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_91 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(28),  -- double
              nfp_out => Data_Type_Conversion_out1_im(28)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_92 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(29),  -- double
              nfp_out => Data_Type_Conversion_out1_im(29)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_93 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(30),  -- double
              nfp_out => Data_Type_Conversion_out1_im(30)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_94 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(31),  -- double
              nfp_out => Data_Type_Conversion_out1_im(31)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_95 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(32),  -- double
              nfp_out => Data_Type_Conversion_out1_im(32)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_96 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(33),  -- double
              nfp_out => Data_Type_Conversion_out1_im(33)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_97 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(34),  -- double
              nfp_out => Data_Type_Conversion_out1_im(34)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_98 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(35),  -- double
              nfp_out => Data_Type_Conversion_out1_im(35)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_99 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(36),  -- double
              nfp_out => Data_Type_Conversion_out1_im(36)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_100 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(37),  -- double
              nfp_out => Data_Type_Conversion_out1_im(37)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_101 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(38),  -- double
              nfp_out => Data_Type_Conversion_out1_im(38)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_102 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(39),  -- double
              nfp_out => Data_Type_Conversion_out1_im(39)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_103 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(40),  -- double
              nfp_out => Data_Type_Conversion_out1_im(40)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_104 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(41),  -- double
              nfp_out => Data_Type_Conversion_out1_im(41)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_105 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(42),  -- double
              nfp_out => Data_Type_Conversion_out1_im(42)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_106 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(43),  -- double
              nfp_out => Data_Type_Conversion_out1_im(43)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_107 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(44),  -- double
              nfp_out => Data_Type_Conversion_out1_im(44)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_108 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(45),  -- double
              nfp_out => Data_Type_Conversion_out1_im(45)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_109 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(46),  -- double
              nfp_out => Data_Type_Conversion_out1_im(46)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_110 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(47),  -- double
              nfp_out => Data_Type_Conversion_out1_im(47)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_111 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(48),  -- double
              nfp_out => Data_Type_Conversion_out1_im(48)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_112 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(49),  -- double
              nfp_out => Data_Type_Conversion_out1_im(49)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_113 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(50),  -- double
              nfp_out => Data_Type_Conversion_out1_im(50)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_114 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(51),  -- double
              nfp_out => Data_Type_Conversion_out1_im(51)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_115 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(52),  -- double
              nfp_out => Data_Type_Conversion_out1_im(52)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_116 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(53),  -- double
              nfp_out => Data_Type_Conversion_out1_im(53)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_117 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(54),  -- double
              nfp_out => Data_Type_Conversion_out1_im(54)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_118 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(55),  -- double
              nfp_out => Data_Type_Conversion_out1_im(55)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_119 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(56),  -- double
              nfp_out => Data_Type_Conversion_out1_im(56)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_120 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(57),  -- double
              nfp_out => Data_Type_Conversion_out1_im(57)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_121 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(58),  -- double
              nfp_out => Data_Type_Conversion_out1_im(58)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_122 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(59),  -- double
              nfp_out => Data_Type_Conversion_out1_im(59)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_123 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(60),  -- double
              nfp_out => Data_Type_Conversion_out1_im(60)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_124 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(61),  -- double
              nfp_out => Data_Type_Conversion_out1_im(61)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_125 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(62),  -- double
              nfp_out => Data_Type_Conversion_out1_im(62)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_126 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_re(63),  -- double
              nfp_out => Data_Type_Conversion_out1_re(63)  -- sfix16_En14
              );

  u_Tx_OFDM_Transmitter_custom_buffer_nfp_convert_double_to_fixed_16_En14_127 : nfp_convert_double_to_fixed_16_En14
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              nfp_in => y_im(63),  -- double
              nfp_out => Data_Type_Conversion_out1_im(63)  -- sfix16_En14
              );

  u_vector_feedback : vector_feedback
    PORT MAP( vector_before_re => Delay_out1_re_2,  -- sfix16_En14 [64]
              vector_before_im => Delay_out1_im_2,  -- sfix16_En14 [64]
              y_re => y_re_1,  -- sfix16_En14 [64]
              y_im => y_im_1  -- sfix16_En14 [64]
              );

  u_buffer : buffer_rsvd
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              value_re => scalar_re_1,  -- sfix16_En13
              value_im => scalar_im_1,  -- sfix16_En13
              vector_zero_re => Data_Type_Conversion_out1_re,  -- sfix16_En14 [64]
              vector_zero_im => Data_Type_Conversion_out1_im,  -- sfix16_En14 [64]
              vector_before_re => y_re_1,  -- sfix16_En14 [64]
              vector_before_im => y_im_1,  -- sfix16_En14 [64]
              counter => std_logic_vector(HDL_Counter_out1),  -- uint8
              buffer_re => buffer_re,  -- sfix16_En14 [64]
              buffer_im => buffer_im  -- sfix16_En14 [64]
              );

  scalar_re_1 <= std_logic_vector(signed(scalar_re));

  scalar_im_1 <= std_logic_vector(signed(scalar_im));



  HDL_Counter_ctrl_const_out <= '1';

  HDL_Counter_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_15_0 = '1' THEN
        HDL_Counter_ctrl_delay_out <= HDL_Counter_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS HDL_Counter_ctrl_delay_process;


  HDL_Counter_ctrl_delay_out_1 <= HDL_Counter_ctrl_delay_out;

  HDL_Counter_Initial_Val_out <= to_unsigned(16#01#, 8);

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 64
  count_step <= to_unsigned(16#01#, 8);

  count_from <= to_unsigned(16#01#, 8);

  count <= HDL_Counter_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter_out1 = to_unsigned(16#40#, 8) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  crp_out_delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_value_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_value_1 <= count_value;
      END IF;
    END IF;
  END PROCESS crp_out_delay1_process;


  HDL_Counter_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_bypass_reg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_15_1 = '1' THEN
        HDL_Counter_bypass_reg <= count_value_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter_bypass_process;

  
  HDL_Counter_out <= count_value_1 WHEN enb_1_15_1 = '1' ELSE
      HDL_Counter_bypass_reg;

  HDL_Counter_out_1 <= HDL_Counter_out;

  
  HDL_Counter_out1 <= HDL_Counter_Initial_Val_out WHEN HDL_Counter_ctrl_delay_out_1 = '0' ELSE
      HDL_Counter_out_1;

  Delay_out1_im_1 <= Delay_out1_im;

  outputgen3: FOR k IN 0 TO 63 GENERATE
    Delay_out1_im_2(k) <= std_logic_vector(Delay_out1_im_1(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 63 GENERATE
    buffer_im_signed(k) <= signed(buffer_im(k));
  END GENERATE;

  outputgen1: FOR k IN 0 TO 63 GENERATE
    buffer_re_signed(k) <= signed(buffer_re(k));
  END GENERATE;

  crp_out_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      buffer_re_1(0) <= to_signed(16#0000#, 16);
      buffer_im_1(0) <= to_signed(16#0000#, 16);
      buffer_re_1(1) <= to_signed(16#0000#, 16);
      buffer_im_1(1) <= to_signed(16#0000#, 16);
      buffer_re_1(2) <= to_signed(16#0000#, 16);
      buffer_im_1(2) <= to_signed(16#0000#, 16);
      buffer_re_1(3) <= to_signed(16#0000#, 16);
      buffer_im_1(3) <= to_signed(16#0000#, 16);
      buffer_re_1(4) <= to_signed(16#0000#, 16);
      buffer_im_1(4) <= to_signed(16#0000#, 16);
      buffer_re_1(5) <= to_signed(16#0000#, 16);
      buffer_im_1(5) <= to_signed(16#0000#, 16);
      buffer_re_1(6) <= to_signed(16#0000#, 16);
      buffer_im_1(6) <= to_signed(16#0000#, 16);
      buffer_re_1(7) <= to_signed(16#0000#, 16);
      buffer_im_1(7) <= to_signed(16#0000#, 16);
      buffer_re_1(8) <= to_signed(16#0000#, 16);
      buffer_im_1(8) <= to_signed(16#0000#, 16);
      buffer_re_1(9) <= to_signed(16#0000#, 16);
      buffer_im_1(9) <= to_signed(16#0000#, 16);
      buffer_re_1(10) <= to_signed(16#0000#, 16);
      buffer_im_1(10) <= to_signed(16#0000#, 16);
      buffer_re_1(11) <= to_signed(16#0000#, 16);
      buffer_im_1(11) <= to_signed(16#0000#, 16);
      buffer_re_1(12) <= to_signed(16#0000#, 16);
      buffer_im_1(12) <= to_signed(16#0000#, 16);
      buffer_re_1(13) <= to_signed(16#0000#, 16);
      buffer_im_1(13) <= to_signed(16#0000#, 16);
      buffer_re_1(14) <= to_signed(16#0000#, 16);
      buffer_im_1(14) <= to_signed(16#0000#, 16);
      buffer_re_1(15) <= to_signed(16#0000#, 16);
      buffer_im_1(15) <= to_signed(16#0000#, 16);
      buffer_re_1(16) <= to_signed(16#0000#, 16);
      buffer_im_1(16) <= to_signed(16#0000#, 16);
      buffer_re_1(17) <= to_signed(16#0000#, 16);
      buffer_im_1(17) <= to_signed(16#0000#, 16);
      buffer_re_1(18) <= to_signed(16#0000#, 16);
      buffer_im_1(18) <= to_signed(16#0000#, 16);
      buffer_re_1(19) <= to_signed(16#0000#, 16);
      buffer_im_1(19) <= to_signed(16#0000#, 16);
      buffer_re_1(20) <= to_signed(16#0000#, 16);
      buffer_im_1(20) <= to_signed(16#0000#, 16);
      buffer_re_1(21) <= to_signed(16#0000#, 16);
      buffer_im_1(21) <= to_signed(16#0000#, 16);
      buffer_re_1(22) <= to_signed(16#0000#, 16);
      buffer_im_1(22) <= to_signed(16#0000#, 16);
      buffer_re_1(23) <= to_signed(16#0000#, 16);
      buffer_im_1(23) <= to_signed(16#0000#, 16);
      buffer_re_1(24) <= to_signed(16#0000#, 16);
      buffer_im_1(24) <= to_signed(16#0000#, 16);
      buffer_re_1(25) <= to_signed(16#0000#, 16);
      buffer_im_1(25) <= to_signed(16#0000#, 16);
      buffer_re_1(26) <= to_signed(16#0000#, 16);
      buffer_im_1(26) <= to_signed(16#0000#, 16);
      buffer_re_1(27) <= to_signed(16#0000#, 16);
      buffer_im_1(27) <= to_signed(16#0000#, 16);
      buffer_re_1(28) <= to_signed(16#0000#, 16);
      buffer_im_1(28) <= to_signed(16#0000#, 16);
      buffer_re_1(29) <= to_signed(16#0000#, 16);
      buffer_im_1(29) <= to_signed(16#0000#, 16);
      buffer_re_1(30) <= to_signed(16#0000#, 16);
      buffer_im_1(30) <= to_signed(16#0000#, 16);
      buffer_re_1(31) <= to_signed(16#0000#, 16);
      buffer_im_1(31) <= to_signed(16#0000#, 16);
      buffer_re_1(32) <= to_signed(16#0000#, 16);
      buffer_im_1(32) <= to_signed(16#0000#, 16);
      buffer_re_1(33) <= to_signed(16#0000#, 16);
      buffer_im_1(33) <= to_signed(16#0000#, 16);
      buffer_re_1(34) <= to_signed(16#0000#, 16);
      buffer_im_1(34) <= to_signed(16#0000#, 16);
      buffer_re_1(35) <= to_signed(16#0000#, 16);
      buffer_im_1(35) <= to_signed(16#0000#, 16);
      buffer_re_1(36) <= to_signed(16#0000#, 16);
      buffer_im_1(36) <= to_signed(16#0000#, 16);
      buffer_re_1(37) <= to_signed(16#0000#, 16);
      buffer_im_1(37) <= to_signed(16#0000#, 16);
      buffer_re_1(38) <= to_signed(16#0000#, 16);
      buffer_im_1(38) <= to_signed(16#0000#, 16);
      buffer_re_1(39) <= to_signed(16#0000#, 16);
      buffer_im_1(39) <= to_signed(16#0000#, 16);
      buffer_re_1(40) <= to_signed(16#0000#, 16);
      buffer_im_1(40) <= to_signed(16#0000#, 16);
      buffer_re_1(41) <= to_signed(16#0000#, 16);
      buffer_im_1(41) <= to_signed(16#0000#, 16);
      buffer_re_1(42) <= to_signed(16#0000#, 16);
      buffer_im_1(42) <= to_signed(16#0000#, 16);
      buffer_re_1(43) <= to_signed(16#0000#, 16);
      buffer_im_1(43) <= to_signed(16#0000#, 16);
      buffer_re_1(44) <= to_signed(16#0000#, 16);
      buffer_im_1(44) <= to_signed(16#0000#, 16);
      buffer_re_1(45) <= to_signed(16#0000#, 16);
      buffer_im_1(45) <= to_signed(16#0000#, 16);
      buffer_re_1(46) <= to_signed(16#0000#, 16);
      buffer_im_1(46) <= to_signed(16#0000#, 16);
      buffer_re_1(47) <= to_signed(16#0000#, 16);
      buffer_im_1(47) <= to_signed(16#0000#, 16);
      buffer_re_1(48) <= to_signed(16#0000#, 16);
      buffer_im_1(48) <= to_signed(16#0000#, 16);
      buffer_re_1(49) <= to_signed(16#0000#, 16);
      buffer_im_1(49) <= to_signed(16#0000#, 16);
      buffer_re_1(50) <= to_signed(16#0000#, 16);
      buffer_im_1(50) <= to_signed(16#0000#, 16);
      buffer_re_1(51) <= to_signed(16#0000#, 16);
      buffer_im_1(51) <= to_signed(16#0000#, 16);
      buffer_re_1(52) <= to_signed(16#0000#, 16);
      buffer_im_1(52) <= to_signed(16#0000#, 16);
      buffer_re_1(53) <= to_signed(16#0000#, 16);
      buffer_im_1(53) <= to_signed(16#0000#, 16);
      buffer_re_1(54) <= to_signed(16#0000#, 16);
      buffer_im_1(54) <= to_signed(16#0000#, 16);
      buffer_re_1(55) <= to_signed(16#0000#, 16);
      buffer_im_1(55) <= to_signed(16#0000#, 16);
      buffer_re_1(56) <= to_signed(16#0000#, 16);
      buffer_im_1(56) <= to_signed(16#0000#, 16);
      buffer_re_1(57) <= to_signed(16#0000#, 16);
      buffer_im_1(57) <= to_signed(16#0000#, 16);
      buffer_re_1(58) <= to_signed(16#0000#, 16);
      buffer_im_1(58) <= to_signed(16#0000#, 16);
      buffer_re_1(59) <= to_signed(16#0000#, 16);
      buffer_im_1(59) <= to_signed(16#0000#, 16);
      buffer_re_1(60) <= to_signed(16#0000#, 16);
      buffer_im_1(60) <= to_signed(16#0000#, 16);
      buffer_re_1(61) <= to_signed(16#0000#, 16);
      buffer_im_1(61) <= to_signed(16#0000#, 16);
      buffer_re_1(62) <= to_signed(16#0000#, 16);
      buffer_im_1(62) <= to_signed(16#0000#, 16);
      buffer_re_1(63) <= to_signed(16#0000#, 16);
      buffer_im_1(63) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        buffer_re_1(0) <= buffer_re_signed(0);
        buffer_im_1(0) <= buffer_im_signed(0);
        buffer_re_1(1) <= buffer_re_signed(1);
        buffer_im_1(1) <= buffer_im_signed(1);
        buffer_re_1(2) <= buffer_re_signed(2);
        buffer_im_1(2) <= buffer_im_signed(2);
        buffer_re_1(3) <= buffer_re_signed(3);
        buffer_im_1(3) <= buffer_im_signed(3);
        buffer_re_1(4) <= buffer_re_signed(4);
        buffer_im_1(4) <= buffer_im_signed(4);
        buffer_re_1(5) <= buffer_re_signed(5);
        buffer_im_1(5) <= buffer_im_signed(5);
        buffer_re_1(6) <= buffer_re_signed(6);
        buffer_im_1(6) <= buffer_im_signed(6);
        buffer_re_1(7) <= buffer_re_signed(7);
        buffer_im_1(7) <= buffer_im_signed(7);
        buffer_re_1(8) <= buffer_re_signed(8);
        buffer_im_1(8) <= buffer_im_signed(8);
        buffer_re_1(9) <= buffer_re_signed(9);
        buffer_im_1(9) <= buffer_im_signed(9);
        buffer_re_1(10) <= buffer_re_signed(10);
        buffer_im_1(10) <= buffer_im_signed(10);
        buffer_re_1(11) <= buffer_re_signed(11);
        buffer_im_1(11) <= buffer_im_signed(11);
        buffer_re_1(12) <= buffer_re_signed(12);
        buffer_im_1(12) <= buffer_im_signed(12);
        buffer_re_1(13) <= buffer_re_signed(13);
        buffer_im_1(13) <= buffer_im_signed(13);
        buffer_re_1(14) <= buffer_re_signed(14);
        buffer_im_1(14) <= buffer_im_signed(14);
        buffer_re_1(15) <= buffer_re_signed(15);
        buffer_im_1(15) <= buffer_im_signed(15);
        buffer_re_1(16) <= buffer_re_signed(16);
        buffer_im_1(16) <= buffer_im_signed(16);
        buffer_re_1(17) <= buffer_re_signed(17);
        buffer_im_1(17) <= buffer_im_signed(17);
        buffer_re_1(18) <= buffer_re_signed(18);
        buffer_im_1(18) <= buffer_im_signed(18);
        buffer_re_1(19) <= buffer_re_signed(19);
        buffer_im_1(19) <= buffer_im_signed(19);
        buffer_re_1(20) <= buffer_re_signed(20);
        buffer_im_1(20) <= buffer_im_signed(20);
        buffer_re_1(21) <= buffer_re_signed(21);
        buffer_im_1(21) <= buffer_im_signed(21);
        buffer_re_1(22) <= buffer_re_signed(22);
        buffer_im_1(22) <= buffer_im_signed(22);
        buffer_re_1(23) <= buffer_re_signed(23);
        buffer_im_1(23) <= buffer_im_signed(23);
        buffer_re_1(24) <= buffer_re_signed(24);
        buffer_im_1(24) <= buffer_im_signed(24);
        buffer_re_1(25) <= buffer_re_signed(25);
        buffer_im_1(25) <= buffer_im_signed(25);
        buffer_re_1(26) <= buffer_re_signed(26);
        buffer_im_1(26) <= buffer_im_signed(26);
        buffer_re_1(27) <= buffer_re_signed(27);
        buffer_im_1(27) <= buffer_im_signed(27);
        buffer_re_1(28) <= buffer_re_signed(28);
        buffer_im_1(28) <= buffer_im_signed(28);
        buffer_re_1(29) <= buffer_re_signed(29);
        buffer_im_1(29) <= buffer_im_signed(29);
        buffer_re_1(30) <= buffer_re_signed(30);
        buffer_im_1(30) <= buffer_im_signed(30);
        buffer_re_1(31) <= buffer_re_signed(31);
        buffer_im_1(31) <= buffer_im_signed(31);
        buffer_re_1(32) <= buffer_re_signed(32);
        buffer_im_1(32) <= buffer_im_signed(32);
        buffer_re_1(33) <= buffer_re_signed(33);
        buffer_im_1(33) <= buffer_im_signed(33);
        buffer_re_1(34) <= buffer_re_signed(34);
        buffer_im_1(34) <= buffer_im_signed(34);
        buffer_re_1(35) <= buffer_re_signed(35);
        buffer_im_1(35) <= buffer_im_signed(35);
        buffer_re_1(36) <= buffer_re_signed(36);
        buffer_im_1(36) <= buffer_im_signed(36);
        buffer_re_1(37) <= buffer_re_signed(37);
        buffer_im_1(37) <= buffer_im_signed(37);
        buffer_re_1(38) <= buffer_re_signed(38);
        buffer_im_1(38) <= buffer_im_signed(38);
        buffer_re_1(39) <= buffer_re_signed(39);
        buffer_im_1(39) <= buffer_im_signed(39);
        buffer_re_1(40) <= buffer_re_signed(40);
        buffer_im_1(40) <= buffer_im_signed(40);
        buffer_re_1(41) <= buffer_re_signed(41);
        buffer_im_1(41) <= buffer_im_signed(41);
        buffer_re_1(42) <= buffer_re_signed(42);
        buffer_im_1(42) <= buffer_im_signed(42);
        buffer_re_1(43) <= buffer_re_signed(43);
        buffer_im_1(43) <= buffer_im_signed(43);
        buffer_re_1(44) <= buffer_re_signed(44);
        buffer_im_1(44) <= buffer_im_signed(44);
        buffer_re_1(45) <= buffer_re_signed(45);
        buffer_im_1(45) <= buffer_im_signed(45);
        buffer_re_1(46) <= buffer_re_signed(46);
        buffer_im_1(46) <= buffer_im_signed(46);
        buffer_re_1(47) <= buffer_re_signed(47);
        buffer_im_1(47) <= buffer_im_signed(47);
        buffer_re_1(48) <= buffer_re_signed(48);
        buffer_im_1(48) <= buffer_im_signed(48);
        buffer_re_1(49) <= buffer_re_signed(49);
        buffer_im_1(49) <= buffer_im_signed(49);
        buffer_re_1(50) <= buffer_re_signed(50);
        buffer_im_1(50) <= buffer_im_signed(50);
        buffer_re_1(51) <= buffer_re_signed(51);
        buffer_im_1(51) <= buffer_im_signed(51);
        buffer_re_1(52) <= buffer_re_signed(52);
        buffer_im_1(52) <= buffer_im_signed(52);
        buffer_re_1(53) <= buffer_re_signed(53);
        buffer_im_1(53) <= buffer_im_signed(53);
        buffer_re_1(54) <= buffer_re_signed(54);
        buffer_im_1(54) <= buffer_im_signed(54);
        buffer_re_1(55) <= buffer_re_signed(55);
        buffer_im_1(55) <= buffer_im_signed(55);
        buffer_re_1(56) <= buffer_re_signed(56);
        buffer_im_1(56) <= buffer_im_signed(56);
        buffer_re_1(57) <= buffer_re_signed(57);
        buffer_im_1(57) <= buffer_im_signed(57);
        buffer_re_1(58) <= buffer_re_signed(58);
        buffer_im_1(58) <= buffer_im_signed(58);
        buffer_re_1(59) <= buffer_re_signed(59);
        buffer_im_1(59) <= buffer_im_signed(59);
        buffer_re_1(60) <= buffer_re_signed(60);
        buffer_im_1(60) <= buffer_im_signed(60);
        buffer_re_1(61) <= buffer_re_signed(61);
        buffer_im_1(61) <= buffer_im_signed(61);
        buffer_re_1(62) <= buffer_re_signed(62);
        buffer_im_1(62) <= buffer_im_signed(62);
        buffer_re_1(63) <= buffer_re_signed(63);
        buffer_im_1(63) <= buffer_im_signed(63);
      END IF;
    END IF;
  END PROCESS crp_out_delay_process;


  Delay_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_bypass_reg_re(0) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(0) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(1) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(1) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(2) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(2) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(3) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(3) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(4) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(4) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(5) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(5) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(6) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(6) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(7) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(7) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(8) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(8) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(9) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(9) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(10) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(10) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(11) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(11) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(12) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(12) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(13) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(13) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(14) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(14) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(15) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(15) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(16) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(16) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(17) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(17) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(18) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(18) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(19) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(19) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(20) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(20) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(21) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(21) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(22) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(22) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(23) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(23) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(24) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(24) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(25) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(25) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(26) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(26) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(27) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(27) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(28) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(28) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(29) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(29) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(30) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(30) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(31) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(31) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(32) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(32) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(33) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(33) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(34) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(34) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(35) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(35) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(36) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(36) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(37) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(37) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(38) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(38) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(39) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(39) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(40) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(40) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(41) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(41) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(42) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(42) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(43) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(43) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(44) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(44) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(45) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(45) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(46) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(46) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(47) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(47) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(48) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(48) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(49) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(49) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(50) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(50) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(51) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(51) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(52) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(52) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(53) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(53) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(54) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(54) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(55) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(55) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(56) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(56) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(57) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(57) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(58) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(58) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(59) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(59) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(60) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(60) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(61) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(61) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(62) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(62) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_re(63) <= to_signed(16#0000#, 16);
      Delay_bypass_reg_im(63) <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_15_1 = '1' THEN
        Delay_bypass_reg_re(0) <= Delay_bypass_reg_next_re(0);
        Delay_bypass_reg_im(0) <= Delay_bypass_reg_next_im(0);
        Delay_bypass_reg_re(1) <= Delay_bypass_reg_next_re(1);
        Delay_bypass_reg_im(1) <= Delay_bypass_reg_next_im(1);
        Delay_bypass_reg_re(2) <= Delay_bypass_reg_next_re(2);
        Delay_bypass_reg_im(2) <= Delay_bypass_reg_next_im(2);
        Delay_bypass_reg_re(3) <= Delay_bypass_reg_next_re(3);
        Delay_bypass_reg_im(3) <= Delay_bypass_reg_next_im(3);
        Delay_bypass_reg_re(4) <= Delay_bypass_reg_next_re(4);
        Delay_bypass_reg_im(4) <= Delay_bypass_reg_next_im(4);
        Delay_bypass_reg_re(5) <= Delay_bypass_reg_next_re(5);
        Delay_bypass_reg_im(5) <= Delay_bypass_reg_next_im(5);
        Delay_bypass_reg_re(6) <= Delay_bypass_reg_next_re(6);
        Delay_bypass_reg_im(6) <= Delay_bypass_reg_next_im(6);
        Delay_bypass_reg_re(7) <= Delay_bypass_reg_next_re(7);
        Delay_bypass_reg_im(7) <= Delay_bypass_reg_next_im(7);
        Delay_bypass_reg_re(8) <= Delay_bypass_reg_next_re(8);
        Delay_bypass_reg_im(8) <= Delay_bypass_reg_next_im(8);
        Delay_bypass_reg_re(9) <= Delay_bypass_reg_next_re(9);
        Delay_bypass_reg_im(9) <= Delay_bypass_reg_next_im(9);
        Delay_bypass_reg_re(10) <= Delay_bypass_reg_next_re(10);
        Delay_bypass_reg_im(10) <= Delay_bypass_reg_next_im(10);
        Delay_bypass_reg_re(11) <= Delay_bypass_reg_next_re(11);
        Delay_bypass_reg_im(11) <= Delay_bypass_reg_next_im(11);
        Delay_bypass_reg_re(12) <= Delay_bypass_reg_next_re(12);
        Delay_bypass_reg_im(12) <= Delay_bypass_reg_next_im(12);
        Delay_bypass_reg_re(13) <= Delay_bypass_reg_next_re(13);
        Delay_bypass_reg_im(13) <= Delay_bypass_reg_next_im(13);
        Delay_bypass_reg_re(14) <= Delay_bypass_reg_next_re(14);
        Delay_bypass_reg_im(14) <= Delay_bypass_reg_next_im(14);
        Delay_bypass_reg_re(15) <= Delay_bypass_reg_next_re(15);
        Delay_bypass_reg_im(15) <= Delay_bypass_reg_next_im(15);
        Delay_bypass_reg_re(16) <= Delay_bypass_reg_next_re(16);
        Delay_bypass_reg_im(16) <= Delay_bypass_reg_next_im(16);
        Delay_bypass_reg_re(17) <= Delay_bypass_reg_next_re(17);
        Delay_bypass_reg_im(17) <= Delay_bypass_reg_next_im(17);
        Delay_bypass_reg_re(18) <= Delay_bypass_reg_next_re(18);
        Delay_bypass_reg_im(18) <= Delay_bypass_reg_next_im(18);
        Delay_bypass_reg_re(19) <= Delay_bypass_reg_next_re(19);
        Delay_bypass_reg_im(19) <= Delay_bypass_reg_next_im(19);
        Delay_bypass_reg_re(20) <= Delay_bypass_reg_next_re(20);
        Delay_bypass_reg_im(20) <= Delay_bypass_reg_next_im(20);
        Delay_bypass_reg_re(21) <= Delay_bypass_reg_next_re(21);
        Delay_bypass_reg_im(21) <= Delay_bypass_reg_next_im(21);
        Delay_bypass_reg_re(22) <= Delay_bypass_reg_next_re(22);
        Delay_bypass_reg_im(22) <= Delay_bypass_reg_next_im(22);
        Delay_bypass_reg_re(23) <= Delay_bypass_reg_next_re(23);
        Delay_bypass_reg_im(23) <= Delay_bypass_reg_next_im(23);
        Delay_bypass_reg_re(24) <= Delay_bypass_reg_next_re(24);
        Delay_bypass_reg_im(24) <= Delay_bypass_reg_next_im(24);
        Delay_bypass_reg_re(25) <= Delay_bypass_reg_next_re(25);
        Delay_bypass_reg_im(25) <= Delay_bypass_reg_next_im(25);
        Delay_bypass_reg_re(26) <= Delay_bypass_reg_next_re(26);
        Delay_bypass_reg_im(26) <= Delay_bypass_reg_next_im(26);
        Delay_bypass_reg_re(27) <= Delay_bypass_reg_next_re(27);
        Delay_bypass_reg_im(27) <= Delay_bypass_reg_next_im(27);
        Delay_bypass_reg_re(28) <= Delay_bypass_reg_next_re(28);
        Delay_bypass_reg_im(28) <= Delay_bypass_reg_next_im(28);
        Delay_bypass_reg_re(29) <= Delay_bypass_reg_next_re(29);
        Delay_bypass_reg_im(29) <= Delay_bypass_reg_next_im(29);
        Delay_bypass_reg_re(30) <= Delay_bypass_reg_next_re(30);
        Delay_bypass_reg_im(30) <= Delay_bypass_reg_next_im(30);
        Delay_bypass_reg_re(31) <= Delay_bypass_reg_next_re(31);
        Delay_bypass_reg_im(31) <= Delay_bypass_reg_next_im(31);
        Delay_bypass_reg_re(32) <= Delay_bypass_reg_next_re(32);
        Delay_bypass_reg_im(32) <= Delay_bypass_reg_next_im(32);
        Delay_bypass_reg_re(33) <= Delay_bypass_reg_next_re(33);
        Delay_bypass_reg_im(33) <= Delay_bypass_reg_next_im(33);
        Delay_bypass_reg_re(34) <= Delay_bypass_reg_next_re(34);
        Delay_bypass_reg_im(34) <= Delay_bypass_reg_next_im(34);
        Delay_bypass_reg_re(35) <= Delay_bypass_reg_next_re(35);
        Delay_bypass_reg_im(35) <= Delay_bypass_reg_next_im(35);
        Delay_bypass_reg_re(36) <= Delay_bypass_reg_next_re(36);
        Delay_bypass_reg_im(36) <= Delay_bypass_reg_next_im(36);
        Delay_bypass_reg_re(37) <= Delay_bypass_reg_next_re(37);
        Delay_bypass_reg_im(37) <= Delay_bypass_reg_next_im(37);
        Delay_bypass_reg_re(38) <= Delay_bypass_reg_next_re(38);
        Delay_bypass_reg_im(38) <= Delay_bypass_reg_next_im(38);
        Delay_bypass_reg_re(39) <= Delay_bypass_reg_next_re(39);
        Delay_bypass_reg_im(39) <= Delay_bypass_reg_next_im(39);
        Delay_bypass_reg_re(40) <= Delay_bypass_reg_next_re(40);
        Delay_bypass_reg_im(40) <= Delay_bypass_reg_next_im(40);
        Delay_bypass_reg_re(41) <= Delay_bypass_reg_next_re(41);
        Delay_bypass_reg_im(41) <= Delay_bypass_reg_next_im(41);
        Delay_bypass_reg_re(42) <= Delay_bypass_reg_next_re(42);
        Delay_bypass_reg_im(42) <= Delay_bypass_reg_next_im(42);
        Delay_bypass_reg_re(43) <= Delay_bypass_reg_next_re(43);
        Delay_bypass_reg_im(43) <= Delay_bypass_reg_next_im(43);
        Delay_bypass_reg_re(44) <= Delay_bypass_reg_next_re(44);
        Delay_bypass_reg_im(44) <= Delay_bypass_reg_next_im(44);
        Delay_bypass_reg_re(45) <= Delay_bypass_reg_next_re(45);
        Delay_bypass_reg_im(45) <= Delay_bypass_reg_next_im(45);
        Delay_bypass_reg_re(46) <= Delay_bypass_reg_next_re(46);
        Delay_bypass_reg_im(46) <= Delay_bypass_reg_next_im(46);
        Delay_bypass_reg_re(47) <= Delay_bypass_reg_next_re(47);
        Delay_bypass_reg_im(47) <= Delay_bypass_reg_next_im(47);
        Delay_bypass_reg_re(48) <= Delay_bypass_reg_next_re(48);
        Delay_bypass_reg_im(48) <= Delay_bypass_reg_next_im(48);
        Delay_bypass_reg_re(49) <= Delay_bypass_reg_next_re(49);
        Delay_bypass_reg_im(49) <= Delay_bypass_reg_next_im(49);
        Delay_bypass_reg_re(50) <= Delay_bypass_reg_next_re(50);
        Delay_bypass_reg_im(50) <= Delay_bypass_reg_next_im(50);
        Delay_bypass_reg_re(51) <= Delay_bypass_reg_next_re(51);
        Delay_bypass_reg_im(51) <= Delay_bypass_reg_next_im(51);
        Delay_bypass_reg_re(52) <= Delay_bypass_reg_next_re(52);
        Delay_bypass_reg_im(52) <= Delay_bypass_reg_next_im(52);
        Delay_bypass_reg_re(53) <= Delay_bypass_reg_next_re(53);
        Delay_bypass_reg_im(53) <= Delay_bypass_reg_next_im(53);
        Delay_bypass_reg_re(54) <= Delay_bypass_reg_next_re(54);
        Delay_bypass_reg_im(54) <= Delay_bypass_reg_next_im(54);
        Delay_bypass_reg_re(55) <= Delay_bypass_reg_next_re(55);
        Delay_bypass_reg_im(55) <= Delay_bypass_reg_next_im(55);
        Delay_bypass_reg_re(56) <= Delay_bypass_reg_next_re(56);
        Delay_bypass_reg_im(56) <= Delay_bypass_reg_next_im(56);
        Delay_bypass_reg_re(57) <= Delay_bypass_reg_next_re(57);
        Delay_bypass_reg_im(57) <= Delay_bypass_reg_next_im(57);
        Delay_bypass_reg_re(58) <= Delay_bypass_reg_next_re(58);
        Delay_bypass_reg_im(58) <= Delay_bypass_reg_next_im(58);
        Delay_bypass_reg_re(59) <= Delay_bypass_reg_next_re(59);
        Delay_bypass_reg_im(59) <= Delay_bypass_reg_next_im(59);
        Delay_bypass_reg_re(60) <= Delay_bypass_reg_next_re(60);
        Delay_bypass_reg_im(60) <= Delay_bypass_reg_next_im(60);
        Delay_bypass_reg_re(61) <= Delay_bypass_reg_next_re(61);
        Delay_bypass_reg_im(61) <= Delay_bypass_reg_next_im(61);
        Delay_bypass_reg_re(62) <= Delay_bypass_reg_next_re(62);
        Delay_bypass_reg_im(62) <= Delay_bypass_reg_next_im(62);
        Delay_bypass_reg_re(63) <= Delay_bypass_reg_next_re(63);
        Delay_bypass_reg_im(63) <= Delay_bypass_reg_next_im(63);
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1_re(0) <= buffer_re_1(0) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(0);
  
  Delay_out1_re(1) <= buffer_re_1(1) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(1);
  
  Delay_out1_re(2) <= buffer_re_1(2) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(2);
  
  Delay_out1_re(3) <= buffer_re_1(3) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(3);
  
  Delay_out1_re(4) <= buffer_re_1(4) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(4);
  
  Delay_out1_re(5) <= buffer_re_1(5) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(5);
  
  Delay_out1_re(6) <= buffer_re_1(6) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(6);
  
  Delay_out1_re(7) <= buffer_re_1(7) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(7);
  
  Delay_out1_re(8) <= buffer_re_1(8) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(8);
  
  Delay_out1_re(9) <= buffer_re_1(9) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(9);
  
  Delay_out1_re(10) <= buffer_re_1(10) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(10);
  
  Delay_out1_re(11) <= buffer_re_1(11) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(11);
  
  Delay_out1_re(12) <= buffer_re_1(12) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(12);
  
  Delay_out1_re(13) <= buffer_re_1(13) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(13);
  
  Delay_out1_re(14) <= buffer_re_1(14) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(14);
  
  Delay_out1_re(15) <= buffer_re_1(15) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(15);
  
  Delay_out1_re(16) <= buffer_re_1(16) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(16);
  
  Delay_out1_re(17) <= buffer_re_1(17) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(17);
  
  Delay_out1_re(18) <= buffer_re_1(18) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(18);
  
  Delay_out1_re(19) <= buffer_re_1(19) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(19);
  
  Delay_out1_re(20) <= buffer_re_1(20) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(20);
  
  Delay_out1_re(21) <= buffer_re_1(21) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(21);
  
  Delay_out1_re(22) <= buffer_re_1(22) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(22);
  
  Delay_out1_re(23) <= buffer_re_1(23) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(23);
  
  Delay_out1_re(24) <= buffer_re_1(24) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(24);
  
  Delay_out1_re(25) <= buffer_re_1(25) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(25);
  
  Delay_out1_re(26) <= buffer_re_1(26) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(26);
  
  Delay_out1_re(27) <= buffer_re_1(27) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(27);
  
  Delay_out1_re(28) <= buffer_re_1(28) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(28);
  
  Delay_out1_re(29) <= buffer_re_1(29) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(29);
  
  Delay_out1_re(30) <= buffer_re_1(30) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(30);
  
  Delay_out1_re(31) <= buffer_re_1(31) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(31);
  
  Delay_out1_re(32) <= buffer_re_1(32) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(32);
  
  Delay_out1_re(33) <= buffer_re_1(33) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(33);
  
  Delay_out1_re(34) <= buffer_re_1(34) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(34);
  
  Delay_out1_re(35) <= buffer_re_1(35) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(35);
  
  Delay_out1_re(36) <= buffer_re_1(36) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(36);
  
  Delay_out1_re(37) <= buffer_re_1(37) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(37);
  
  Delay_out1_re(38) <= buffer_re_1(38) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(38);
  
  Delay_out1_re(39) <= buffer_re_1(39) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(39);
  
  Delay_out1_re(40) <= buffer_re_1(40) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(40);
  
  Delay_out1_re(41) <= buffer_re_1(41) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(41);
  
  Delay_out1_re(42) <= buffer_re_1(42) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(42);
  
  Delay_out1_re(43) <= buffer_re_1(43) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(43);
  
  Delay_out1_re(44) <= buffer_re_1(44) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(44);
  
  Delay_out1_re(45) <= buffer_re_1(45) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(45);
  
  Delay_out1_re(46) <= buffer_re_1(46) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(46);
  
  Delay_out1_re(47) <= buffer_re_1(47) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(47);
  
  Delay_out1_re(48) <= buffer_re_1(48) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(48);
  
  Delay_out1_re(49) <= buffer_re_1(49) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(49);
  
  Delay_out1_re(50) <= buffer_re_1(50) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(50);
  
  Delay_out1_re(51) <= buffer_re_1(51) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(51);
  
  Delay_out1_re(52) <= buffer_re_1(52) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(52);
  
  Delay_out1_re(53) <= buffer_re_1(53) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(53);
  
  Delay_out1_re(54) <= buffer_re_1(54) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(54);
  
  Delay_out1_re(55) <= buffer_re_1(55) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(55);
  
  Delay_out1_re(56) <= buffer_re_1(56) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(56);
  
  Delay_out1_re(57) <= buffer_re_1(57) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(57);
  
  Delay_out1_re(58) <= buffer_re_1(58) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(58);
  
  Delay_out1_re(59) <= buffer_re_1(59) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(59);
  
  Delay_out1_re(60) <= buffer_re_1(60) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(60);
  
  Delay_out1_re(61) <= buffer_re_1(61) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(61);
  
  Delay_out1_re(62) <= buffer_re_1(62) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(62);
  
  Delay_out1_re(63) <= buffer_re_1(63) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_re(63);
  
  Delay_out1_im(0) <= buffer_im_1(0) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(0);
  
  Delay_out1_im(1) <= buffer_im_1(1) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(1);
  
  Delay_out1_im(2) <= buffer_im_1(2) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(2);
  
  Delay_out1_im(3) <= buffer_im_1(3) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(3);
  
  Delay_out1_im(4) <= buffer_im_1(4) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(4);
  
  Delay_out1_im(5) <= buffer_im_1(5) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(5);
  
  Delay_out1_im(6) <= buffer_im_1(6) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(6);
  
  Delay_out1_im(7) <= buffer_im_1(7) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(7);
  
  Delay_out1_im(8) <= buffer_im_1(8) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(8);
  
  Delay_out1_im(9) <= buffer_im_1(9) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(9);
  
  Delay_out1_im(10) <= buffer_im_1(10) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(10);
  
  Delay_out1_im(11) <= buffer_im_1(11) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(11);
  
  Delay_out1_im(12) <= buffer_im_1(12) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(12);
  
  Delay_out1_im(13) <= buffer_im_1(13) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(13);
  
  Delay_out1_im(14) <= buffer_im_1(14) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(14);
  
  Delay_out1_im(15) <= buffer_im_1(15) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(15);
  
  Delay_out1_im(16) <= buffer_im_1(16) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(16);
  
  Delay_out1_im(17) <= buffer_im_1(17) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(17);
  
  Delay_out1_im(18) <= buffer_im_1(18) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(18);
  
  Delay_out1_im(19) <= buffer_im_1(19) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(19);
  
  Delay_out1_im(20) <= buffer_im_1(20) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(20);
  
  Delay_out1_im(21) <= buffer_im_1(21) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(21);
  
  Delay_out1_im(22) <= buffer_im_1(22) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(22);
  
  Delay_out1_im(23) <= buffer_im_1(23) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(23);
  
  Delay_out1_im(24) <= buffer_im_1(24) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(24);
  
  Delay_out1_im(25) <= buffer_im_1(25) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(25);
  
  Delay_out1_im(26) <= buffer_im_1(26) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(26);
  
  Delay_out1_im(27) <= buffer_im_1(27) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(27);
  
  Delay_out1_im(28) <= buffer_im_1(28) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(28);
  
  Delay_out1_im(29) <= buffer_im_1(29) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(29);
  
  Delay_out1_im(30) <= buffer_im_1(30) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(30);
  
  Delay_out1_im(31) <= buffer_im_1(31) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(31);
  
  Delay_out1_im(32) <= buffer_im_1(32) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(32);
  
  Delay_out1_im(33) <= buffer_im_1(33) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(33);
  
  Delay_out1_im(34) <= buffer_im_1(34) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(34);
  
  Delay_out1_im(35) <= buffer_im_1(35) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(35);
  
  Delay_out1_im(36) <= buffer_im_1(36) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(36);
  
  Delay_out1_im(37) <= buffer_im_1(37) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(37);
  
  Delay_out1_im(38) <= buffer_im_1(38) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(38);
  
  Delay_out1_im(39) <= buffer_im_1(39) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(39);
  
  Delay_out1_im(40) <= buffer_im_1(40) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(40);
  
  Delay_out1_im(41) <= buffer_im_1(41) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(41);
  
  Delay_out1_im(42) <= buffer_im_1(42) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(42);
  
  Delay_out1_im(43) <= buffer_im_1(43) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(43);
  
  Delay_out1_im(44) <= buffer_im_1(44) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(44);
  
  Delay_out1_im(45) <= buffer_im_1(45) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(45);
  
  Delay_out1_im(46) <= buffer_im_1(46) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(46);
  
  Delay_out1_im(47) <= buffer_im_1(47) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(47);
  
  Delay_out1_im(48) <= buffer_im_1(48) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(48);
  
  Delay_out1_im(49) <= buffer_im_1(49) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(49);
  
  Delay_out1_im(50) <= buffer_im_1(50) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(50);
  
  Delay_out1_im(51) <= buffer_im_1(51) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(51);
  
  Delay_out1_im(52) <= buffer_im_1(52) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(52);
  
  Delay_out1_im(53) <= buffer_im_1(53) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(53);
  
  Delay_out1_im(54) <= buffer_im_1(54) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(54);
  
  Delay_out1_im(55) <= buffer_im_1(55) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(55);
  
  Delay_out1_im(56) <= buffer_im_1(56) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(56);
  
  Delay_out1_im(57) <= buffer_im_1(57) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(57);
  
  Delay_out1_im(58) <= buffer_im_1(58) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(58);
  
  Delay_out1_im(59) <= buffer_im_1(59) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(59);
  
  Delay_out1_im(60) <= buffer_im_1(60) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(60);
  
  Delay_out1_im(61) <= buffer_im_1(61) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(61);
  
  Delay_out1_im(62) <= buffer_im_1(62) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(62);
  
  Delay_out1_im(63) <= buffer_im_1(63) WHEN enb_1_15_1 = '1' ELSE
      Delay_bypass_reg_im(63);
  Delay_bypass_reg_next_re(0) <= buffer_re_1(0);
  Delay_bypass_reg_next_im(0) <= buffer_im_1(0);
  Delay_bypass_reg_next_re(1) <= buffer_re_1(1);
  Delay_bypass_reg_next_im(1) <= buffer_im_1(1);
  Delay_bypass_reg_next_re(2) <= buffer_re_1(2);
  Delay_bypass_reg_next_im(2) <= buffer_im_1(2);
  Delay_bypass_reg_next_re(3) <= buffer_re_1(3);
  Delay_bypass_reg_next_im(3) <= buffer_im_1(3);
  Delay_bypass_reg_next_re(4) <= buffer_re_1(4);
  Delay_bypass_reg_next_im(4) <= buffer_im_1(4);
  Delay_bypass_reg_next_re(5) <= buffer_re_1(5);
  Delay_bypass_reg_next_im(5) <= buffer_im_1(5);
  Delay_bypass_reg_next_re(6) <= buffer_re_1(6);
  Delay_bypass_reg_next_im(6) <= buffer_im_1(6);
  Delay_bypass_reg_next_re(7) <= buffer_re_1(7);
  Delay_bypass_reg_next_im(7) <= buffer_im_1(7);
  Delay_bypass_reg_next_re(8) <= buffer_re_1(8);
  Delay_bypass_reg_next_im(8) <= buffer_im_1(8);
  Delay_bypass_reg_next_re(9) <= buffer_re_1(9);
  Delay_bypass_reg_next_im(9) <= buffer_im_1(9);
  Delay_bypass_reg_next_re(10) <= buffer_re_1(10);
  Delay_bypass_reg_next_im(10) <= buffer_im_1(10);
  Delay_bypass_reg_next_re(11) <= buffer_re_1(11);
  Delay_bypass_reg_next_im(11) <= buffer_im_1(11);
  Delay_bypass_reg_next_re(12) <= buffer_re_1(12);
  Delay_bypass_reg_next_im(12) <= buffer_im_1(12);
  Delay_bypass_reg_next_re(13) <= buffer_re_1(13);
  Delay_bypass_reg_next_im(13) <= buffer_im_1(13);
  Delay_bypass_reg_next_re(14) <= buffer_re_1(14);
  Delay_bypass_reg_next_im(14) <= buffer_im_1(14);
  Delay_bypass_reg_next_re(15) <= buffer_re_1(15);
  Delay_bypass_reg_next_im(15) <= buffer_im_1(15);
  Delay_bypass_reg_next_re(16) <= buffer_re_1(16);
  Delay_bypass_reg_next_im(16) <= buffer_im_1(16);
  Delay_bypass_reg_next_re(17) <= buffer_re_1(17);
  Delay_bypass_reg_next_im(17) <= buffer_im_1(17);
  Delay_bypass_reg_next_re(18) <= buffer_re_1(18);
  Delay_bypass_reg_next_im(18) <= buffer_im_1(18);
  Delay_bypass_reg_next_re(19) <= buffer_re_1(19);
  Delay_bypass_reg_next_im(19) <= buffer_im_1(19);
  Delay_bypass_reg_next_re(20) <= buffer_re_1(20);
  Delay_bypass_reg_next_im(20) <= buffer_im_1(20);
  Delay_bypass_reg_next_re(21) <= buffer_re_1(21);
  Delay_bypass_reg_next_im(21) <= buffer_im_1(21);
  Delay_bypass_reg_next_re(22) <= buffer_re_1(22);
  Delay_bypass_reg_next_im(22) <= buffer_im_1(22);
  Delay_bypass_reg_next_re(23) <= buffer_re_1(23);
  Delay_bypass_reg_next_im(23) <= buffer_im_1(23);
  Delay_bypass_reg_next_re(24) <= buffer_re_1(24);
  Delay_bypass_reg_next_im(24) <= buffer_im_1(24);
  Delay_bypass_reg_next_re(25) <= buffer_re_1(25);
  Delay_bypass_reg_next_im(25) <= buffer_im_1(25);
  Delay_bypass_reg_next_re(26) <= buffer_re_1(26);
  Delay_bypass_reg_next_im(26) <= buffer_im_1(26);
  Delay_bypass_reg_next_re(27) <= buffer_re_1(27);
  Delay_bypass_reg_next_im(27) <= buffer_im_1(27);
  Delay_bypass_reg_next_re(28) <= buffer_re_1(28);
  Delay_bypass_reg_next_im(28) <= buffer_im_1(28);
  Delay_bypass_reg_next_re(29) <= buffer_re_1(29);
  Delay_bypass_reg_next_im(29) <= buffer_im_1(29);
  Delay_bypass_reg_next_re(30) <= buffer_re_1(30);
  Delay_bypass_reg_next_im(30) <= buffer_im_1(30);
  Delay_bypass_reg_next_re(31) <= buffer_re_1(31);
  Delay_bypass_reg_next_im(31) <= buffer_im_1(31);
  Delay_bypass_reg_next_re(32) <= buffer_re_1(32);
  Delay_bypass_reg_next_im(32) <= buffer_im_1(32);
  Delay_bypass_reg_next_re(33) <= buffer_re_1(33);
  Delay_bypass_reg_next_im(33) <= buffer_im_1(33);
  Delay_bypass_reg_next_re(34) <= buffer_re_1(34);
  Delay_bypass_reg_next_im(34) <= buffer_im_1(34);
  Delay_bypass_reg_next_re(35) <= buffer_re_1(35);
  Delay_bypass_reg_next_im(35) <= buffer_im_1(35);
  Delay_bypass_reg_next_re(36) <= buffer_re_1(36);
  Delay_bypass_reg_next_im(36) <= buffer_im_1(36);
  Delay_bypass_reg_next_re(37) <= buffer_re_1(37);
  Delay_bypass_reg_next_im(37) <= buffer_im_1(37);
  Delay_bypass_reg_next_re(38) <= buffer_re_1(38);
  Delay_bypass_reg_next_im(38) <= buffer_im_1(38);
  Delay_bypass_reg_next_re(39) <= buffer_re_1(39);
  Delay_bypass_reg_next_im(39) <= buffer_im_1(39);
  Delay_bypass_reg_next_re(40) <= buffer_re_1(40);
  Delay_bypass_reg_next_im(40) <= buffer_im_1(40);
  Delay_bypass_reg_next_re(41) <= buffer_re_1(41);
  Delay_bypass_reg_next_im(41) <= buffer_im_1(41);
  Delay_bypass_reg_next_re(42) <= buffer_re_1(42);
  Delay_bypass_reg_next_im(42) <= buffer_im_1(42);
  Delay_bypass_reg_next_re(43) <= buffer_re_1(43);
  Delay_bypass_reg_next_im(43) <= buffer_im_1(43);
  Delay_bypass_reg_next_re(44) <= buffer_re_1(44);
  Delay_bypass_reg_next_im(44) <= buffer_im_1(44);
  Delay_bypass_reg_next_re(45) <= buffer_re_1(45);
  Delay_bypass_reg_next_im(45) <= buffer_im_1(45);
  Delay_bypass_reg_next_re(46) <= buffer_re_1(46);
  Delay_bypass_reg_next_im(46) <= buffer_im_1(46);
  Delay_bypass_reg_next_re(47) <= buffer_re_1(47);
  Delay_bypass_reg_next_im(47) <= buffer_im_1(47);
  Delay_bypass_reg_next_re(48) <= buffer_re_1(48);
  Delay_bypass_reg_next_im(48) <= buffer_im_1(48);
  Delay_bypass_reg_next_re(49) <= buffer_re_1(49);
  Delay_bypass_reg_next_im(49) <= buffer_im_1(49);
  Delay_bypass_reg_next_re(50) <= buffer_re_1(50);
  Delay_bypass_reg_next_im(50) <= buffer_im_1(50);
  Delay_bypass_reg_next_re(51) <= buffer_re_1(51);
  Delay_bypass_reg_next_im(51) <= buffer_im_1(51);
  Delay_bypass_reg_next_re(52) <= buffer_re_1(52);
  Delay_bypass_reg_next_im(52) <= buffer_im_1(52);
  Delay_bypass_reg_next_re(53) <= buffer_re_1(53);
  Delay_bypass_reg_next_im(53) <= buffer_im_1(53);
  Delay_bypass_reg_next_re(54) <= buffer_re_1(54);
  Delay_bypass_reg_next_im(54) <= buffer_im_1(54);
  Delay_bypass_reg_next_re(55) <= buffer_re_1(55);
  Delay_bypass_reg_next_im(55) <= buffer_im_1(55);
  Delay_bypass_reg_next_re(56) <= buffer_re_1(56);
  Delay_bypass_reg_next_im(56) <= buffer_im_1(56);
  Delay_bypass_reg_next_re(57) <= buffer_re_1(57);
  Delay_bypass_reg_next_im(57) <= buffer_im_1(57);
  Delay_bypass_reg_next_re(58) <= buffer_re_1(58);
  Delay_bypass_reg_next_im(58) <= buffer_im_1(58);
  Delay_bypass_reg_next_re(59) <= buffer_re_1(59);
  Delay_bypass_reg_next_im(59) <= buffer_im_1(59);
  Delay_bypass_reg_next_re(60) <= buffer_re_1(60);
  Delay_bypass_reg_next_im(60) <= buffer_im_1(60);
  Delay_bypass_reg_next_re(61) <= buffer_re_1(61);
  Delay_bypass_reg_next_im(61) <= buffer_im_1(61);
  Delay_bypass_reg_next_re(62) <= buffer_re_1(62);
  Delay_bypass_reg_next_im(62) <= buffer_im_1(62);
  Delay_bypass_reg_next_re(63) <= buffer_re_1(63);
  Delay_bypass_reg_next_im(63) <= buffer_im_1(63);

  Delay_out1_re_1 <= Delay_out1_re;

  outputgen: FOR k IN 0 TO 63 GENERATE
    Delay_out1_re_2(k) <= std_logic_vector(Delay_out1_re_1(k));
  END GENERATE;

  vector_re <= buffer_re;

  vector_im <= buffer_im;

END rtl;

